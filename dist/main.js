!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return l}),n.d(t,"c",function(){return f});var i=n(2);Object.assign;function r(e){return e&&("function"==typeof e||"object"==typeof e)}const s={resource:"aurelia:resource",paramTypes:"design:paramtypes",propertyType:"design:type",properties:"design:properties",get(e,t,n){if(!r(t))return;let i=s.getOwn(e,t,n);return void 0===i?s.get(e,Object.getPrototypeOf(t),n):i},getOwn(e,t,n){if(r(t))return Reflect.getOwnMetadata(e,t,n)},define(e,t,n,i){Reflect.defineMetadata(e,t,n,i)},getOrCreateOwn(e,t,n,i){let r=s.getOwn(e,n,i);return void 0===r&&(r=new t,Reflect.defineMetadata(e,r,n,i)),r}},o=new Map,a=Object.freeze({moduleId:void 0,moduleMember:void 0});let l=class e{constructor(e,t){this.moduleId=e,this.moduleMember=t}static get(t){let n=o.get(t);return void 0===n&&i.PLATFORM.eachModule((i,r)=>{if("object"==typeof r)for(let s in r)try{if(r[s]===t)return o.set(t,n=new e(i,s)),!0}catch(e){}return r===t&&(o.set(t,n=new e(i,"default")),!0)}),n||a}static set(e,t){o.set(e,t)}};function u(){return!0}function c(){}function h(e){return void 0===e?e={}:"function"==typeof e&&(e={validate:e}),e.validate||(e.validate=u),e.compose||(e.compose=c),e}function d(e){return function(t){return!0===e(t)}}function p(e,t){return function(n){let i=t(n);if(!0!==i)throw new Error(i||`${e} was not correctly implemented.`)}}function f(e,t){t=h(t);let n=function(i){let r="function"==typeof i?i.prototype:i;t.compose(r),n.assert(r),Object.defineProperty(r,"protocol:"+e,{enumerable:!1,configurable:!1,writable:!1,value:!0})};return n.validate=d(t.validate),n.assert=p(e,t.validate),n}f.create=function(e,t){t=h(t);let n="protocol:"+e,i=function(n){let i=f(e,t);return n?i(n):i};return i.decorates=function(e){return!0===e[n]},i.validate=d(t.validate),i.assert=p(e,t.validate),i}},function(e,t,n){"use strict";n.r(t),n.d(t,"getArrayObserver",function(){return Ee}),n.d(t,"getMapObserver",function(){return Sn}),n.d(t,"getSetObserver",function(){return Bi}),n.d(t,"targetContext",function(){return _}),n.d(t,"sourceContext",function(){return O}),n.d(t,"camelCase",function(){return E}),n.d(t,"createOverrideContext",function(){return S}),n.d(t,"getContextFor",function(){return V}),n.d(t,"createScopeForTest",function(){return M}),n.d(t,"connectable",function(){return I}),n.d(t,"enqueueBindingConnect",function(){return K}),n.d(t,"setConnectQueueThreshold",function(){return G}),n.d(t,"enableConnectQueue",function(){return Z}),n.d(t,"disableConnectQueue",function(){return X}),n.d(t,"getConnectQueueSize",function(){return Y}),n.d(t,"subscriberCollection",function(){return ae}),n.d(t,"ExpressionObserver",function(){return le}),n.d(t,"calcSplices",function(){return pe}),n.d(t,"mergeSplice",function(){return fe}),n.d(t,"projectArraySplices",function(){return ge}),n.d(t,"getChangeRecords",function(){return ve}),n.d(t,"ModifyCollectionObserver",function(){return me}),n.d(t,"CollectionLengthObserver",function(){return be}),n.d(t,"Expression",function(){return Ve}),n.d(t,"BindingBehavior",function(){return Me}),n.d(t,"ValueConverter",function(){return Ne}),n.d(t,"Assign",function(){return Re}),n.d(t,"Conditional",function(){return Te}),n.d(t,"AccessThis",function(){return je}),n.d(t,"AccessScope",function(){return Be}),n.d(t,"AccessMember",function(){return Le}),n.d(t,"AccessKeyed",function(){return Pe}),n.d(t,"CallScope",function(){return Fe}),n.d(t,"CallMember",function(){return Ie}),n.d(t,"CallFunction",function(){return De}),n.d(t,"Binary",function(){return qe}),n.d(t,"Unary",function(){return $e}),n.d(t,"LiteralPrimitive",function(){return ze}),n.d(t,"LiteralString",function(){return Ue}),n.d(t,"LiteralTemplate",function(){return He}),n.d(t,"LiteralArray",function(){return Qe}),n.d(t,"LiteralObject",function(){return We}),n.d(t,"Unparser",function(){return Ze}),n.d(t,"ExpressionCloner",function(){return Xe}),n.d(t,"cloneExpression",function(){return Ye}),n.d(t,"bindingMode",function(){return Je}),n.d(t,"Parser",function(){return et}),n.d(t,"ParserImplementation",function(){return nt}),n.d(t,"delegationStrategy",function(){return Dn}),n.d(t,"EventManager",function(){return qn}),n.d(t,"EventSubscriber",function(){return $n}),n.d(t,"DirtyChecker",function(){return zn}),n.d(t,"DirtyCheckProperty",function(){return Un}),n.d(t,"propertyAccessor",function(){return Qn}),n.d(t,"PrimitiveObserver",function(){return Wn}),n.d(t,"SetterObserver",function(){return Kn}),n.d(t,"XLinkAttributeObserver",function(){return Gn}),n.d(t,"dataAttributeAccessor",function(){return Zn}),n.d(t,"DataAttributeObserver",function(){return Xn}),n.d(t,"StyleObserver",function(){return Yn}),n.d(t,"ValueAttributeObserver",function(){return Jn}),n.d(t,"CheckedObserver",function(){return ei}),n.d(t,"SelectValueObserver",function(){return ti}),n.d(t,"ClassObserver",function(){return ni}),n.d(t,"hasDeclaredDependencies",function(){return ii}),n.d(t,"declarePropertyDependencies",function(){return ri}),n.d(t,"computedFrom",function(){return si}),n.d(t,"ComputedExpression",function(){return oi}),n.d(t,"createComputedObserver",function(){return ai}),n.d(t,"elements",function(){return pi}),n.d(t,"presentationElements",function(){return fi}),n.d(t,"presentationAttributes",function(){return gi}),n.d(t,"SVGAnalyzer",function(){return vi}),n.d(t,"ObserverLocator",function(){return mi}),n.d(t,"ObjectObservationAdapter",function(){return bi}),n.d(t,"BindingExpression",function(){return yi}),n.d(t,"Binding",function(){return wi}),n.d(t,"CallExpression",function(){return xi}),n.d(t,"Call",function(){return ki}),n.d(t,"ValueConverterResource",function(){return Ci}),n.d(t,"valueConverter",function(){return _i}),n.d(t,"BindingBehaviorResource",function(){return Oi}),n.d(t,"bindingBehavior",function(){return Ai}),n.d(t,"ListenerExpression",function(){return Ei}),n.d(t,"Listener",function(){return Si}),n.d(t,"NameExpression",function(){return Mi}),n.d(t,"BindingEngine",function(){return Ti}),n.d(t,"observable",function(){return Pi}),n.d(t,"connectBindingToSignal",function(){return Ii}),n.d(t,"signalBindings",function(){return Di});var i,r,s,o,a,l,u,c,h,d,p,f,g,v=n(3),m=n(2),b=n(6),y=n(0),w=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function k(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function C(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _="Binding:target",O="Binding:source",A=Object.create(null);function E(e){if(e in A)return A[e];var t=e.charAt(0).toLowerCase()+e.slice(1).replace(/[_.-](\w|$)/g,function(e,t){return t.toUpperCase()});return A[e]=t,t}function S(e,t){return{bindingContext:e,parentOverrideContext:t||null}}function V(e,t,n){var i=t.overrideContext;if(n){for(;n&&i;)n--,i=i.parentOverrideContext;if(n||!i)return;return e in i?i:i.bindingContext}for(;i&&!(e in i)&&!(i.bindingContext&&e in i.bindingContext);)i=i.parentOverrideContext;return i?e in i?i:i.bindingContext:t.bindingContext||t.overrideContext}function M(e,t){return t?{bindingContext:e,overrideContext:S(e,S(t))}:{bindingContext:e,overrideContext:S(e)}}var N=[],R=[],T=-1;function j(e){if(e===T){T+=5;for(var t=N.length=R.length=T+1,n=e+1;n<t;++n)N[n]="_observer"+n,R[n]="_observerVersion"+n}}function B(e){for(var t=void 0===this._observerSlots?0:this._observerSlots,n=t;n--&&this[N[n]]!==e;);if(-1===n){for(n=0;this[N[n]];)n++;this[N[n]]=e,e.subscribe(O,this),n===t&&(this._observerSlots=n+1)}void 0===this._version&&(this._version=0),this[R[n]]=this._version,j(n)}function L(e,t){var n=this.observerLocator.getObserver(e,t);B.call(this,n)}function P(e){var t=this.observerLocator.getArrayObserver(e);B.call(this,t)}function F(e){for(var t=this._observerSlots;t--;)if(e||this[R[t]]!==this._version){var n=this[N[t]];this[N[t]]=null,n&&n.unsubscribe(O,this)}}function I(){return function(e){e.prototype.observeProperty=L,e.prototype.observeArray=P,e.prototype.unobserve=F,e.prototype.addObserver=B}}j(-1);var D=[],q={},$=0,z=100,U=15,H=!1,Q=0;function W(e){for(var t=D.length,n=0;n<t;){var i=D[n];if(q[i.__connectQueueId]=!1,i.connect(!0),++n%100==0&&m.PLATFORM.performance.now()-e>U)break}D.splice(0,n),D.length?m.PLATFORM.requestAnimationFrame(W):(H=!1,Q=0)}function K(e){if(Q<z)Q++,e.connect(!1);else{var t=e.__connectQueueId;void 0===t&&(t=$,$++,e.__connectQueueId=t),q[t]||(D.push(e),q[t]=!0)}H||(H=!0,m.PLATFORM.requestAnimationFrame(W))}function G(e){z=e}function Z(){G(100)}function X(){G(Number.MAX_SAFE_INTEGER)}function Y(){return D.length}function J(e,t){return!this.hasSubscriber(e,t)&&(this._context0?this._context1?this._context2?this._contextsRest?(this._contextsRest.push(e),this._callablesRest.push(t),!0):(this._contextsRest=[e],this._callablesRest=[t],!0):(this._context2=e,this._callable2=t,!0):(this._context1=e,this._callable1=t,!0):(this._context0=e,this._callable0=t,!0))}function ee(e,t){if(this._context0===e&&this._callable0===t)return this._context0=null,this._callable0=null,!0;if(this._context1===e&&this._callable1===t)return this._context1=null,this._callable1=null,!0;if(this._context2===e&&this._callable2===t)return this._context2=null,this._callable2=null,!0;var n=this._callablesRest;if(void 0===n||0===n.length)return!1;for(var i=this._contextsRest,r=0;(n[r]!==t||i[r]!==e)&&n.length>r;)r++;return!(r>=n.length)&&(i.splice(r,1),n.splice(r,1),!0)}var te=[],ne=[],ie=[];function re(e,t){var n=this._context0,i=this._callable0,r=this._context1,s=this._callable1,o=this._context2,a=this._callable2,l=this._contextsRest?this._contextsRest.length:0,u=void 0,c=void 0,h=void 0,d=void 0;if(l){for(h=ie.length;h--&&ie[h];);for(h<0?(h=ie.length,u=[],c=[],ie.push(!0),te.push(u),ne.push(c)):(ie[h]=!0,u=te[h],c=ne[h]),d=l;d--;)u[d]=this._contextsRest[d],c[d]=this._callablesRest[d]}if(n&&(i?i.call(n,e,t):n(e,t)),r&&(s?s.call(r,e,t):r(e,t)),o&&(a?a.call(o,e,t):o(e,t)),l){for(d=0;d<l;d++){var p=c[d],f=u[d];p?p.call(f,e,t):f(e,t),u[d]=null,c[d]=null}ie[h]=!1}}function se(){return!!(this._context0||this._context1||this._context2||this._contextsRest&&this._contextsRest.length)}function oe(e,t){if(this._context0===e&&this._callable0===t||this._context1===e&&this._callable1===t||this._context2===e&&this._callable2===t)return!0;var n=void 0,i=this._contextsRest;if(!i||0===(n=i.length))return!1;for(var r=this._callablesRest;n--;)if(i[n]===e&&r[n]===t)return!0;return!1}function ae(){return function(e){e.prototype.addSubscriber=J,e.prototype.removeSubscriber=ee,e.prototype.callSubscribers=re,e.prototype.hasSubscribers=se,e.prototype.hasSubscriber=oe}}var le=I()(i=ae()(i=function(){function e(e,t,n,i){this.scope=e,this.expression=t,this.observerLocator=n,this.lookupFunctions=i}return e.prototype.getValue=function(){return this.expression.evaluate(this.scope,this.lookupFunctions)},e.prototype.setValue=function(e){this.expression.assign(this.scope,e)},e.prototype.subscribe=function(e,t){var n=this;if(this.hasSubscribers()||(this.oldValue=this.expression.evaluate(this.scope,this.lookupFunctions),this.expression.connect(this,this.scope)),this.addSubscriber(e,t),1===arguments.length&&e instanceof Function)return{dispose:function(){n.unsubscribe(e,t)}}},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&(this.unobserve(!0),this.oldValue=void 0)},e.prototype.call=function(){var e=this.expression.evaluate(this.scope,this.lookupFunctions),t=this.oldValue;e!==t&&(this.oldValue=e,this.callSubscribers(e,t)),this._version++,this.expression.connect(this,this.scope),this.unobserve(!1)},e}())||i)||i;function ue(e){return+e}function ce(e,t,n){return{index:e,removed:t,addedCount:n}}function he(){}he.prototype={calcEditDistances:function(e,t,n,i,r,s){for(var o=s-r+1,a=n-t+1,l=new Array(o),u=void 0,c=void 0,h=0;h<o;++h)l[h]=new Array(a),l[h][0]=h;for(var d=0;d<a;++d)l[0][d]=d;for(var p=1;p<o;++p)for(var f=1;f<a;++f)this.equals(e[t+f-1],i[r+p-1])?l[p][f]=l[p-1][f-1]:(u=l[p-1][f]+1,c=l[p][f-1]+1,l[p][f]=u<c?u:c);return l},spliceOperationsFromEditDistances:function(e){for(var t=e.length-1,n=e[0].length-1,i=e[t][n],r=[];t>0||n>0;)if(0!==t)if(0!==n){var s=e[t-1][n-1],o=e[t-1][n],a=e[t][n-1],l=void 0;(l=o<a?o<s?o:s:a<s?a:s)===s?(s===i?r.push(0):(r.push(1),i=s),t--,n--):l===o?(r.push(3),t--,i=o):(r.push(2),n--,i=a)}else r.push(3),t--;else r.push(2),n--;return r.reverse(),r},calcSplices:function(e,t,n,i,r,s){var o=0,a=0,l=Math.min(n-t,s-r);if(0===t&&0===r&&(o=this.sharedPrefix(e,i,l)),n===e.length&&s===i.length&&(a=this.sharedSuffix(e,i,l-o)),r+=o,s-=a,(n-=a)-(t+=o)==0&&s-r==0)return[];if(t===n){for(var u=ce(t,[],0);r<s;)u.removed.push(i[r++]);return[u]}if(r===s)return[ce(t,[],n-t)];for(var c=this.spliceOperationsFromEditDistances(this.calcEditDistances(e,t,n,i,r,s)),h=void 0,d=[],p=t,f=r,g=0;g<c.length;++g)switch(c[g]){case 0:h&&(d.push(h),h=void 0),p++,f++;break;case 1:h||(h=ce(p,[],0)),h.addedCount++,p++,h.removed.push(i[f]),f++;break;case 2:h||(h=ce(p,[],0)),h.addedCount++,p++;break;case 3:h||(h=ce(p,[],0)),h.removed.push(i[f]),f++}return h&&d.push(h),d},sharedPrefix:function(e,t,n){for(var i=0;i<n;++i)if(!this.equals(e[i],t[i]))return i;return n},sharedSuffix:function(e,t,n){for(var i=e.length,r=t.length,s=0;s<n&&this.equals(e[--i],t[--r]);)s++;return s},calculateSplices:function(e,t){return this.calcSplices(e,0,e.length,t,0,t.length)},equals:function(e,t){return e===t}};var de=new he;function pe(e,t,n,i,r,s){return de.calcSplices(e,t,n,i,r,s)}function fe(e,t,n,i){for(var r,s,o,a,l=ce(t,n,i),u=!1,c=0,h=0;h<e.length;h++){var d=e[h];if(d.index+=c,!u){var p=(r=l.index,s=l.index+l.removed.length,o=d.index,a=d.index+d.addedCount,s<o||a<r?-1:s===o||a===r?0:r<o?s<a?s-o:a-o:a<s?a-r:s-r);if(p>=0){e.splice(h,1),h--,c-=d.addedCount-d.removed.length,l.addedCount+=d.addedCount-p;var f=l.removed.length+d.removed.length-p;if(l.addedCount||f){var g=d.removed;if(l.index<d.index){var v=l.removed.slice(0,d.index-l.index);Array.prototype.push.apply(v,g),g=v}if(l.index+l.removed.length>d.index+d.addedCount){var m=l.removed.slice(d.index+d.addedCount-l.index);Array.prototype.push.apply(g,m)}l.removed=g,d.index<l.index&&(l.index=d.index)}else u=!0}else if(l.index<d.index){u=!0,e.splice(h,0,l),h++;var b=l.addedCount-l.removed.length;d.index+=b,c+=b}}}u||e.push(l)}function ge(e,t){var n=[];return function(e,t){for(var n,i=[],r=0;r<t.length;r++){var s=t[r];switch(s.type){case"splice":fe(i,s.index,s.removed.slice(),s.addedCount);break;case"add":case"update":case"delete":if(+(n=s.name)!=n>>>0)continue;var o=ue(s.name);if(o<0)continue;fe(i,o,[s.oldValue],"delete"===s.type?0:1);break;default:console.error("Unexpected record type: "+JSON.stringify(s))}}return i}(0,t).forEach(function(t){1!==t.addedCount||1!==t.removed.length?n=n.concat(pe(e,t.index,t.index+t.addedCount,t.removed,0,t.removed.length)):t.removed[0]!==e[t.index]&&n.push(t)}),n}function ve(e){for(var t,n,i,r=new Array(e.size),s=e.keys(),o=0,a=void 0;(a=s.next())&&!a.done;)r[o]=(t="added",n=e,i=a.value,{type:t,object:n,key:i,oldValue:void 0}),o++;return r}var me=ae()(r=function(){function e(e,t){this.taskQueue=e,this.queued=!1,this.changeRecords=null,this.oldCollection=null,this.collection=t,this.lengthPropertyName=t instanceof Map||t instanceof Set?"size":"length"}return e.prototype.subscribe=function(e,t){this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e.prototype.addChangeRecord=function(e){if(this.hasSubscribers()||this.lengthObserver){if("splice"===e.type){var t=e.index,n=e.object.length;t>n?t=n-e.addedCount:t<0&&(t=n+e.removed.length+t-e.addedCount),t<0&&(t=0),e.index=t}null===this.changeRecords?this.changeRecords=[e]:this.changeRecords.push(e),this.queued||(this.queued=!0,this.taskQueue.queueMicroTask(this))}},e.prototype.flushChangeRecords=function(){(this.changeRecords&&this.changeRecords.length||this.oldCollection)&&this.call()},e.prototype.reset=function(e){this.oldCollection=e,this.hasSubscribers()&&!this.queued&&(this.queued=!0,this.taskQueue.queueMicroTask(this))},e.prototype.getLengthObserver=function(){return this.lengthObserver||(this.lengthObserver=new be(this.collection))},e.prototype.call=function(){var e=this.changeRecords,t=this.oldCollection,n=void 0;this.queued=!1,this.changeRecords=[],this.oldCollection=null,this.hasSubscribers()&&(n=t?this.collection instanceof Map||this.collection instanceof Set?ve(t):pe(this.collection,0,this.collection.length,t,0,t.length):this.collection instanceof Map||this.collection instanceof Set?e:ge(this.collection,e),this.callSubscribers(n)),this.lengthObserver&&this.lengthObserver.call(this.collection[this.lengthPropertyName])},e}())||r,be=ae()(s=function(){function e(e){this.collection=e,this.lengthPropertyName=e instanceof Map||e instanceof Set?"size":"length",this.currentValue=e[this.lengthPropertyName]}return e.prototype.getValue=function(){return this.collection[this.lengthPropertyName]},e.prototype.setValue=function(e){this.collection[this.lengthPropertyName]=e},e.prototype.subscribe=function(e,t){this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e.prototype.call=function(e){var t=this.currentValue;this.callSubscribers(e,t),this.currentValue=e},e}())||s,ye=Array.prototype,we=ye.pop,xe=ye.push,ke=ye.reverse,Ce=ye.shift,_e=ye.sort,Oe=ye.splice,Ae=ye.unshift;function Ee(e,t){return Se.for(e,t)}ye.__au_patched__?v.getLogger("array-observation").warn("Detected 2nd attempt of patching array from Aurelia binding. This is probably caused by dependency mismatch between core modules and a 3rd party plugin. Please see https://github.com/aurelia/cli/pull/906 if you are using webpack."):(Reflect.defineProperty(ye,"__au_patched__",{value:1}),ye.pop=function(){var e=this.length>0,t=we.apply(this,arguments);return e&&void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"delete",object:this,name:this.length,oldValue:t}),t},ye.push=function(){var e=xe.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"splice",object:this,index:this.length-arguments.length,removed:[],addedCount:arguments.length}),e},ye.reverse=function(){var e=void 0;void 0!==this.__array_observer__&&(this.__array_observer__.flushChangeRecords(),e=this.slice());var t=ke.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.reset(e),t},ye.shift=function(){var e=this.length>0,t=Ce.apply(this,arguments);return e&&void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"delete",object:this,name:0,oldValue:t}),t},ye.sort=function(){var e=void 0;void 0!==this.__array_observer__&&(this.__array_observer__.flushChangeRecords(),e=this.slice());var t=_e.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.reset(e),t},ye.splice=function(){var e=Oe.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"splice",object:this,index:+arguments[0],removed:e,addedCount:arguments.length>2?arguments.length-2:0}),e},ye.unshift=function(){var e=Ae.apply(this,arguments);return void 0!==this.__array_observer__&&this.__array_observer__.addChangeRecord({type:"splice",object:this,index:0,removed:[],addedCount:arguments.length}),e});var Se=function(e){function t(t,n){return k(this,e.call(this,t,n))}return C(t,e),t.for=function(e,n){return"__array_observer__"in n||Reflect.defineProperty(n,"__array_observer__",{value:t.create(e,n),enumerable:!1,configurable:!1}),n.__array_observer__},t.create=function(e,n){return new t(e,n)},t}(me),Ve=function(){function e(){this.isAssignable=!1}return e.prototype.evaluate=function(e,t,n){throw new Error('Binding expression "'+this+'" cannot be evaluated.')},e.prototype.assign=function(e,t,n){throw new Error('Binding expression "'+this+'" cannot be assigned to.')},e.prototype.toString=function(){return"undefined"==typeof FEATURE_NO_UNPARSER?Ze.unparse(this):Function.prototype.toString.call(this)},e}(),Me=function(e){function t(t,n,i){var r=k(this,e.call(this));return r.expression=t,r.name=n,r.args=i,r}return C(t,e),t.prototype.evaluate=function(e,t){return this.expression.evaluate(e,t)},t.prototype.assign=function(e,t,n){return this.expression.assign(e,t,n)},t.prototype.accept=function(e){return e.visitBindingBehavior(this)},t.prototype.connect=function(e,t){this.expression.connect(e,t)},t.prototype.bind=function(e,t,n){this.expression.expression&&this.expression.bind&&this.expression.bind(e,t,n);var i=n.bindingBehaviors(this.name);if(!i)throw new Error('No BindingBehavior named "'+this.name+'" was found!');var r="behavior-"+this.name;if(e[r])throw new Error('A binding behavior named "'+this.name+'" has already been applied to "'+this.expression+'"');e[r]=i,i.bind.apply(i,[e,t].concat(Ke(t,this.args,e.lookupFunctions)))},t.prototype.unbind=function(e,t){var n="behavior-"+this.name;e[n].unbind(e,t),e[n]=null,this.expression.expression&&this.expression.unbind&&this.expression.unbind(e,t)},t}(Ve),Ne=function(e){function t(t,n,i){var r=k(this,e.call(this));return r.expression=t,r.name=n,r.args=i,r.allArgs=[t].concat(i),r}return C(t,e),t.prototype.evaluate=function(e,t){var n=t.valueConverters(this.name);if(!n)throw new Error('No ValueConverter named "'+this.name+'" was found!');return"toView"in n?n.toView.apply(n,Ke(e,this.allArgs,t)):this.allArgs[0].evaluate(e,t)},t.prototype.assign=function(e,t,n){var i=n.valueConverters(this.name);if(!i)throw new Error('No ValueConverter named "'+this.name+'" was found!');return"fromView"in i&&(t=i.fromView.apply(i,[t].concat(Ke(e,this.args,n)))),this.allArgs[0].assign(e,t,n)},t.prototype.accept=function(e){return e.visitValueConverter(this)},t.prototype.connect=function(e,t){for(var n=this.allArgs,i=n.length;i--;)n[i].connect(e,t);var r=e.lookupFunctions.valueConverters(this.name);if(!r)throw new Error('No ValueConverter named "'+this.name+'" was found!');var s=r.signals;if(void 0!==s)for(i=s.length;i--;)Ii(e,s[i])},t}(Ve),Re=function(e){function t(t,n){var i=k(this,e.call(this));return i.target=t,i.value=n,i.isAssignable=!0,i}return C(t,e),t.prototype.evaluate=function(e,t){return this.target.assign(e,this.value.evaluate(e,t))},t.prototype.accept=function(e){e.visitAssign(this)},t.prototype.connect=function(e,t){},t.prototype.assign=function(e,t){this.value.assign(e,t),this.target.assign(e,t)},t}(Ve),Te=function(e){function t(t,n,i){var r=k(this,e.call(this));return r.condition=t,r.yes=n,r.no=i,r}return C(t,e),t.prototype.evaluate=function(e,t){return this.condition.evaluate(e,t)?this.yes.evaluate(e,t):this.no.evaluate(e,t)},t.prototype.accept=function(e){return e.visitConditional(this)},t.prototype.connect=function(e,t){this.condition.connect(e,t),this.condition.evaluate(t)?this.yes.connect(e,t):this.no.connect(e,t)},t}(Ve),je=function(e){function t(t){var n=k(this,e.call(this));return n.ancestor=t,n}return C(t,e),t.prototype.evaluate=function(e,t){for(var n=e.overrideContext,i=this.ancestor;i--&&n;)n=n.parentOverrideContext;return i<1&&n?n.bindingContext:void 0},t.prototype.accept=function(e){return e.visitAccessThis(this)},t.prototype.connect=function(e,t){},t}(Ve),Be=function(e){function t(t,n){var i=k(this,e.call(this));return i.name=t,i.ancestor=n,i.isAssignable=!0,i}return C(t,e),t.prototype.evaluate=function(e,t){return V(this.name,e,this.ancestor)[this.name]},t.prototype.assign=function(e,t){var n=V(this.name,e,this.ancestor);return n?n[this.name]=t:void 0},t.prototype.accept=function(e){return e.visitAccessScope(this)},t.prototype.connect=function(e,t){var n=V(this.name,t,this.ancestor);e.observeProperty(n,this.name)},t}(Ve),Le=function(e){function t(t,n){var i=k(this,e.call(this));return i.object=t,i.name=n,i.isAssignable=!0,i}return C(t,e),t.prototype.evaluate=function(e,t){var n=this.object.evaluate(e,t);return null==n?n:n[this.name]},t.prototype.assign=function(e,t){var n=this.object.evaluate(e);return null==n&&(n={},this.object.assign(e,n)),n[this.name]=t,t},t.prototype.accept=function(e){return e.visitAccessMember(this)},t.prototype.connect=function(e,t){this.object.connect(e,t);var n=this.object.evaluate(t);n&&e.observeProperty(n,this.name)},t}(Ve),Pe=function(e){function t(t,n){var i=k(this,e.call(this));return i.object=t,i.key=n,i.isAssignable=!0,i}return C(t,e),t.prototype.evaluate=function(e,t){return function(e,t){if(Array.isArray(e))return e[parseInt(t,10)];if(e)return e[t];if(null==e)return;return e[t]}(this.object.evaluate(e,t),this.key.evaluate(e,t))},t.prototype.assign=function(e,t){return function(e,t,n){if(Array.isArray(e)){var i=parseInt(t,10);e.length<=i&&(e.length=i+1),e[i]=n}else e[t]=n;return n}(this.object.evaluate(e),this.key.evaluate(e),t)},t.prototype.accept=function(e){return e.visitAccessKeyed(this)},t.prototype.connect=function(e,t){this.object.connect(e,t);var n=this.object.evaluate(t);if(n instanceof Object){this.key.connect(e,t);var i=this.key.evaluate(t);null==i||Array.isArray(n)&&"number"==typeof i||e.observeProperty(n,i)}},t}(Ve),Fe=function(e){function t(t,n,i){var r=k(this,e.call(this));return r.name=t,r.args=n,r.ancestor=i,r}return C(t,e),t.prototype.evaluate=function(e,t,n){var i=Ke(e,this.args,t),r=V(this.name,e,this.ancestor),s=Ge(r,this.name,n);if(s)return s.apply(r,i)},t.prototype.accept=function(e){return e.visitCallScope(this)},t.prototype.connect=function(e,t){for(var n=this.args,i=n.length;i--;)n[i].connect(e,t)},t}(Ve),Ie=function(e){function t(t,n,i){var r=k(this,e.call(this));return r.object=t,r.name=n,r.args=i,r}return C(t,e),t.prototype.evaluate=function(e,t,n){var i=this.object.evaluate(e,t),r=Ke(e,this.args,t),s=Ge(i,this.name,n);if(s)return s.apply(i,r)},t.prototype.accept=function(e){return e.visitCallMember(this)},t.prototype.connect=function(e,t){if(this.object.connect(e,t),Ge(this.object.evaluate(t),this.name,!1))for(var n=this.args,i=n.length;i--;)n[i].connect(e,t)},t}(Ve),De=function(e){function t(t,n){var i=k(this,e.call(this));return i.func=t,i.args=n,i}return C(t,e),t.prototype.evaluate=function(e,t,n){var i=this.func.evaluate(e,t);if("function"==typeof i)return i.apply(null,Ke(e,this.args,t));if(n||null!=i)throw new Error(this.func+" is not a function")},t.prototype.accept=function(e){return e.visitCallFunction(this)},t.prototype.connect=function(e,t){if(this.func.connect(e,t),"function"==typeof this.func.evaluate(t))for(var n=this.args,i=n.length;i--;)n[i].connect(e,t)},t}(Ve),qe=function(e){function t(t,n,i){var r=k(this,e.call(this));return r.operation=t,r.left=n,r.right=i,r}return C(t,e),t.prototype.evaluate=function(e,t){var n=this.left.evaluate(e,t);switch(this.operation){case"&&":return n&&this.right.evaluate(e,t);case"||":return n||this.right.evaluate(e,t)}var i=this.right.evaluate(e,t);switch(this.operation){case"==":return n==i;case"===":return n===i;case"!=":return n!=i;case"!==":return n!==i;case"instanceof":return"function"==typeof i&&n instanceof i;case"in":return"object"===(void 0===i?"undefined":x(i))&&null!==i&&n in i}if(null===n||null===i||void 0===n||void 0===i){switch(this.operation){case"+":return null!=n?n:null!=i?i:0;case"-":return null!=n?n:null!=i?0-i:0}return null}switch(this.operation){case"+":return function(e,t){if(null!==e&&null!==t)return"string"==typeof e&&"string"!=typeof t?e+t.toString():"string"!=typeof e&&"string"==typeof t?e.toString()+t:e+t;if(null!==e)return e;if(null!==t)return t;return 0}(n,i);case"-":return n-i;case"*":return n*i;case"/":return n/i;case"%":return n%i;case"<":return n<i;case">":return n>i;case"<=":return n<=i;case">=":return n>=i;case"^":return n^i}throw new Error("Internal error ["+this.operation+"] not handled")},t.prototype.accept=function(e){return e.visitBinary(this)},t.prototype.connect=function(e,t){this.left.connect(e,t);var n=this.left.evaluate(t);"&&"===this.operation&&!n||"||"===this.operation&&n||this.right.connect(e,t)},t}(Ve),$e=function(e){function t(t,n){var i=k(this,e.call(this));return i.operation=t,i.expression=n,i}return C(t,e),t.prototype.evaluate=function(e,t){switch(this.operation){case"!":return!this.expression.evaluate(e,t);case"typeof":return x(this.expression.evaluate(e,t));case"void":return void this.expression.evaluate(e,t)}throw new Error("Internal error ["+this.operation+"] not handled")},t.prototype.accept=function(e){return e.visitPrefix(this)},t.prototype.connect=function(e,t){this.expression.connect(e,t)},t}(Ve),ze=function(e){function t(t){var n=k(this,e.call(this));return n.value=t,n}return C(t,e),t.prototype.evaluate=function(e,t){return this.value},t.prototype.accept=function(e){return e.visitLiteralPrimitive(this)},t.prototype.connect=function(e,t){},t}(Ve),Ue=function(e){function t(t){var n=k(this,e.call(this));return n.value=t,n}return C(t,e),t.prototype.evaluate=function(e,t){return this.value},t.prototype.accept=function(e){return e.visitLiteralString(this)},t.prototype.connect=function(e,t){},t}(Ve),He=function(e){function t(t,n,i,r){var s=k(this,e.call(this));if(s.cooked=t,s.expressions=n||[],s.length=s.expressions.length,s.tagged=void 0!==r,s.tagged)if(s.cooked.raw=i,s.tag=r,r instanceof Be)s.contextType="Scope";else{if(!(r instanceof Le||r instanceof Pe))throw new Error(s.tag+" is not a valid template tag");s.contextType="Object"}return s}return C(t,e),t.prototype.getScopeContext=function(e,t){return V(this.tag.name,e,this.tag.ancestor)},t.prototype.getObjectContext=function(e,t){return this.tag.object.evaluate(e,t)},t.prototype.evaluate=function(e,t,n){for(var i=new Array(this.length),r=0;r<this.length;r++)i[r]=this.expressions[r].evaluate(e,t);if(this.tagged){var s=this.tag.evaluate(e,t);if("function"==typeof s){var o=this["get"+this.contextType+"Context"](e,t);return s.call.apply(s,[o,this.cooked].concat(i))}if(!n)return null;throw new Error(this.tag+" is not a function")}for(var a=this.cooked[0],l=0;l<this.length;l++)a=String.prototype.concat(a,i[l],this.cooked[l+1]);return a},t.prototype.accept=function(e){return e.visitLiteralTemplate(this)},t.prototype.connect=function(e,t){for(var n=0;n<this.length;n++)this.expressions[n].connect(e,t);this.tagged&&this.tag.connect(e,t)},t}(Ve),Qe=function(e){function t(t){var n=k(this,e.call(this));return n.elements=t,n}return C(t,e),t.prototype.evaluate=function(e,t){for(var n=this.elements,i=[],r=0,s=n.length;r<s;++r)i[r]=n[r].evaluate(e,t);return i},t.prototype.accept=function(e){return e.visitLiteralArray(this)},t.prototype.connect=function(e,t){for(var n=this.elements.length,i=0;i<n;i++)this.elements[i].connect(e,t)},t}(Ve),We=function(e){function t(t,n){var i=k(this,e.call(this));return i.keys=t,i.values=n,i}return C(t,e),t.prototype.evaluate=function(e,t){for(var n={},i=this.keys,r=this.values,s=0,o=i.length;s<o;++s)n[i[s]]=r[s].evaluate(e,t);return n},t.prototype.accept=function(e){return e.visitLiteralObject(this)},t.prototype.connect=function(e,t){for(var n=this.keys.length,i=0;i<n;i++)this.values[i].connect(e,t)},t}(Ve);function Ke(e,t,n){for(var i=t.length,r=[],s=0;s<i;s++)r[s]=t[s].evaluate(e,n);return r}function Ge(e,t,n){var i=null==e?null:e[t];if("function"==typeof i)return i;if(!n&&null==i)return null;throw new Error(t+" is not a function")}var Ze=null;"undefined"==typeof FEATURE_NO_UNPARSER&&(Ze=function(){function e(e){this.buffer=e}return e.unparse=function(e){var t=[],n=new Ze(t);return e.accept(n),t.join("")},e.prototype.write=function(e){this.buffer.push(e)},e.prototype.writeArgs=function(e){this.write("(");for(var t=0,n=e.length;t<n;++t)0!==t&&this.write(","),e[t].accept(this);this.write(")")},e.prototype.visitBindingBehavior=function(e){var t=e.args;e.expression.accept(this),this.write("&"+e.name);for(var n=0,i=t.length;n<i;++n)this.write(":"),t[n].accept(this)},e.prototype.visitValueConverter=function(e){var t=e.args;e.expression.accept(this),this.write("|"+e.name);for(var n=0,i=t.length;n<i;++n)this.write(":"),t[n].accept(this)},e.prototype.visitAssign=function(e){e.target.accept(this),this.write("="),e.value.accept(this)},e.prototype.visitConditional=function(e){e.condition.accept(this),this.write("?"),e.yes.accept(this),this.write(":"),e.no.accept(this)},e.prototype.visitAccessThis=function(e){if(0!==e.ancestor){this.write("$parent");for(var t=e.ancestor-1;t--;)this.write(".$parent")}else this.write("$this")},e.prototype.visitAccessScope=function(e){for(var t=e.ancestor;t--;)this.write("$parent.");this.write(e.name)},e.prototype.visitAccessMember=function(e){e.object.accept(this),this.write("."+e.name)},e.prototype.visitAccessKeyed=function(e){e.object.accept(this),this.write("["),e.key.accept(this),this.write("]")},e.prototype.visitCallScope=function(e){for(var t=e.ancestor;t--;)this.write("$parent.");this.write(e.name),this.writeArgs(e.args)},e.prototype.visitCallFunction=function(e){e.func.accept(this),this.writeArgs(e.args)},e.prototype.visitCallMember=function(e){e.object.accept(this),this.write("."+e.name),this.writeArgs(e.args)},e.prototype.visitPrefix=function(e){this.write("("+e.operation),e.operation.charCodeAt(0)>=97&&this.write(" "),e.expression.accept(this),this.write(")")},e.prototype.visitBinary=function(e){e.left.accept(this),105===e.operation.charCodeAt(0)?this.write(" "+e.operation+" "):this.write(e.operation),e.right.accept(this)},e.prototype.visitLiteralPrimitive=function(e){this.write(""+e.value)},e.prototype.visitLiteralArray=function(e){var t=e.elements;this.write("[");for(var n=0,i=t.length;n<i;++n)0!==n&&this.write(","),t[n].accept(this);this.write("]")},e.prototype.visitLiteralObject=function(e){var t=e.keys,n=e.values;this.write("{");for(var i=0,r=t.length;i<r;++i)0!==i&&this.write(","),this.write("'"+t[i]+"':"),n[i].accept(this);this.write("}")},e.prototype.visitLiteralString=function(e){var t=e.value.replace(/'/g,"'");this.write("'"+t+"'")},e.prototype.visitLiteralTemplate=function(e){var t=e.cooked,n=e.expressions,i=n.length;this.write("`"),this.write(t[0]);for(var r=0;r<i;r++)n[r].accept(this),this.write(t[r+1]);this.write("`")},e}());var Xe=function(){function e(){}return e.prototype.cloneExpressionArray=function(e){for(var t=[],n=e.length;n--;)t[n]=e[n].accept(this);return t},e.prototype.visitBindingBehavior=function(e){return new Me(e.expression.accept(this),e.name,this.cloneExpressionArray(e.args))},e.prototype.visitValueConverter=function(e){return new Ne(e.expression.accept(this),e.name,this.cloneExpressionArray(e.args))},e.prototype.visitAssign=function(e){return new Re(e.target.accept(this),e.value.accept(this))},e.prototype.visitConditional=function(e){return new Te(e.condition.accept(this),e.yes.accept(this),e.no.accept(this))},e.prototype.visitAccessThis=function(e){return new je(e.ancestor)},e.prototype.visitAccessScope=function(e){return new Be(e.name,e.ancestor)},e.prototype.visitAccessMember=function(e){return new Le(e.object.accept(this),e.name)},e.prototype.visitAccessKeyed=function(e){return new Pe(e.object.accept(this),e.key.accept(this))},e.prototype.visitCallScope=function(e){return new Fe(e.name,this.cloneExpressionArray(e.args),e.ancestor)},e.prototype.visitCallFunction=function(e){return new De(e.func.accept(this),this.cloneExpressionArray(e.args))},e.prototype.visitCallMember=function(e){return new Ie(e.object.accept(this),e.name,this.cloneExpressionArray(e.args))},e.prototype.visitUnary=function(e){return new $e(prefix.operation,prefix.expression.accept(this))},e.prototype.visitBinary=function(e){return new qe(e.operation,e.left.accept(this),e.right.accept(this))},e.prototype.visitLiteralPrimitive=function(e){return new ze(e)},e.prototype.visitLiteralArray=function(e){return new Qe(this.cloneExpressionArray(e.elements))},e.prototype.visitLiteralObject=function(e){return new We(e.keys,this.cloneExpressionArray(e.values))},e.prototype.visitLiteralString=function(e){return new Ue(e.value)},e.prototype.visitLiteralTemplate=function(e){return new He(e.cooked,this.cloneExpressionArray(e.expressions),e.raw,e.tag&&e.tag.accept(this))},e}();function Ye(e){var t=new Xe;return e.accept(t)}var Je={oneTime:0,toView:1,oneWay:1,twoWay:2,fromView:3},et=function(){function e(){this.cache=Object.create(null)}return e.prototype.parse=function(e){return e=e||"",this.cache[e]||(this.cache[e]=new nt(e).parseBindingBehavior())},e}(),tt=String.fromCharCode,nt=function(){function e(e){this.idx=0,this.start=0,this.src=e,this.len=e.length,this.tkn=mt,this.val=void 0,this.ch=e.charCodeAt(0)}return w(e,[{key:"raw",get:function(){return this.src.slice(this.start,this.idx)}}]),e.prototype.parseBindingBehavior=function(){this.nextToken(),this.tkn&gt&&this.err("Invalid start of expression");for(var e=this.parseValueConverter();this.opt(zt);)e=new Me(e,this.val,this.parseVariadicArgs());return this.tkn!==mt&&this.err("Unconsumed token "+this.raw),e},e.prototype.parseValueConverter=function(){for(var e=this.parseExpression();this.opt(Ut);)e=new Ne(e,this.val,this.parseVariadicArgs());return e},e.prototype.parseVariadicArgs=function(){this.nextToken();for(var e=[];this.opt(qt);)e.push(this.parseExpression());return e},e.prototype.parseExpression=function(){for(var e=this.idx,t=this.parseConditional();this.tkn===dn;)t.isAssignable||this.err("Expression "+this.src.slice(e,this.start)+" is not assignable"),this.nextToken(),e=this.idx,t=new Re(t,this.parseConditional());return t},e.prototype.parseConditional=function(){var e=this.parseBinary(0);if(this.opt($t)){var t=this.parseExpression();this.expect(qt),e=new Te(e,t,this.parseExpression())}return e},e.prototype.parseBinary=function(e){for(var t=this.parseLeftHandSide(0);this.tkn&Ct;){var n=this.tkn;if((n&ft)<=e)break;this.nextToken(),t=new qe(gn[n&pt],t,this.parseBinary(n&ft))}return t},e.prototype.parseLeftHandSide=function(e){var t=void 0;e:switch(this.tkn){case sn:return this.nextToken(),this.parseLeftHandSide(0);case on:return this.nextToken(),new qe("-",new ze(0),this.parseLeftHandSide(0));case pn:case an:case ln:var n=gn[this.tkn&pt];return this.nextToken(),new $e(n,this.parseLeftHandSide(0));case Rt:do{if(this.nextToken(),e++,this.opt(Bt))this.tkn===Bt&&this.err();else{if(this.tkn&vt){t=new je(e&dt),e=e&ct|rt;break e}this.err()}}while(this.tkn===Rt);case bt:t=new Be(this.val,e&dt),this.nextToken(),e=e&ct|st;break;case Nt:this.nextToken(),t=new je(0),e=e&ct|rt;break;case Tt:this.nextToken(),t=this.parseExpression(),this.expect(Pt),e=ut;break;case It:this.nextToken();var i=[];if(this.tkn!==Dt)do{i.push(this.parseExpression())}while(this.opt(Ft));this.expect(Dt),t=new Qe(i),e=ut;break;case jt:var r=[],s=[];for(this.nextToken();this.tkn!==Lt;){if(this.tkn&yt){var o=this.ch,a=this.tkn,l=this.idx;r.push(this.val),this.nextToken(),this.opt(qt)?s.push(this.parseExpression()):(this.ch=o,this.tkn=a,this.idx=l,s.push(this.parseLeftHandSide(ct)))}else this.tkn&wt?(r.push(this.val),this.nextToken(),this.expect(qt),s.push(this.parseExpression())):this.err();this.tkn!==Lt&&this.expect(Ft)}this.expect(Lt),t=new We(r,s),e=ut;break;case kt:t=new Ue(this.val),this.nextToken(),e=ut;break;case Ot:t=new He([this.val]),this.nextToken(),e=ut;break;case At:t=this.parseTemplate(0),e=ut;break;case xt:t=new ze(this.val),this.nextToken();break;case Vt:case Mt:case St:case Et:t=new ze(gn[this.tkn&pt]),this.nextToken(),e=ut;break;default:this.idx>=this.len?this.err("Unexpected end of expression"):this.err()}if(e&ct)return t;for(var u=this.val;this.tkn&_t;)switch(this.tkn){case Bt:if(this.nextToken(),this.tkn&yt||this.err(),u=this.val,this.nextToken(),e=e&ut|(e&(rt|st))<<1|e&ot|(e&at)>>1|(e&lt)>>2,this.tkn===Tt)continue;t=e&st?new Be(u,t.ancestor):new Le(t,u);continue;case It:this.nextToken(),e=at,t=new Pe(t,this.parseExpression()),this.expect(Dt);break;case Tt:this.nextToken();for(var c=[];this.tkn!==Pt&&(c.push(this.parseExpression()),this.opt(Ft)););this.expect(Pt),t=e&st?new Fe(u,c,t.ancestor):e&(ot|ut)?new Ie(t,u,c):new De(t,c),e=lt;break;case Ot:t=new He([this.val],[],[this.raw],t),this.nextToken();break;case At:t=this.parseTemplate(e|ht,t)}return t},e.prototype.parseTemplate=function(e,t){var n=[this.val],i=e&ht?[this.raw]:void 0;this.expect(At);for(var r=[this.parseExpression()];(this.tkn=this.scanTemplateTail())!==Ot;)n.push(this.val),e&ht&&i.push(this.raw),this.expect(At),r.push(this.parseExpression());return n.push(this.val),e&ht&&i.push(this.raw),this.nextToken(),new He(n,r,i,t)},e.prototype.nextToken=function(){for(;this.idx<this.len;)if(this.ch<=32)this.next();else{if(this.start=this.idx,36===this.ch||this.ch>=97&&this.ch<=122)return void(this.tkn=this.scanIdentifier());if(null!==(this.tkn=On[this.ch](this)))return}this.tkn=mt},e.prototype.next=function(){return this.ch=this.src.charCodeAt(++this.idx)},e.prototype.scanIdentifier=function(){for(;Cn.has(this.next())||this.ch>127&&_n[this.ch];);return fn[this.val=this.raw]||bt},e.prototype.scanNumber=function(e){if(e)this.val=0;else for(this.val=this.ch-48;this.next()<=57&&this.ch>=48;)this.val=10*this.val+this.ch-48;if(e||46===this.ch){e||this.next();for(var t=this.idx,n=this.ch-48;this.next()<=57&&this.ch>=48;)n=10*n+this.ch-48;this.val=this.val+n/Math.pow(10,this.idx-t)}if(101===this.ch||69===this.ch){var i=this.idx;for(this.next(),45!==this.ch&&43!==this.ch||this.next(),this.ch>=48&&this.ch<=57||(this.idx=i,this.err("Invalid exponent"));this.next()<=57&&this.ch>=48;);this.val=parseFloat(this.src.slice(this.start,this.idx))}return xt},e.prototype.scanString=function(){var e=this.ch;this.next();for(var t=void 0,n=this.idx;this.ch!==e;)if(92===this.ch){t||(t=[]),t.push(this.src.slice(n,this.idx)),this.next();var i=void 0;if(117===this.ch)if(this.next(),this.idx+4<this.len){var r=this.src.slice(this.idx,this.idx+4);/[A-Z0-9]{4}/i.test(r)||this.err("Invalid unicode escape [\\u"+r+"]"),i=parseInt(r,16),this.idx+=4,this.ch=this.src.charCodeAt(this.idx)}else this.err();else i=it(this.ch),this.next();t.push(tt(i)),n=this.idx}else 0===this.ch||this.idx>=this.len?this.err("Unterminated quote"):this.next();var s=this.src.slice(n,this.idx);this.next();var o=s;return null!=t&&(t.push(s),o=t.join("")),this.val=o,kt},e.prototype.scanTemplate=function(){for(var e=!0,t="";96!==this.next();)if(36===this.ch){if(this.idx+1<this.len&&123===this.src.charCodeAt(this.idx+1)){this.idx++,e=!1;break}t+="$"}else 92===this.ch?t+=tt(it(this.next())):0===this.ch||this.idx>=this.len?this.err("Unterminated template literal"):t+=tt(this.ch);return this.next(),this.val=t,e?Ot:At},e.prototype.scanTemplateTail=function(){return this.idx>=this.len&&this.err("Unterminated template"),this.idx--,this.scanTemplate()},e.prototype.err=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Unexpected token "+this.raw,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.start;throw new Error("Parser Error: "+e+" at column "+t+" in expression ["+this.src+"]")},e.prototype.opt=function(e){return this.tkn===e&&(this.nextToken(),!0)},e.prototype.expect=function(e){this.tkn===e?this.nextToken():this.err("Missing expected token "+gn[e&pt],this.idx)},e}();function it(e){switch(e){case 102:return 12;case 110:return 10;case 114:return 13;case 116:return 9;case 118:return 11;default:return e}}var rt=1024,st=2048,ot=4096,at=8192,lt=16384,ut=32768,ct=65536,ht=1<<17,dt=511,pt=63,ft=448,gt=2048,vt=16384,mt=65536|vt|gt,bt=1<<17,yt=32768|bt,wt=1<<18,xt=1<<19|wt,kt=1<<20|wt,Ct=1<<21,_t=1<<24,Ot=1<<25|_t,At=1<<26|_t,Et=32768|wt,St=32769|wt,Vt=32770|wt,Mt=32771|wt,Nt=4|yt,Rt=5|yt,Tt=8198|vt|_t,jt=8199,Bt=8388616|_t,Lt=4105|vt|gt,Pt=4106|vt|gt,Ft=11|vt,It=8204|vt|1<<23|_t,Dt=4109|gt,qt=14|vt,$t=15,zt=18|vt,Ut=19|vt,Ht=84|Ct,Qt=149|Ct,Wt=214|Ct,Kt=279|Ct,Gt=280|Ct,Zt=281|Ct,Xt=282|Ct,Yt=347|Ct,Jt=348|Ct,en=349|Ct,tn=350|Ct,nn=33119|Ct,rn=33120|Ct,sn=417|Ct|1<<22,on=418|Ct|1<<22,an=4227107,ln=4227108,un=485|Ct,cn=486|Ct,hn=487|Ct,dn=40,pn=4194345,fn=Object.create(null);fn.true=St,fn.null=Vt,fn.false=Et,fn.undefined=Mt,fn.$this=Nt,fn.$parent=Rt,fn.in=nn,fn.instanceof=rn,fn.typeof=an,fn.void=ln;var gn=[!1,!0,null,void 0,"$this","$parent","(","{",".","}",")",",","[","]",":","?","'",'"',"&","|","||","&&","^","==","!=","===","!==","<",">","<=",">=","in","instanceof","+","-","typeof","void","*","%","/","=","!"],vn=[36,0,48,58,65,91,95,0,97,123],mn=[36,0,65,91,95,0,97,123,170,0,186,0,192,215,216,247,248,697,736,741,7424,7462,7468,7517,7522,7526,7531,7544,7545,7615,7680,7936,8305,0,8319,0,8336,8349,8490,8492,8498,0,8526,0,8544,8585,11360,11392,42786,42888,42891,42927,42928,42936,42999,43008,43824,43867,43868,43877,64256,64263,65313,65339,65345,65371],bn=[48,58],yn=[0,33,127,161];function wn(e,t,n,i){for(var r=n.length,s=0;s<r;s+=2){var o=n[s],a=n[s+1];if(a=a>0?a:o+1,e)for(var l=o;l<a;)e[l]=i,l++;if(t)for(var u=o;u<a;u++)t.add(u)}}function xn(e){return function(t){return t.next(),e}}function kn(e){return e.err("Unexpected character ["+tt(e.ch)+"]"),null}var Cn=new Set;wn(null,Cn,vn,!0);var _n=new Uint8Array(65535);wn(_n,null,mn,1),wn(_n,null,bn,1);for(var On=new Array(65535),An=0;An<65535;)On[An]=kn,An++;wn(On,null,yn,function(e){return e.next(),null}),wn(On,null,mn,function(e){return e.scanIdentifier()}),wn(On,null,bn,function(e){return e.scanNumber(!1)}),On[34]=On[39]=function(e){return e.scanString()},On[96]=function(e){return e.scanTemplate()},On[33]=function(e){return 61!==e.next()?pn:61!==e.next()?Gt:(e.next(),Xt)},On[61]=function(e){return 61!==e.next()?dn:61!==e.next()?Kt:(e.next(),Zt)},On[38]=function(e){return 38!==e.next()?zt:(e.next(),Qt)},On[124]=function(e){return 124!==e.next()?Ut:(e.next(),Ht)},On[46]=function(e){return e.next()<=57&&e.ch>=48?e.scanNumber(!0):Bt},On[60]=function(e){return 61!==e.next()?Yt:(e.next(),en)},On[62]=function(e){return 61!==e.next()?Jt:(e.next(),tn)},On[37]=xn(cn),On[40]=xn(Tt),On[41]=xn(Pt),On[42]=xn(un),On[43]=xn(sn),On[44]=xn(Ft),On[45]=xn(on),On[47]=xn(hn),On[58]=xn(qt),On[63]=xn($t),On[91]=xn(It),On[93]=xn(Dt),On[94]=xn(Wt),On[123]=xn(jt),On[125]=xn(Lt);var En=Map.prototype;function Sn(e,t){return Vn.for(e,t)}var Vn=function(e){function t(t,n){return k(this,e.call(this,t,n))}return C(t,e),t.for=function(e,n){return"__map_observer__"in n||Reflect.defineProperty(n,"__map_observer__",{value:t.create(e,n),enumerable:!1,configurable:!1}),n.__map_observer__},t.create=function(e,n){var i=new t(e,n),r=En;return r.set===n.set&&r.delete===n.delete&&r.clear===n.clear||(r={set:n.set,delete:n.delete,clear:n.clear}),n.set=function(){var e=n.has(arguments[0]),t=e?"update":"add",s=n.get(arguments[0]),o=r.set.apply(n,arguments);return e&&s===n.get(arguments[0])||i.addChangeRecord({type:t,object:n,key:arguments[0],oldValue:s}),o},n.delete=function(){var e=n.has(arguments[0]),t=n.get(arguments[0]),s=r.delete.apply(n,arguments);return e&&i.addChangeRecord({type:"delete",object:n,key:arguments[0],oldValue:t}),s},n.clear=function(){var e=r.clear.apply(n,arguments);return i.addChangeRecord({type:"clear",object:n}),e},i},t}(me),Mn=v.getLogger("event-manager");function Nn(e){return e.path&&e.path[0]||e.deepPath&&e.deepPath[0]||e.target}function Rn(){this.standardStopPropagation(),this.propagationStopped=!0}function Tn(e){e.propagationStopped=!1;for(var t=Nn(e),n=[];t;){if(t.capturedCallbacks){var i=t.capturedCallbacks[e.type];i&&(e.stopPropagation!==Rn&&(e.standardStopPropagation=e.stopPropagation,e.stopPropagation=Rn),n.push(i))}t=t.parentNode}for(var r=n.length-1;r>=0&&!e.propagationStopped;r--){var s=n[r];"handleEvent"in s?s.handleEvent(e):s(e)}}var jn=function(){function e(e){this.eventName=e,this.count=0}return e.prototype.increment=function(){this.count++,1===this.count&&m.DOM.addEventListener(this.eventName,Tn,!0)},e.prototype.decrement=function(){0===this.count?Mn.warn("The same EventListener was disposed multiple times."):0==--this.count&&m.DOM.removeEventListener(this.eventName,Bn,!1)},e}();function Bn(e){e.propagationStopped=!1;for(var t=Nn(e);t&&!e.propagationStopped;){if(t.delegatedCallbacks){var n=t.delegatedCallbacks[e.type];n&&(e.stopPropagation!==Rn&&(e.standardStopPropagation=e.stopPropagation,e.stopPropagation=Rn),"handleEvent"in n?n.handleEvent(e):n(e))}t=t.parentNode}}var Ln=function(){function e(e){this.eventName=e,this.count=0}return e.prototype.increment=function(){this.count++,1===this.count&&m.DOM.addEventListener(this.eventName,Bn,!1)},e.prototype.decrement=function(){0===this.count?Mn.warn("The same EventListener was disposed multiple times."):0==--this.count&&m.DOM.removeEventListener(this.eventName,Bn,!1)},e}(),Pn=function(){function e(e,t,n){this.entry=e,this.lookup=t,this.targetEvent=n}return e.prototype.dispose=function(){this.lookup[this.targetEvent]?(this.entry.decrement(),this.lookup[this.targetEvent]=null):Mn.warn("Calling .dispose() on already disposed eventListener")},e}(),Fn=function(){function e(e,t,n){this.target=e,this.targetEvent=t,this.callback=n}return e.prototype.dispose=function(){this.target.removeEventListener(this.targetEvent,this.callback)},e}(),In=function(){function e(){this.delegatedHandlers={},this.capturedHandlers={}}return e.prototype.subscribe=function(e,t,n,i,r){var s=void 0,o=void 0,a=void 0;if(i===Dn.bubbling){s=this.delegatedHandlers,a=s[t]||(s[t]=new Ln(t));var l=e.delegatedCallbacks||(e.delegatedCallbacks={});return l[t]?Mn.warn("Overriding previous callback for event listener",{event:t,callback:n,previousCallback:l[t]}):a.increment(),l[t]=n,!0===r?new Pn(a,l,t):function(){a.decrement(),l[t]=null}}if(i===Dn.capturing){o=this.capturedHandlers,a=o[t]||(o[t]=new jn(t));var u=e.capturedCallbacks||(e.capturedCallbacks={});return u[t]?Mn.error("already have a callback for event",{event:t,callback:n}):a.increment(),u[t]=n,!0===r?new Pn(a,u,t):function(){a.decrement(),u[t]=null}}return e.addEventListener(t,n),!0===r?new Fn(e,t,n):function(){e.removeEventListener(t,n)}},e}(),Dn={none:0,capturing:1,bubbling:2},qn=function(){function e(){this.elementHandlerLookup={},this.eventStrategyLookup={},this.registerElementConfig({tagName:"input",properties:{value:["change","input"],checked:["change","input"],files:["change","input"]}}),this.registerElementConfig({tagName:"textarea",properties:{value:["change","input"]}}),this.registerElementConfig({tagName:"select",properties:{value:["change"]}}),this.registerElementConfig({tagName:"content editable",properties:{value:["change","input","blur","keyup","paste"]}}),this.registerElementConfig({tagName:"scrollable element",properties:{scrollTop:["scroll"],scrollLeft:["scroll"]}}),this.defaultEventStrategy=new In}return e.prototype.registerElementConfig=function(e){var t=e.tagName.toLowerCase(),n=e.properties,i=void 0,r=this.elementHandlerLookup[t]={};for(i in n)n.hasOwnProperty(i)&&(r[i]=n[i])},e.prototype.registerEventStrategy=function(e,t){this.eventStrategyLookup[e]=t},e.prototype.getElementHandler=function(e,t){var n=void 0,i=this.elementHandlerLookup;if(e.tagName){if(i[n=e.tagName.toLowerCase()]&&i[n][t])return new $n(i[n][t]);if("textContent"===t||"innerHTML"===t)return new $n(i["content editable"].value);if("scrollTop"===t||"scrollLeft"===t)return new $n(i["scrollable element"][t])}return null},e.prototype.addEventListener=function(e,t,n,i,r){return(this.eventStrategyLookup[t]||this.defaultEventStrategy).subscribe(e,t,n,i,r)},e}(),$n=function(){function e(e){this.events=e,this.element=null,this.handler=null}return e.prototype.subscribe=function(e,t){this.element=e,this.handler=t;for(var n=this.events,i=0,r=n.length;r>i;++i)e.addEventListener(n[i],t)},e.prototype.dispose=function(){if(null!==this.element){for(var e=this.element,t=this.handler,n=this.events,i=0,r=n.length;r>i;++i)e.removeEventListener(n[i],t);this.element=this.handler=null}},e}(),zn=function(){function e(){this.tracked=[],this.checkDelay=120}return e.prototype.addProperty=function(e){var t=this.tracked;t.push(e),1===t.length&&this.scheduleDirtyCheck()},e.prototype.removeProperty=function(e){var t=this.tracked;t.splice(t.indexOf(e),1)},e.prototype.scheduleDirtyCheck=function(){var e=this;setTimeout(function(){return e.check()},this.checkDelay)},e.prototype.check=function(){for(var e=this.tracked,t=e.length;t--;){var n=e[t];n.isDirty()&&n.call()}e.length&&this.scheduleDirtyCheck()},e}(),Un=ae()(o=function(){function e(e,t,n){this.dirtyChecker=e,this.obj=t,this.propertyName=n}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e.prototype.call=function(){var e=this.oldValue,t=this.getValue();this.callSubscribers(t,e),this.oldValue=t},e.prototype.isDirty=function(){return this.oldValue!==this.obj[this.propertyName]},e.prototype.subscribe=function(e,t){this.hasSubscribers()||(this.oldValue=this.getValue(),this.dirtyChecker.addProperty(this)),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.dirtyChecker.removeProperty(this)},e}())||o,Hn=v.getLogger("property-observation"),Qn={getValue:function(e,t){return e[t]},setValue:function(e,t,n){t[n]=e}},Wn=function(){function e(e,t){this.doNotCache=!0,this.primitive=e,this.propertyName=t}return e.prototype.getValue=function(){return this.primitive[this.propertyName]},e.prototype.setValue=function(){var e=x(this.primitive);throw new Error("The "+this.propertyName+" property of a "+e+" ("+this.primitive+") cannot be assigned.")},e.prototype.subscribe=function(){},e.prototype.unsubscribe=function(){},e}(),Kn=ae()(a=function(){function e(e,t,n){this.taskQueue=e,this.obj=t,this.propertyName=n,this.queued=!1,this.observing=!1}return e.prototype.getValue=function(){return this.obj[this.propertyName]},e.prototype.setValue=function(e){this.obj[this.propertyName]=e},e.prototype.getterValue=function(){return this.currentValue},e.prototype.setterValue=function(e){var t=this.currentValue;t!==e&&(this.queued||(this.oldValue=t,this.queued=!0,this.taskQueue.queueMicroTask(this)),this.currentValue=e)},e.prototype.call=function(){var e=this.oldValue,t=this.currentValue;this.queued=!1,this.callSubscribers(t,e)},e.prototype.subscribe=function(e,t){this.observing||this.convertProperty(),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)},e.prototype.convertProperty=function(){this.observing=!0,this.currentValue=this.obj[this.propertyName],this.setValue=this.setterValue,this.getValue=this.getterValue,Reflect.defineProperty(this.obj,this.propertyName,{configurable:!0,enumerable:!(this.propertyName in this.obj)||this.obj.propertyIsEnumerable(this.propertyName),get:this.getValue.bind(this),set:this.setValue.bind(this)})||Hn.warn("Cannot observe property '"+this.propertyName+"' of object",this.obj)},e}())||a,Gn=function(){function e(e,t,n){this.element=e,this.propertyName=t,this.attributeName=n}return e.prototype.getValue=function(){return this.element.getAttributeNS("http://www.w3.org/1999/xlink",this.attributeName)},e.prototype.setValue=function(e){return this.element.setAttributeNS("http://www.w3.org/1999/xlink",this.attributeName,e)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}(),Zn={getValue:function(e,t){return e.getAttribute(t)},setValue:function(e,t,n){null==e?t.removeAttribute(n):t.setAttribute(n,e)}},Xn=function(){function e(e,t){this.element=e,this.propertyName=t}return e.prototype.getValue=function(){return this.element.getAttribute(this.propertyName)},e.prototype.setValue=function(e){return null==e?this.element.removeAttribute(this.propertyName):this.element.setAttribute(this.propertyName,e)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}(),Yn=function(){function e(e,t){this.element=e,this.propertyName=t,this.styles=null,this.version=0}return e.prototype.getValue=function(){return this.element.style.cssText},e.prototype._setProperty=function(e,t){var n="";null!=t&&"function"==typeof t.indexOf&&-1!==t.indexOf("!important")&&(n="important",t=t.replace("!important","")),this.element.style.setProperty(e,t,n)},e.prototype.setValue=function(e){var t=this.styles||{},n=void 0,i=this.version;if(null!=e)if(e instanceof Object){var r=void 0;for(n in e)e.hasOwnProperty(n)&&(r=e[n],t[n=n.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})]=i,this._setProperty(n,r))}else if(e.length)for(var s=/\s*([\w\-]+)\s*:\s*((?:(?:[\w\-]+\(\s*(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[\w\-]+\(\s*(?:^"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^\)]*)\),?|[^\)]*)\),?|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^;]*),?\s*)+);?/g,o=void 0;null!==(o=s.exec(e));)(n=o[1])&&(t[n]=i,this._setProperty(n,o[2]));if(this.styles=t,this.version+=1,0!==i)for(n in i-=1,t)t.hasOwnProperty(n)&&t[n]===i&&this.element.style.removeProperty(n)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "'+this.propertyName+'" property is not supported.')},e}(),Jn=ae()(l=function(){function e(e,t,n){this.element=e,this.propertyName=t,this.handler=n,"files"===t&&(this.setValue=function(){})}return e.prototype.getValue=function(){return this.element[this.propertyName]},e.prototype.setValue=function(e){e=null==e?"":e,this.element[this.propertyName]!==e&&(this.element[this.propertyName]=e,this.notify())},e.prototype.notify=function(){var e=this.oldValue,t=this.getValue();this.callSubscribers(t,e),this.oldValue=t},e.prototype.handleEvent=function(){this.notify()},e.prototype.subscribe=function(e,t){this.hasSubscribers()||(this.oldValue=this.getValue(),this.handler.subscribe(this.element,this)),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.handler.dispose()},e}())||l,ei=ae()(u=function(){function e(e,t,n){this.element=e,this.handler=t,this.observerLocator=n}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){this.initialSync&&this.value===e||(this.arrayObserver&&(this.arrayObserver.unsubscribe("CheckedObserver:array",this),this.arrayObserver=null),"checkbox"===this.element.type&&Array.isArray(e)&&(this.arrayObserver=this.observerLocator.getArrayObserver(e),this.arrayObserver.subscribe("CheckedObserver:array",this)),this.oldValue=this.value,this.value=e,this.synchronizeElement(),this.notify(),this.initialSync||(this.initialSync=!0,this.observerLocator.taskQueue.queueMicroTask(this)))},e.prototype.call=function(e,t){this.synchronizeElement(),this.valueObserver||(this.valueObserver=this.element.__observers__.model||this.element.__observers__.value,this.valueObserver&&this.valueObserver.subscribe("CheckedObserver:value",this))},e.prototype.synchronizeElement=function(){var e=this.value,t=this.element,n=t.hasOwnProperty("model")?t.model:t.value,i="radio"===t.type,r=t.matcher||function(e,t){return e===t};t.checked=i&&!!r(e,n)||!i&&!0===e||!i&&Array.isArray(e)&&-1!==e.findIndex(function(e){return!!r(e,n)})},e.prototype.synchronizeValue=function(){var e=this.value,t=this.element,n=t.hasOwnProperty("model")?t.model:t.value,i=void 0,r=t.matcher||function(e,t){return e===t};if("checkbox"===t.type){if(Array.isArray(e))return i=e.findIndex(function(e){return!!r(e,n)}),void(t.checked&&-1===i?e.push(n):t.checked||-1===i||e.splice(i,1));e=t.checked}else{if(!t.checked)return;e=n}this.oldValue=this.value,this.value=e,this.notify()},e.prototype.notify=function(){var e=this.oldValue,t=this.value;t!==e&&this.callSubscribers(t,e)},e.prototype.handleEvent=function(){this.synchronizeValue()},e.prototype.subscribe=function(e,t){this.hasSubscribers()||this.handler.subscribe(this.element,this),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.handler.dispose()},e.prototype.unbind=function(){this.arrayObserver&&(this.arrayObserver.unsubscribe("CheckedObserver:array",this),this.arrayObserver=null),this.valueObserver&&this.valueObserver.unsubscribe("CheckedObserver:value",this)},e}())||u,ti=ae()(c=function(){function e(e,t,n){this.element=e,this.handler=t,this.observerLocator=n}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){if(null!=e&&this.element.multiple&&!Array.isArray(e))throw new Error("Only null or Array instances can be bound to a multi-select.");this.value!==e&&(this.arrayObserver&&(this.arrayObserver.unsubscribe("SelectValueObserver:array",this),this.arrayObserver=null),Array.isArray(e)&&(this.arrayObserver=this.observerLocator.getArrayObserver(e),this.arrayObserver.subscribe("SelectValueObserver:array",this)),this.oldValue=this.value,this.value=e,this.synchronizeOptions(),this.notify(),this.initialSync||(this.initialSync=!0,this.observerLocator.taskQueue.queueMicroTask(this)))},e.prototype.call=function(e,t){this.synchronizeOptions()},e.prototype.synchronizeOptions=function(){var e=this.value,t=void 0;Array.isArray(e)&&(t=!0);for(var n=this.element.options,i=n.length,r=this.element.matcher||function(e,t){return e===t},s=function(){var s=n.item(i),o=s.hasOwnProperty("model")?s.model:s.value;if(t)return s.selected=-1!==e.findIndex(function(e){return!!r(o,e)}),"continue";s.selected=!!r(o,e)};i--;)s()},e.prototype.synchronizeValue=function(){for(var e=this,t=this.element.options,n=0,i=[],r=0,s=t.length;r<s;r++){var o=t.item(r);o.selected&&(i.push(o.hasOwnProperty("model")?o.model:o.value),n++)}if(this.element.multiple){if(Array.isArray(this.value)){var a=function(){for(var t=e.element.matcher||function(e,t){return e===t},n=0,r=function(){var r=e.value[n];-1===i.findIndex(function(e){return t(r,e)})?e.value.splice(n,1):n++};n<e.value.length;)r();n=0;for(var s=function(){var r=i[n];-1===e.value.findIndex(function(e){return t(r,e)})&&e.value.push(r),n++};n<i.length;)s();return{v:void 0}}();if("object"===(void 0===a?"undefined":x(a)))return a.v}}else i=0===n?null:i[0];i!==this.value&&(this.oldValue=this.value,this.value=i,this.notify())},e.prototype.notify=function(){var e=this.oldValue,t=this.value;this.callSubscribers(t,e)},e.prototype.handleEvent=function(){this.synchronizeValue()},e.prototype.subscribe=function(e,t){this.hasSubscribers()||this.handler.subscribe(this.element,this),this.addSubscriber(e,t)},e.prototype.unsubscribe=function(e,t){this.removeSubscriber(e,t)&&!this.hasSubscribers()&&this.handler.dispose()},e.prototype.bind=function(){var e=this;this.domObserver=m.DOM.createMutationObserver(function(){e.synchronizeOptions(),e.synchronizeValue()}),this.domObserver.observe(this.element,{childList:!0,subtree:!0,characterData:!0})},e.prototype.unbind=function(){this.domObserver.disconnect(),this.domObserver=null,this.arrayObserver&&(this.arrayObserver.unsubscribe("SelectValueObserver:array",this),this.arrayObserver=null)},e}())||c,ni=function(){function e(e){this.element=e,this.doNotCache=!0,this.value="",this.version=0}return e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){var t=this.nameIndex||{},n=this.version,i=void 0,r=void 0;if(null!=e&&e.length)for(var s=0,o=(i=e.split(/\s+/)).length;s<o;s++)""!==(r=i[s])&&(t[r]=n,this.element.classList.add(r));if(this.value=e,this.nameIndex=t,this.version+=1,0!==n)for(r in n-=1,t)t.hasOwnProperty(r)&&t[r]===n&&this.element.classList.remove(r)},e.prototype.subscribe=function(){throw new Error('Observation of a "'+this.element.nodeName+'" element\'s "class" property is not supported.')},e}();function ii(e){return!!(e&&e.get&&e.get.dependencies)}function ri(e,t,n){Object.getOwnPropertyDescriptor(e.prototype,t).get.dependencies=n}function si(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e,n,i){return i.get.dependencies=t,i}}var oi=function(e){function t(t,n){var i=k(this,e.call(this));return i.name=t,i.dependencies=n,i.isAssignable=!0,i}return C(t,e),t.prototype.evaluate=function(e,t){return e.bindingContext[this.name]},t.prototype.assign=function(e,t){e.bindingContext[this.name]=t},t.prototype.accept=function(e){throw new Error("not implemented")},t.prototype.connect=function(e,t){for(var n=this.dependencies,i=n.length;i--;)n[i].connect(e,t)},t}(Ve);function ai(e,t,n,i){var r=n.get.dependencies;if(!(r instanceof oi)){for(var s=r.length;s--;)r[s]=i.parser.parse(r[s]);r=n.get.dependencies=new oi(t,r)}var o={bindingContext:e,overrideContext:S(e)};return new le(o,r,i)}var li=void 0,ui=void 0,ci=void 0,hi=void 0;if("undefined"==typeof FEATURE_NO_SVG){li={a:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","target","transform","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],altGlyph:["class","dx","dy","externalResourcesRequired","format","glyphRef","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],altGlyphDef:["id","xml:base","xml:lang","xml:space"],altGlyphItem:["id","xml:base","xml:lang","xml:space"],animate:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateColor:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateMotion:["accumulate","additive","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keyPoints","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","origin","path","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","rotate","systemLanguage","to","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],animateTransform:["accumulate","additive","attributeName","attributeType","begin","by","calcMode","dur","end","externalResourcesRequired","fill","from","id","keySplines","keyTimes","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","type","values","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],circle:["class","cx","cy","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","r","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],clipPath:["class","clipPathUnits","externalResourcesRequired","id","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],"color-profile":["id","local","name","rendering-intent","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],cursor:["externalResourcesRequired","id","requiredExtensions","requiredFeatures","systemLanguage","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],defs:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],desc:["class","id","style","xml:base","xml:lang","xml:space"],ellipse:["class","cx","cy","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rx","ry","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],feBlend:["class","height","id","in","in2","mode","result","style","width","x","xml:base","xml:lang","xml:space","y"],feColorMatrix:["class","height","id","in","result","style","type","values","width","x","xml:base","xml:lang","xml:space","y"],feComponentTransfer:["class","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],feComposite:["class","height","id","in","in2","k1","k2","k3","k4","operator","result","style","width","x","xml:base","xml:lang","xml:space","y"],feConvolveMatrix:["bias","class","divisor","edgeMode","height","id","in","kernelMatrix","kernelUnitLength","order","preserveAlpha","result","style","targetX","targetY","width","x","xml:base","xml:lang","xml:space","y"],feDiffuseLighting:["class","diffuseConstant","height","id","in","kernelUnitLength","result","style","surfaceScale","width","x","xml:base","xml:lang","xml:space","y"],feDisplacementMap:["class","height","id","in","in2","result","scale","style","width","x","xChannelSelector","xml:base","xml:lang","xml:space","y","yChannelSelector"],feDistantLight:["azimuth","elevation","id","xml:base","xml:lang","xml:space"],feFlood:["class","height","id","result","style","width","x","xml:base","xml:lang","xml:space","y"],feFuncA:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncB:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncG:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feFuncR:["amplitude","exponent","id","intercept","offset","slope","tableValues","type","xml:base","xml:lang","xml:space"],feGaussianBlur:["class","height","id","in","result","stdDeviation","style","width","x","xml:base","xml:lang","xml:space","y"],feImage:["class","externalResourcesRequired","height","id","preserveAspectRatio","result","style","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],feMerge:["class","height","id","result","style","width","x","xml:base","xml:lang","xml:space","y"],feMergeNode:["id","xml:base","xml:lang","xml:space"],feMorphology:["class","height","id","in","operator","radius","result","style","width","x","xml:base","xml:lang","xml:space","y"],feOffset:["class","dx","dy","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],fePointLight:["id","x","xml:base","xml:lang","xml:space","y","z"],feSpecularLighting:["class","height","id","in","kernelUnitLength","result","specularConstant","specularExponent","style","surfaceScale","width","x","xml:base","xml:lang","xml:space","y"],feSpotLight:["id","limitingConeAngle","pointsAtX","pointsAtY","pointsAtZ","specularExponent","x","xml:base","xml:lang","xml:space","y","z"],feTile:["class","height","id","in","result","style","width","x","xml:base","xml:lang","xml:space","y"],feTurbulence:["baseFrequency","class","height","id","numOctaves","result","seed","stitchTiles","style","type","width","x","xml:base","xml:lang","xml:space","y"],filter:["class","externalResourcesRequired","filterRes","filterUnits","height","id","primitiveUnits","style","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],font:["class","externalResourcesRequired","horiz-adv-x","horiz-origin-x","horiz-origin-y","id","style","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],"font-face":["accent-height","alphabetic","ascent","bbox","cap-height","descent","font-family","font-size","font-stretch","font-style","font-variant","font-weight","hanging","id","ideographic","mathematical","overline-position","overline-thickness","panose-1","slope","stemh","stemv","strikethrough-position","strikethrough-thickness","underline-position","underline-thickness","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","widths","x-height","xml:base","xml:lang","xml:space"],"font-face-format":["id","string","xml:base","xml:lang","xml:space"],"font-face-name":["id","name","xml:base","xml:lang","xml:space"],"font-face-src":["id","xml:base","xml:lang","xml:space"],"font-face-uri":["id","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],foreignObject:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xml:base","xml:lang","xml:space","y"],g:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],glyph:["arabic-form","class","d","glyph-name","horiz-adv-x","id","lang","orientation","style","unicode","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],glyphRef:["class","dx","dy","format","glyphRef","id","style","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],hkern:["g1","g2","id","k","u1","u2","xml:base","xml:lang","xml:space"],image:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],line:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","x1","x2","xml:base","xml:lang","xml:space","y1","y2"],linearGradient:["class","externalResourcesRequired","gradientTransform","gradientUnits","id","spreadMethod","style","x1","x2","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y1","y2"],marker:["class","externalResourcesRequired","id","markerHeight","markerUnits","markerWidth","orient","preserveAspectRatio","refX","refY","style","viewBox","xml:base","xml:lang","xml:space"],mask:["class","externalResourcesRequired","height","id","maskContentUnits","maskUnits","requiredExtensions","requiredFeatures","style","systemLanguage","width","x","xml:base","xml:lang","xml:space","y"],metadata:["id","xml:base","xml:lang","xml:space"],"missing-glyph":["class","d","horiz-adv-x","id","style","vert-adv-y","vert-origin-x","vert-origin-y","xml:base","xml:lang","xml:space"],mpath:["externalResourcesRequired","id","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],path:["class","d","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","pathLength","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],pattern:["class","externalResourcesRequired","height","id","patternContentUnits","patternTransform","patternUnits","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","viewBox","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],polygon:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","points","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],polyline:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","points","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],radialGradient:["class","cx","cy","externalResourcesRequired","fx","fy","gradientTransform","gradientUnits","id","r","spreadMethod","style","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],rect:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rx","ry","style","systemLanguage","transform","width","x","xml:base","xml:lang","xml:space","y"],script:["externalResourcesRequired","id","type","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],set:["attributeName","attributeType","begin","dur","end","externalResourcesRequired","fill","id","max","min","onbegin","onend","onload","onrepeat","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","systemLanguage","to","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],stop:["class","id","offset","style","xml:base","xml:lang","xml:space"],style:["id","media","title","type","xml:base","xml:lang","xml:space"],svg:["baseProfile","class","contentScriptType","contentStyleType","externalResourcesRequired","height","id","onabort","onactivate","onclick","onerror","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","onresize","onscroll","onunload","onzoom","preserveAspectRatio","requiredExtensions","requiredFeatures","style","systemLanguage","version","viewBox","width","x","xml:base","xml:lang","xml:space","y","zoomAndPan"],switch:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","xml:base","xml:lang","xml:space"],symbol:["class","externalResourcesRequired","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","preserveAspectRatio","style","viewBox","xml:base","xml:lang","xml:space"],text:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","transform","x","xml:base","xml:lang","xml:space","y"],textPath:["class","externalResourcesRequired","id","lengthAdjust","method","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","spacing","startOffset","style","systemLanguage","textLength","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space"],title:["class","id","style","xml:base","xml:lang","xml:space"],tref:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","x","xlink:arcrole","xlink:href","xlink:role","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],tspan:["class","dx","dy","externalResourcesRequired","id","lengthAdjust","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","rotate","style","systemLanguage","textLength","x","xml:base","xml:lang","xml:space","y"],use:["class","externalResourcesRequired","height","id","onactivate","onclick","onfocusin","onfocusout","onload","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","requiredExtensions","requiredFeatures","style","systemLanguage","transform","width","x","xlink:actuate","xlink:arcrole","xlink:href","xlink:role","xlink:show","xlink:title","xlink:type","xml:base","xml:lang","xml:space","y"],view:["externalResourcesRequired","id","preserveAspectRatio","viewBox","viewTarget","xml:base","xml:lang","xml:space","zoomAndPan"],vkern:["g1","g2","id","k","u1","u2","xml:base","xml:lang","xml:space"]},ui={a:!0,altGlyph:!0,animate:!0,animateColor:!0,circle:!0,clipPath:!0,defs:!0,ellipse:!0,feBlend:!0,feColorMatrix:!0,feComponentTransfer:!0,feComposite:!0,feConvolveMatrix:!0,feDiffuseLighting:!0,feDisplacementMap:!0,feFlood:!0,feGaussianBlur:!0,feImage:!0,feMerge:!0,feMorphology:!0,feOffset:!0,feSpecularLighting:!0,feTile:!0,feTurbulence:!0,filter:!0,font:!0,foreignObject:!0,g:!0,glyph:!0,glyphRef:!0,image:!0,line:!0,linearGradient:!0,marker:!0,mask:!0,"missing-glyph":!0,path:!0,pattern:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,svg:!0,switch:!0,symbol:!0,text:!0,textPath:!0,tref:!0,tspan:!0,use:!0},ci={"alignment-baseline":!0,"baseline-shift":!0,"clip-path":!0,"clip-rule":!0,clip:!0,"color-interpolation-filters":!0,"color-interpolation":!0,"color-profile":!0,"color-rendering":!0,color:!0,cursor:!0,direction:!0,display:!0,"dominant-baseline":!0,"enable-background":!0,"fill-opacity":!0,"fill-rule":!0,fill:!0,filter:!0,"flood-color":!0,"flood-opacity":!0,"font-family":!0,"font-size-adjust":!0,"font-size":!0,"font-stretch":!0,"font-style":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-horizontal":!0,"glyph-orientation-vertical":!0,"image-rendering":!0,kerning:!0,"letter-spacing":!0,"lighting-color":!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,mask:!0,opacity:!0,overflow:!0,"pointer-events":!0,"shape-rendering":!0,"stop-color":!0,"stop-opacity":!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,stroke:!0,"text-anchor":!0,"text-decoration":!0,"text-rendering":!0,"unicode-bidi":!0,visibility:!0,"word-spacing":!0,"writing-mode":!0};var di=function(e){var t=m.DOM.createElement("div");return t.innerHTML=e,t.firstChild};hi=function(){function e(){"altglyph"===di("<svg><altGlyph /></svg>").firstElementChild.nodeName&&pi.altGlyph&&(pi.altglyph=pi.altGlyph,delete pi.altGlyph,pi.altglyphdef=pi.altGlyphDef,delete pi.altGlyphDef,pi.altglyphitem=pi.altGlyphItem,delete pi.altGlyphItem,pi.glyphref=pi.glyphRef,delete pi.glyphRef)}return e.prototype.isStandardSvgAttribute=function(e,t){return fi[e]&&gi[t]||pi[e]&&-1!==pi[e].indexOf(t)},e}()}var pi=li,fi=ui,gi=ci,vi=hi||function(){function e(){}return e.prototype.isStandardSvgAttribute=function(){return!1},e}(),mi=(d=h=function(){function e(e,t,n,i,r){this.taskQueue=e,this.eventManager=t,this.dirtyChecker=n,this.svgAnalyzer=i,this.parser=r,this.adapters=[],this.logger=v.getLogger("observer-locator")}return e.prototype.getObserver=function(e,t){var n,i=e.__observers__;return i&&t in i?i[t]:((n=this.createPropertyObserver(e,t)).doNotCache||(void 0===i&&(i=this.getOrCreateObserversLookup(e)),i[t]=n),n)},e.prototype.getOrCreateObserversLookup=function(e){return e.__observers__||this.createObserversLookup(e)},e.prototype.createObserversLookup=function(e){var t={};return Reflect.defineProperty(e,"__observers__",{enumerable:!1,configurable:!1,writable:!1,value:t})||this.logger.warn("Cannot add observers to object",e),t},e.prototype.addAdapter=function(e){this.adapters.push(e)},e.prototype.getAdapterObserver=function(e,t,n){for(var i=0,r=this.adapters.length;i<r;i++){var s=this.adapters[i].getObserver(e,t,n);if(s)return s}return null},e.prototype.createPropertyObserver=function(e,t){var n,i=void 0,r=void 0;if(!(e instanceof Object))return new Wn(e,t);if(e instanceof m.DOM.Element){if("class"===t)return new ni(e);if("style"===t||"css"===t)return new Yn(e,t);if(i=this.eventManager.getElementHandler(e,t),"value"===t&&"select"===e.tagName.toLowerCase())return new ti(e,i,this);if("checked"===t&&"input"===e.tagName.toLowerCase())return new ei(e,i,this);if(i)return new Jn(e,t,i);if(r=/^xlink:(.+)$/.exec(t))return new Gn(e,t,r[1]);if("role"===t&&(e instanceof m.DOM.Element||e instanceof m.DOM.SVGElement)||/^\w+:|^data-|^aria-/.test(t)||e instanceof m.DOM.SVGElement&&this.svgAnalyzer.isStandardSvgAttribute(e.nodeName,t))return new Xn(e,t)}if(ii(n=Object.getPropertyDescriptor(e,t)))return ai(e,t,n,this);if(n){var s=n.get||n.set;if(s){if(s.getObserver)return s.getObserver(e);var o=this.getAdapterObserver(e,t,n);return o||new Un(this.dirtyChecker,e,t)}}return e instanceof Array?"length"===t?this.getArrayObserver(e).getLengthObserver():new Un(this.dirtyChecker,e,t):e instanceof Map?"size"===t?this.getMapObserver(e).getLengthObserver():new Un(this.dirtyChecker,e,t):e instanceof Set?"size"===t?this.getSetObserver(e).getLengthObserver():new Un(this.dirtyChecker,e,t):new Kn(this.taskQueue,e,t)},e.prototype.getAccessor=function(e,t){if(e instanceof m.DOM.Element){if("class"===t||"style"===t||"css"===t||"value"===t&&("input"===e.tagName.toLowerCase()||"select"===e.tagName.toLowerCase())||"checked"===t&&"input"===e.tagName.toLowerCase()||"model"===t&&"input"===e.tagName.toLowerCase()||/^xlink:.+$/.exec(t))return this.getObserver(e,t);if(/^\w+:|^data-|^aria-/.test(t)||e instanceof m.DOM.SVGElement&&this.svgAnalyzer.isStandardSvgAttribute(e.nodeName,t)||"img"===e.tagName.toLowerCase()&&"src"===t||"a"===e.tagName.toLowerCase()&&"href"===t)return Zn}return Qn},e.prototype.getArrayObserver=function(e){return Ee(this.taskQueue,e)},e.prototype.getMapObserver=function(e){return Sn(this.taskQueue,e)},e.prototype.getSetObserver=function(e){return Bi(this.taskQueue,e)},e}(),h.inject=[b.TaskQueue,qn,zn,vi,et],d),bi=function(){function e(){}return e.prototype.getObserver=function(e,t,n){throw new Error("BindingAdapters must implement getObserver(object, propertyName).")},e}(),yi=function(){function e(e,t,n,i,r,s){this.observerLocator=e,this.targetProperty=t,this.sourceExpression=n,this.mode=i,this.lookupFunctions=r,this.attribute=s,this.discrete=!1}return e.prototype.createBinding=function(e){return new wi(this.observerLocator,this.sourceExpression,e,this.targetProperty,this.mode,this.lookupFunctions)},e}(),wi=I()(p=function(){function e(e,t,n,i,r,s){this.observerLocator=e,this.sourceExpression=t,this.target=n,this.targetProperty=i,this.mode=r,this.lookupFunctions=s}return e.prototype.updateTarget=function(e){this.targetObserver.setValue(e,this.target,this.targetProperty)},e.prototype.updateSource=function(e){this.sourceExpression.assign(this.source,e,this.lookupFunctions)},e.prototype.call=function(e,t,n){if(this.isBound){if(e===O)return n=this.targetObserver.getValue(this.target,this.targetProperty),(t=this.sourceExpression.evaluate(this.source,this.lookupFunctions))!==n&&this.updateTarget(t),void(this.mode!==Je.oneTime&&(this._version++,this.sourceExpression.connect(this,this.source),this.unobserve(!1)));if(e!==_)throw new Error("Unexpected call context "+e);t!==this.sourceExpression.evaluate(this.source,this.lookupFunctions)&&this.updateSource(t)}},e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions);var t=this.mode;if(!this.targetObserver){var n=t===Je.twoWay||t===Je.fromView?"getObserver":"getAccessor";this.targetObserver=this.observerLocator[n](this.target,this.targetProperty)}if("bind"in this.targetObserver&&this.targetObserver.bind(),this.mode!==Je.fromView){var i=this.sourceExpression.evaluate(e,this.lookupFunctions);this.updateTarget(i)}t!==Je.oneTime&&(t===Je.toView?K(this):t===Je.twoWay?(this.sourceExpression.connect(this,e),this.targetObserver.subscribe(_,this)):t===Je.fromView&&this.targetObserver.subscribe(_,this))},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,"unbind"in this.targetObserver&&this.targetObserver.unbind(),this.targetObserver.unsubscribe&&this.targetObserver.unsubscribe(_,this),this.unobserve(!0))},e.prototype.connect=function(e){if(this.isBound){if(e){var t=this.sourceExpression.evaluate(this.source,this.lookupFunctions);this.updateTarget(t)}this.sourceExpression.connect(this,this.source)}},e}())||p,xi=function(){function e(e,t,n,i){this.observerLocator=e,this.targetProperty=t,this.sourceExpression=n,this.lookupFunctions=i}return e.prototype.createBinding=function(e){return new ki(this.observerLocator,this.sourceExpression,e,this.targetProperty,this.lookupFunctions)},e}(),ki=function(){function e(e,t,n,i,r){this.sourceExpression=t,this.target=n,this.targetProperty=e.getObserver(n,i),this.lookupFunctions=r}return e.prototype.callSource=function(e){var t=this.source.overrideContext;Object.assign(t,e),t.$event=e;var n=this.sourceExpression.evaluate(this.source,this.lookupFunctions,!0);for(var i in delete t.$event,e)delete t[i];return n},e.prototype.bind=function(e){var t=this;if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),this.targetProperty.setValue(function(e){return t.callSource(e)})},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,this.targetProperty.setValue(null))},e}(),Ci=function(){function e(e){this.name=e}return e.convention=function(t){if(t.endsWith("ValueConverter"))return new e(E(t.substring(0,t.length-14)))},e.prototype.initialize=function(e,t){this.instance=e.get(t)},e.prototype.register=function(e,t){e.registerValueConverter(t||this.name,this.instance)},e.prototype.load=function(e,t){},e}();function _i(e){if(void 0===e||"string"==typeof e)return function(t){y.b.define(y.b.resource,new Ci(e),t)};y.b.define(y.b.resource,new Ci,e)}var Oi=function(){function e(e){this.name=e}return e.convention=function(t){if(t.endsWith("BindingBehavior"))return new e(E(t.substring(0,t.length-15)))},e.prototype.initialize=function(e,t){this.instance=e.get(t)},e.prototype.register=function(e,t){e.registerBindingBehavior(t||this.name,this.instance)},e.prototype.load=function(e,t){},e}();function Ai(e){if(void 0===e||"string"==typeof e)return function(t){y.b.define(y.b.resource,new Oi(e),t)};y.b.define(y.b.resource,new Oi,e)}var Ei=function(){function e(e,t,n,i,r,s){this.eventManager=e,this.targetEvent=t,this.sourceExpression=n,this.delegationStrategy=i,this.discrete=!0,this.preventDefault=r,this.lookupFunctions=s}return e.prototype.createBinding=function(e){return new Si(this.eventManager,this.targetEvent,this.delegationStrategy,this.sourceExpression,e,this.preventDefault,this.lookupFunctions)},e}(),Si=function(){function e(e,t,n,i,r,s,o){this.eventManager=e,this.targetEvent=t,this.delegationStrategy=n,this.sourceExpression=i,this.target=r,this.preventDefault=s,this.lookupFunctions=o}return e.prototype.callSource=function(e){var t=this.source.overrideContext;t.$event=e;var n=this.sourceExpression.evaluate(this.source,this.lookupFunctions,!0);return delete t.$event,!0!==n&&this.preventDefault&&e.preventDefault(),n},e.prototype.handleEvent=function(e){this.callSource(e)},e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),this._handler=this.eventManager.addEventListener(this.target,this.targetEvent,this,this.delegationStrategy,!0)},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,this._handler.dispose(),this._handler=null)},e}();function Vi(e){var t=e.au;if(void 0===t)throw new Error('No Aurelia APIs are defined for the element: "'+e.tagName+'".');return t}var Mi=function(){function e(e,t,n){this.sourceExpression=e,this.apiName=t,this.lookupFunctions=n,this.discrete=!0}return e.prototype.createBinding=function(t){return new Ni(this.sourceExpression,e.locateAPI(t,this.apiName),this.lookupFunctions)},e.locateAPI=function(e,t){switch(t){case"element":return e;case"controller":return Vi(e).controller;case"view-model":return Vi(e).controller.viewModel;case"view":return Vi(e).controller.view;default:var n=Vi(e)[t];if(void 0===n)throw new Error('Attempted to reference "'+t+"\", but it was not found amongst the target's API.");return n.viewModel}},e}(),Ni=function(){function e(e,t,n){this.sourceExpression=e,this.target=t,this.lookupFunctions=n}return e.prototype.bind=function(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),this.sourceExpression.assign(this.source,this.target,this.lookupFunctions)},e.prototype.unbind=function(){this.isBound&&(this.isBound=!1,this.sourceExpression.evaluate(this.source,this.lookupFunctions)===this.target&&this.sourceExpression.assign(this.source,null,this.lookupFunctions),this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null)},e}(),Ri={bindingBehaviors:function(e){return null},valueConverters:function(e){return null}},Ti=(g=f=function(){function e(e,t){this.observerLocator=e,this.parser=t}return e.prototype.createBindingExpression=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Je.toView,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Ri;return new yi(this.observerLocator,e,this.parser.parse(t),n,i)},e.prototype.propertyObserver=function(e,t){var n=this;return{subscribe:function(i){var r=n.observerLocator.getObserver(e,t);return r.subscribe(i),{dispose:function(){return r.unsubscribe(i)}}}}},e.prototype.collectionObserver=function(e){var t=this;return{subscribe:function(n){var i=void 0;if(e instanceof Array)i=t.observerLocator.getArrayObserver(e);else if(e instanceof Map)i=t.observerLocator.getMapObserver(e);else{if(!(e instanceof Set))throw new Error("collection must be an instance of Array, Map or Set.");i=t.observerLocator.getSetObserver(e)}return i.subscribe(n),{dispose:function(){return i.unsubscribe(n)}}}}},e.prototype.expressionObserver=function(e,t){var n={bindingContext:e,overrideContext:S(e)};return new le(n,this.parser.parse(t),this.observerLocator,Ri)},e.prototype.parseExpression=function(e){return this.parser.parse(e)},e.prototype.registerAdapter=function(e){this.observerLocator.addAdapter(e)},e}(),f.inject=[mi,et],g),ji=Set.prototype;function Bi(e,t){return Li.for(e,t)}var Li=function(e){function t(t,n){return k(this,e.call(this,t,n))}return C(t,e),t.for=function(e,n){return"__set_observer__"in n||Reflect.defineProperty(n,"__set_observer__",{value:t.create(e,n),enumerable:!1,configurable:!1}),n.__set_observer__},t.create=function(e,n){var i=new t(e,n),r=ji;return r.add===n.add&&r.delete===n.delete&&r.clear===n.clear||(r={add:n.add,delete:n.delete,clear:n.clear}),n.add=function(){var e=n.size,t=r.add.apply(n,arguments);return n.size===e||i.addChangeRecord({type:"add",object:n,value:Array.from(n).pop()}),t},n.delete=function(){var e=n.has(arguments[0]),t=r.delete.apply(n,arguments);return e&&i.addChangeRecord({type:"delete",object:n,value:arguments[0]}),t},n.clear=function(){var e=r.clear.apply(n,arguments);return i.addChangeRecord({type:"clear",object:n}),e},i},t}(me);function Pi(e,t,n){function i(e,t,n,i){var r=void 0===t;r&&(e=e.prototype,t="string"==typeof i?i:i.name);var s="_"+t,o={configurable:!0,enumerable:!1,writable:!0},a=i&&i.changeHandler||t+"Changed";if(n?"function"==typeof n.initializer&&(o.value=n.initializer()):n={},"enumerable"in n||(n.enumerable=!0),delete n.value,delete n.writable,delete n.initializer,Reflect.defineProperty(e,s,o),n.get=function(){return this[s]},n.set=function(e){var n=this[s];e!==n&&(this[s]=e,Reflect.defineProperty(this,s,{enumerable:!1}),this[a]&&this[a](e,n,t))},n.get.dependencies=[s],!r)return n;Reflect.defineProperty(e,t,n)}return void 0===t?function(t,n,r){return i(t,n,r,e)}:i(e,t,n)}var Fi={};function Ii(e,t){Fi.hasOwnProperty(t)||(Fi[t]=0),e.observeProperty(Fi,t)}function Di(e){Fi.hasOwnProperty(e)&&Fi[e]++}},function(e,t,n){"use strict";n.r(t),function(e){function i(e,t,n){if(t){if(t.innerError&&n)return t;const i="\n------------------------------------------------\n";e+=`${i}Inner Error:\n`,"string"==typeof t?e+=`Message: ${t}`:(t.message?e+=`Message: ${t.message}`:e+=`Unknown Inner Error Type. Displaying Inner Error as JSON:\n ${JSON.stringify(t,null,"  ")}`,t.stack&&(e+=`\nInner Error Stack:\n${t.stack}`,e+="\nEnd Inner Error Stack")),e+=i}let i=new Error(e);return t&&(i.innerError=t),i}n.d(t,"AggregateError",function(){return i}),n.d(t,"FEATURE",function(){return r}),n.d(t,"PLATFORM",function(){return s}),n.d(t,"DOM",function(){return o}),n.d(t,"isInitialized",function(){return a}),n.d(t,"initializePAL",function(){return l}),n.d(t,"reset",function(){return u});const r={},s={noop(){},eachModule(){},moduleName:e=>e};s.global="undefined"!=typeof self?self:void 0!==e?e:new Function("return this")();const o={};let a=!1;function l(e){a||(a=!0,"function"!=typeof Object.getPropertyDescriptor&&(Object.getPropertyDescriptor=function(e,t){let n=Object.getOwnPropertyDescriptor(e,t),i=Object.getPrototypeOf(e);for(;void 0===n&&null!==i;)n=Object.getOwnPropertyDescriptor(i,t),i=Object.getPrototypeOf(i);return n}),e(s,r,o))}function u(){a=!1}}.call(this,n(8))},function(e,t,n){"use strict";n.r(t),n.d(t,"logLevel",function(){return i}),n.d(t,"getLogger",function(){return p}),n.d(t,"addAppender",function(){return f}),n.d(t,"removeAppender",function(){return g}),n.d(t,"getAppenders",function(){return v}),n.d(t,"clearAppenders",function(){return m}),n.d(t,"addCustomLevel",function(){return b}),n.d(t,"removeCustomLevel",function(){return y}),n.d(t,"setLevel",function(){return w}),n.d(t,"getLevel",function(){return x}),n.d(t,"Logger",function(){return k});const i={none:0,error:10,warn:20,info:30,debug:40};let r={},s=[],o=i.none;const a=["none","error","warn","info","debug"];function l(e){return a.filter(t=>t===e).length>0}function u(){return[this,...arguments]}function c(e){const t=i[e];return function(){if(this.level<t)return;const n=u.apply(this,arguments);let i=s.length;for(;i--;)s[i][e](...n)}}function h(e){const t=i[e];return function(){if(this.level<t)return;const n=u.apply(this,arguments);let i=s.length;for(;i--;){const t=s[i];void 0!==t[e]&&t[e](...n)}}}function d(){let e=k.prototype;for(let t in i)l(t)?"none"!==t&&(e[t]=c(t)):e[t]=h(t)}function p(e){return r[e]||new k(e)}function f(e){1===s.push(e)&&d()}function g(e){s=s.filter(t=>t!==e)}function v(){return[...s]}function m(){s=[],function(){let e=k.prototype;for(let t in i)"none"!==t&&(e[t]=function(){})}()}function b(e,t){if(void 0!==i[e])throw Error(`Log level "${e}" already exists.`);if(isNaN(t))throw Error("Value must be a number.");i[e]=t,s.length>0?d():k.prototype[e]=function(){}}function y(e){if(void 0!==i[e]){if(l(e))throw Error(`Built-in log level "${e}" cannot be removed.`);delete i[e],delete k.prototype[e]}}function w(e){o=e;for(let t in r)r[t].setLevel(e)}function x(){return o}let k=class{constructor(e){let t=r[e];if(t)return t;r[e]=this,this.id=e,this.level=o}debug(e,...t){}info(e,...t){}warn(e,...t){}error(e,...t){}setLevel(e){this.level=e}isDebugEnabled(){return this.level===i.debug}}},function(e,t,n){"use strict";n.r(t);var i=n(3),r=n(0),s=n(2);function o(e,t){let n=t&&t.split("/"),i=e.trim().split("/");if("."===i[0].charAt(0)&&n){let e=n.slice(0,n.length-1);i.unshift(...e)}return function(e){for(let t=0;t<e.length;++t){let n=e[t];if("."===n)e.splice(t,1),t-=1;else if(".."===n){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}}(i),i.join("/")}encodeURIComponent;let a=class{constructor(e,t){this.src=e,this.name=t}},l=class{constructor(e){this.templateIsLoaded=!1,this.factoryIsReady=!1,this.resources=null,this.dependencies=null,this.address=e,this.onReady=null,this._template=null,this._factory=null}get template(){return this._template}set template(e){let t,n,i,r,s=this.address;this._template=e,this.templateIsLoaded=!0,t=e.content.querySelectorAll("require"),r=this.dependencies=new Array(t.length);for(let e=0,l=t.length;e<l;++e){if(!(i=(n=t[e]).getAttribute("from")))throw new Error(`<require> element in ${s} has no "from" attribute.`);r[e]=new a(o(i,s),n.getAttribute("as")),n.parentNode&&n.parentNode.removeChild(n)}}get factory(){return this._factory}set factory(e){this._factory=e,this.factoryIsReady=!0}addDependency(e,t){let n="string"==typeof e?o(e,this.address):r.a.get(e).moduleId;this.dependencies.push(new a(n,t))}};var u,c,h,d,p,f,g,v,m,b,y,w,x,k,C,_,O,A,E,S,V=n(1),M=n(5),N=n(6);n.d(t,"animationEvent",function(){return R}),n.d(t,"Animator",function(){return T}),n.d(t,"CompositionTransactionNotifier",function(){return j}),n.d(t,"CompositionTransactionOwnershipToken",function(){return B}),n.d(t,"CompositionTransaction",function(){return L}),n.d(t,"_hyphenate",function(){return I}),n.d(t,"_isAllWhitespace",function(){return D}),n.d(t,"ViewEngineHooksResource",function(){return q}),n.d(t,"viewEngineHooks",function(){return $}),n.d(t,"ElementEvents",function(){return z}),n.d(t,"ResourceLoadContext",function(){return H}),n.d(t,"ViewCompileInstruction",function(){return Q}),n.d(t,"BehaviorInstruction",function(){return W}),n.d(t,"TargetInstruction",function(){return G}),n.d(t,"viewStrategy",function(){return X}),n.d(t,"RelativeViewStrategy",function(){return Y}),n.d(t,"ConventionalViewStrategy",function(){return J}),n.d(t,"NoViewStrategy",function(){return ee}),n.d(t,"TemplateRegistryViewStrategy",function(){return te}),n.d(t,"InlineViewStrategy",function(){return ne}),n.d(t,"StaticViewStrategy",function(){return ie}),n.d(t,"ViewLocator",function(){return re}),n.d(t,"BindingLanguage",function(){return oe}),n.d(t,"SlotCustomAttribute",function(){return le}),n.d(t,"PassThroughSlot",function(){return ue}),n.d(t,"ShadowSlot",function(){return ce}),n.d(t,"ShadowDOM",function(){return he}),n.d(t,"validateBehaviorName",function(){return pe}),n.d(t,"ViewResources",function(){return fe}),n.d(t,"View",function(){return ge}),n.d(t,"ViewSlot",function(){return ve}),n.d(t,"BoundViewFactory",function(){return Oe}),n.d(t,"ViewFactory",function(){return Ae}),n.d(t,"ViewCompiler",function(){return Ne}),n.d(t,"ResourceModule",function(){return Re}),n.d(t,"ResourceDescription",function(){return Te}),n.d(t,"ModuleAnalyzer",function(){return je}),n.d(t,"ViewEngine",function(){return Pe}),n.d(t,"Controller",function(){return Fe}),n.d(t,"BehaviorPropertyObserver",function(){return Ie}),n.d(t,"BindableProperty",function(){return qe}),n.d(t,"HtmlBehaviorResource",function(){return He}),n.d(t,"children",function(){return We}),n.d(t,"child",function(){return Ke}),n.d(t,"SwapStrategies",function(){return tt}),n.d(t,"CompositionEngine",function(){return it}),n.d(t,"ElementConfigResource",function(){return rt}),n.d(t,"resource",function(){return st}),n.d(t,"behavior",function(){return ot}),n.d(t,"customElement",function(){return at}),n.d(t,"customAttribute",function(){return lt}),n.d(t,"templateController",function(){return ut}),n.d(t,"bindable",function(){return ct}),n.d(t,"dynamicOptions",function(){return ht}),n.d(t,"useShadowDOM",function(){return pt}),n.d(t,"processAttributes",function(){return ft}),n.d(t,"processContent",function(){return vt}),n.d(t,"containerless",function(){return mt}),n.d(t,"useViewStrategy",function(){return bt}),n.d(t,"useView",function(){return yt}),n.d(t,"inlineView",function(){return wt}),n.d(t,"noView",function(){return xt}),n.d(t,"view",function(){return kt}),n.d(t,"elementConfig",function(){return Ct}),n.d(t,"viewResources",function(){return _t}),n.d(t,"TemplatingEngine",function(){return Ot});const R={enterBegin:"animation:enter:begin",enterActive:"animation:enter:active",enterDone:"animation:enter:done",enterTimeout:"animation:enter:timeout",leaveBegin:"animation:leave:begin",leaveActive:"animation:leave:active",leaveDone:"animation:leave:done",leaveTimeout:"animation:leave:timeout",staggerNext:"animation:stagger:next",removeClassBegin:"animation:remove-class:begin",removeClassActive:"animation:remove-class:active",removeClassDone:"animation:remove-class:done",removeClassTimeout:"animation:remove-class:timeout",addClassBegin:"animation:add-class:begin",addClassActive:"animation:add-class:active",addClassDone:"animation:add-class:done",addClassTimeout:"animation:add-class:timeout",animateBegin:"animation:animate:begin",animateActive:"animation:animate:active",animateDone:"animation:animate:done",animateTimeout:"animation:animate:timeout",sequenceBegin:"animation:sequence:begin",sequenceDone:"animation:sequence:done"};let T=class{enter(e){return Promise.resolve(!1)}leave(e){return Promise.resolve(!1)}removeClass(e,t){return e.classList.remove(t),Promise.resolve(!1)}addClass(e,t){return e.classList.add(t),Promise.resolve(!1)}animate(e,t){return Promise.resolve(!1)}runSequence(e){}registerEffect(e,t){}unregisterEffect(e){}},j=class{constructor(e){this.owner=e,this.owner._compositionCount++}done(){this.owner._compositionCount--,this.owner._tryCompleteTransaction()}},B=class{constructor(e){this.owner=e,this.owner._ownershipToken=this,this.thenable=this._createThenable()}waitForCompositionComplete(){return this.owner._tryCompleteTransaction(),this.thenable}resolve(){this._resolveCallback()}_createThenable(){return new Promise((e,t)=>{this._resolveCallback=e})}},L=class{constructor(){this._ownershipToken=null,this._compositionCount=0}tryCapture(){return null===this._ownershipToken?new B(this):null}enlist(){return new j(this)}_tryCompleteTransaction(){if(this._compositionCount<=0&&(this._compositionCount=0,null!==this._ownershipToken)){let e=this._ownershipToken;this._ownershipToken=null,e.resolve()}}};const P=/([A-Z])/g;function F(e){return"-"+e.toLowerCase()}function I(e){return(e.charAt(0).toLowerCase()+e.slice(1)).replace(P,F)}function D(e){return!(e.auInterpolationTarget||/[^\t\n\r ]/.test(e.textContent))}let q=class e{constructor(){}initialize(e,t){this.instance=e.get(t)}register(e,t){e.registerViewEngineHooks(this.instance)}load(e,t){}static convention(t){if(t.endsWith("ViewEngineHooks"))return new e}};function $(e){let t=function(e){r.b.define(r.b.resource,new q,e)};return e?t(e):t}let z=class{constructor(e){this.element=e,this.subscriptions={}}_enqueueHandler(e){this.subscriptions[e.eventName]=this.subscriptions[e.eventName]||[],this.subscriptions[e.eventName].push(e)}_dequeueHandler(e){let t,n=this.subscriptions[e.eventName];return n&&(t=n.indexOf(e))>-1&&n.splice(t,1),e}publish(e,t={},n=!0,i=!0){let r=s.DOM.createCustomEvent(e,{cancelable:i,bubbles:n,detail:t});this.element.dispatchEvent(r)}subscribe(e,t,n=!0){if("function"==typeof t){return new U(this,e,t,n,!1)}}subscribeOnce(e,t,n=!0){if("function"==typeof t){return new U(this,e,t,n,!0)}}dispose(e){if(e&&"string"==typeof e){let t=this.subscriptions[e];if(t)for(;t.length;){let e=t.pop();e&&e.dispose()}}else this.disposeAll()}disposeAll(){for(let e in this.subscriptions)this.dispose(e)}},U=class{constructor(e,t,n,i,r){this.owner=e,this.eventName=t,this.handler=n,this.capture="boolean"==typeof i?i:i.capture,this.bubbles=!this.capture,this.captureOrOptions=i,this.once=r,e.element.addEventListener(t,this,i),e._enqueueHandler(this)}handleEvent(e){(0,this.handler)(e),this.once&&this.dispose()}dispose(){this.owner.element.removeEventListener(this.eventName,this,this.captureOrOptions),this.owner._dequeueHandler(this),this.owner=this.handler=null}},H=class{constructor(){this.dependencies={}}addDependency(e){this.dependencies[e]=!0}hasDependency(e){return e in this.dependencies}},Q=class{constructor(e=!1,t=!1){this.targetShadowDOM=e,this.compileSurrogate=t,this.associatedModuleId=null}};Q.normal=new Q;let W=class e{static enhance(){let t=new e;return t.enhance=!0,t}static unitTest(t,n){let i=new e;return i.type=t,i.attributes=n||{},i}static element(t,n){let i=new e;return i.type=n,i.attributes={},i.anchorIsContainer=!(t.hasAttribute("containerless")||n.containerless),i.initiatedByBehavior=!0,i}static attribute(t,n){let i=new e;return i.attrName=t,i.type=n||null,i.attributes={},i}static dynamic(t,n,i){let r=new e;return r.host=t,r.viewModel=n,r.viewFactory=i,r.inheritBindingContext=!0,r}};const K=W.prototype;K.initiatedByBehavior=!1,K.enhance=!1,K.partReplacements=null,K.viewFactory=null,K.originalAttrName=null,K.skipContentProcessing=!1,K.contentFactory=null,K.viewModel=null,K.anchorIsContainer=!1,K.host=null,K.attributes=null,K.type=null,K.attrName=null,K.inheritBindingContext=!1,W.normal=new W;let G=(c=u=class e{static shadowSlot(t){let n=new e;return n.parentInjectorId=t,n.shadowSlot=!0,n}static contentExpression(t){let n=new e;return n.contentExpression=t,n}static letElement(t){let n=new e;return n.expressions=t,n.letElement=!0,n}static lifting(t,n){let i=new e;return i.parentInjectorId=t,i.expressions=e.noExpressions,i.behaviorInstructions=[n],i.viewFactory=n.viewFactory,i.providers=[n.type.target],i.lifting=!0,i}static normal(t,n,i,r,s,o){let a=new e;return a.injectorId=t,a.parentInjectorId=n,a.providers=i,a.behaviorInstructions=r,a.expressions=s,a.anchorIsContainer=!o||o.anchorIsContainer,a.elementInstruction=o,a}static surrogate(t,n,i,r){let s=new e;return s.expressions=i,s.behaviorInstructions=n,s.providers=t,s.values=r,s}},u.noExpressions=Object.freeze([]),c);const Z=G.prototype;Z.injectorId=null,Z.parentInjectorId=null,Z.shadowSlot=!1,Z.slotName=null,Z.slotFallbackFactory=null,Z.contentExpression=null,Z.letElement=!1,Z.expressions=null,Z.expressions=null,Z.providers=null,Z.viewFactory=null,Z.anchorIsContainer=!1,Z.elementInstruction=null,Z.lifting=!1,Z.values=null;const X=r.c.create("aurelia:view-strategy",{validate:e=>"function"==typeof e.loadViewFactory||"View strategies must implement: loadViewFactory(viewEngine: ViewEngine, compileInstruction: ViewCompileInstruction, loadContext?: ResourceLoadContext): Promise<ViewFactory>",compose(e){"function"!=typeof e.makeRelativeTo&&(e.makeRelativeTo=s.PLATFORM.noop)}});let Y=X()(h=class{constructor(e){this.path=e,this.absolutePath=null}loadViewFactory(e,t,n,i){return null===this.absolutePath&&this.moduleId&&(this.absolutePath=o(this.path,this.moduleId)),t.associatedModuleId=this.moduleId,e.loadViewFactory(this.absolutePath||this.path,t,n,i)}makeRelativeTo(e){null===this.absolutePath&&(this.absolutePath=o(this.path,e))}})||h,J=X()(d=class{constructor(e,t){this.moduleId=t.moduleId,this.viewUrl=e.convertOriginToViewUrl(t)}loadViewFactory(e,t,n,i){return t.associatedModuleId=this.moduleId,e.loadViewFactory(this.viewUrl,t,n,i)}})||d,ee=X()(p=class{constructor(e,t){this.dependencies=e||null,this.dependencyBaseUrl=t||""}loadViewFactory(e,t,n,i){let r=this.entry,s=this.dependencies;if(r&&r.factoryIsReady)return Promise.resolve(null);if(this.entry=r=new l(this.moduleId||this.dependencyBaseUrl),r.dependencies=[],r.templateIsLoaded=!0,null!==s)for(let e=0,t=s.length;e<t;++e){let t=s[e];"string"==typeof t||"function"==typeof t?r.addDependency(t):r.addDependency(t.from,t.as)}return t.associatedModuleId=this.moduleId,e.loadViewFactory(r,t,n,i)}})||p,te=X()(f=class{constructor(e,t){this.moduleId=e,this.entry=t}loadViewFactory(e,t,n,i){let r=this.entry;return r.factoryIsReady?Promise.resolve(r.factory):(t.associatedModuleId=this.moduleId,e.loadViewFactory(r,t,n,i))}})||f,ne=X()(g=class{constructor(e,t,n){this.markup=e,this.dependencies=t||null,this.dependencyBaseUrl=n||""}loadViewFactory(e,t,n,i){let r=this.entry,o=this.dependencies;if(r&&r.factoryIsReady)return Promise.resolve(r.factory);if(this.entry=r=new l(this.moduleId||this.dependencyBaseUrl),r.template=s.DOM.createTemplateFromMarkup(this.markup),null!==o)for(let e=0,t=o.length;e<t;++e){let t=o[e];"string"==typeof t||"function"==typeof t?r.addDependency(t):r.addDependency(t.from,t.as)}return t.associatedModuleId=this.moduleId,e.loadViewFactory(r,t,n,i)}})||g,ie=X()(v=class{constructor(e){("string"==typeof e||e instanceof s.DOM.Element&&"TEMPLATE"===e.tagName)&&(e={template:e}),this.template=e.template,this.dependencies=e.dependencies||[],this.factoryIsReady=!1,this.onReady=null,this.moduleId="undefined"}loadViewFactory(e,t,n,i){if(this.factoryIsReady)return Promise.resolve(this.factory);let r=this.dependencies;return r=(r="function"==typeof r?r():r)||[],r=Array.isArray(r)?r:[r],Promise.all(r).then(n=>{const r=e.container,s=e.appResources,o=e.viewCompiler,a=new fe(s);let l,u=[];i&&a.autoRegister(r,i);for(let e of n)if("function"==typeof e)null!==(l=a.autoRegister(r,e)).elementName&&u.push(l);else{if(!e||"object"!=typeof e)throw new Error(`dependency neither function nor object. Received: "${typeof e}"`);for(let t in e){let n=e[t];"function"==typeof n&&null!==(l=a.autoRegister(r,n)).elementName&&u.push(l)}}return Promise.all(u.map(e=>e.load(r,e.target))).then(()=>{const e=null!==this.template?o.compile(this.template,a,t):null;return this.factoryIsReady=!0,this.factory=e,e})})}})||v,re=(b=m=class e{getViewStrategy(t){if(!t)return null;if("object"==typeof t&&"getViewStrategy"in t){let e=r.a.get(t.constructor);return"string"==typeof(t=t.getViewStrategy())&&(t=new Y(t)),X.assert(t),e.moduleId&&t.makeRelativeTo(e.moduleId),t}if("string"==typeof t&&(t=new Y(t)),X.validate(t))return t;if("function"!=typeof t&&(t=t.constructor),"$view"in t){let n,i=t.$view;return n=null===(i="function"==typeof i?i.call(t):i)?new ee:i instanceof ie?i:new ie(i),r.b.define(e.viewStrategyMetadataKey,n,t),n}let n=r.a.get(t),i=r.b.get(e.viewStrategyMetadataKey,t);if(i)n.moduleId&&(i.moduleId=n.moduleId);else{if(!n.moduleId)throw new Error("Cannot determine default view strategy for object.",t);i=this.createFallbackViewStrategy(n)}return i}createFallbackViewStrategy(e){return new J(this,e)}convertOriginToViewUrl(e){let t=e.moduleId;return(t.endsWith(".js")||t.endsWith(".ts")?t.substring(0,t.length-3):t)+".html"}},m.viewStrategyMetadataKey="aurelia:view-strategy",b);function se(e){throw new Error(`BindingLanguage must implement ${e}().`)}let oe=class{inspectAttribute(e,t,n,i){se("inspectAttribute")}createAttributeInstruction(e,t,n,i){se("createAttributeInstruction")}createLetExpressions(e,t){se("createLetExpressions")}inspectTextContent(e,t){se("inspectTextContent")}},ae=Object.freeze([]),le=class{static inject(){return[s.DOM.Element]}constructor(e){this.element=e,this.element.auSlotAttribute=this}valueChanged(e,t){}},ue=class e{constructor(e,t,n,i){this.anchor=e,this.anchor.viewSlot=this,this.name=t,this.destinationName=n,this.fallbackFactory=i,this.destinationSlot=null,this.projections=0,this.contentView=null,new le(this.anchor).value=this.destinationName}get needsFallbackRendering(){return this.fallbackFactory&&0===this.projections}renderFallbackContent(e,t,n,i){if(null===this.contentView){this.contentView=this.fallbackFactory.create(this.ownerView.container),this.contentView.bind(this.ownerView.bindingContext,this.ownerView.overrideContext);let e=Object.create(null);e[this.destinationSlot.name]=this.destinationSlot,he.distributeView(this.contentView,e,n,i,this.destinationSlot.name)}}passThroughTo(e){this.destinationSlot=e}addNode(t,n,i,r){null!==this.contentView&&(this.contentView.removeNodes(),this.contentView.detached(),this.contentView.unbind(),this.contentView=null),n.viewSlot instanceof e?n.viewSlot.passThroughTo(this):(this.projections++,this.destinationSlot.addNode(t,n,i,r))}removeView(e,t){this.projections--,this.destinationSlot.removeView(e,t),this.needsFallbackRendering&&this.renderFallbackContent(null,ae,t)}removeAll(e){this.projections=0,this.destinationSlot.removeAll(e),this.needsFallbackRendering&&this.renderFallbackContent(null,ae,e)}projectFrom(e,t){this.destinationSlot.projectFrom(e,t)}created(e){this.ownerView=e}bind(e){this.contentView&&this.contentView.bind(e.bindingContext,e.overrideContext)}attached(){this.contentView&&this.contentView.attached()}detached(){this.contentView&&this.contentView.detached()}unbind(){this.contentView&&this.contentView.unbind()}},ce=class{constructor(e,t,n){this.anchor=e,this.anchor.isContentProjectionSource=!0,this.anchor.viewSlot=this,this.name=t,this.fallbackFactory=n,this.contentView=null,this.projections=0,this.children=[],this.projectFromAnchors=null,this.destinationSlots=null}get needsFallbackRendering(){return this.fallbackFactory&&0===this.projections}addNode(e,t,n,i,r){if(null!==this.contentView&&(this.contentView.removeNodes(),this.contentView.detached(),this.contentView.unbind(),this.contentView=null),t.viewSlot instanceof ue)t.viewSlot.passThroughTo(this);else if(null!==this.destinationSlots)he.distributeNodes(e,[t],this.destinationSlots,this,i);else{t.auOwnerView=e,t.auProjectionSource=n,t.auAssignedSlot=this;let r=this._findAnchor(e,t,n,i);r.parentNode.insertBefore(t,r),this.children.push(t),this.projections++}}removeView(e,t){if(null!==this.destinationSlots)he.undistributeView(e,this.destinationSlots,this);else if(this.contentView&&this.contentView.hasSlots)he.undistributeView(e,this.contentView.slots,t);else{let n=this.children.find(e=>e.auSlotProjectFrom===t);if(n){let i=n.auProjectionChildren;for(let t=0,n=i.length;t<n;++t){let r=i[t];r.auOwnerView===e&&(i.splice(t,1),e.fragment.appendChild(r),t--,n--,this.projections--)}this.needsFallbackRendering&&this.renderFallbackContent(e,ae,t)}}}removeAll(e){if(null!==this.destinationSlots)he.undistributeAll(this.destinationSlots,this);else if(this.contentView&&this.contentView.hasSlots)he.undistributeAll(this.contentView.slots,e);else{let t=this.children.find(t=>t.auSlotProjectFrom===e);if(t){let n=t.auProjectionChildren;for(let e=0,t=n.length;e<t;++e){let t=n[e];t.auOwnerView.fragment.appendChild(t),this.projections--}t.auProjectionChildren=[],this.needsFallbackRendering&&this.renderFallbackContent(null,ae,e)}}}_findAnchor(e,t,n,i){if(n){let r=this.children.find(e=>e.auSlotProjectFrom===n);if(r){if(void 0!==i){let n,s=r.auProjectionChildren,o=-1;for(let r=0,a=s.length;r<a;++r){let a=s[r];if(a.auOwnerView!==n&&(o++,n=a.auOwnerView,o>=i&&n!==e))return s.splice(r,0,t),a}}return r.auProjectionChildren.push(t),r}}return this.anchor}projectTo(e){this.destinationSlots=e}projectFrom(e,t){let n=s.DOM.createComment("anchor"),i=this.anchor.parentNode;n.auSlotProjectFrom=t,n.auOwnerView=e,n.auProjectionChildren=[],i.insertBefore(n,this.anchor),this.children.push(n),null===this.projectFromAnchors&&(this.projectFromAnchors=[]),this.projectFromAnchors.push(n)}renderFallbackContent(e,t,n,i){if(null===this.contentView&&(this.contentView=this.fallbackFactory.create(this.ownerView.container),this.contentView.bind(this.ownerView.bindingContext,this.ownerView.overrideContext),this.contentView.insertNodesBefore(this.anchor)),this.contentView.hasSlots){let r=this.contentView.slots,s=this.projectFromAnchors;if(null!==s)for(let e in r){let t=r[e];for(let e=0,n=s.length;e<n;++e){let n=s[e];t.projectFrom(n.auOwnerView,n.auSlotProjectFrom)}}this.fallbackSlots=r,he.distributeNodes(e,t,r,n,i)}}created(e){this.ownerView=e}bind(e){this.contentView&&this.contentView.bind(e.bindingContext,e.overrideContext)}attached(){this.contentView&&this.contentView.attached()}detached(){this.contentView&&this.contentView.detached()}unbind(){this.contentView&&this.contentView.unbind()}},he=(w=y=class e{static getSlotName(t){return void 0===t.auSlotAttribute?e.defaultSlotKey:t.auSlotAttribute.value}static distributeView(t,n,i,r,s){let o;if(null===t)o=ae;else{let e=t.fragment.childNodes,n=e.length;o=new Array(n);for(let t=0;t<n;++t)o[t]=e[t]}e.distributeNodes(t,o,n,i,r,s)}static undistributeView(e,t,n){for(let i in t)t[i].removeView(e,n)}static undistributeAll(e,t){for(let n in e)e[n].removeAll(t)}static distributeNodes(t,n,i,r,s,o){for(let a=0,l=n.length;a<l;++a){let u=n[a],c=u.nodeType;if(u.isContentProjectionSource){u.viewSlot.projectTo(i);for(let e in i)i[e].projectFrom(t,u.viewSlot);n.splice(a,1),l--,a--}else if(1===c||3===c||u.viewSlot instanceof ue)if(3===c&&D(u))n.splice(a,1),l--,a--;else{let c=i[o||e.getSlotName(u)];c&&(c.addNode(t,u,r,s),n.splice(a,1),l--,a--)}else n.splice(a,1),l--,a--}for(let e in i){let o=i[e];o.needsFallbackRendering&&o.renderFallbackContent(t,n,r,s)}}},y.defaultSlotKey="__au-default-slot-key__",w);function de(e,t,n,i){if(!t)return;let r=e[t];if(r){if(r!==n)throw new Error(`Attempted to register ${i} when one with the same name already exists. Name: ${t}.`)}else e[t]=n}function pe(e,t){if(/[A-Z]/.test(e)){let n=I(e);return i.getLogger("templating").warn(`'${e}' is not a valid ${t} name and has been converted to '${n}'. Upper-case letters are not allowed because the DOM is not case-sensitive.`),n}return e}let fe=class e{static convention(e,t){let n;if(t&&"__au_resource__"in t)return t;if("$resource"in e){let i=e.$resource;if("string"==typeof i)(n=t||new He).__au_resource__=!0,n.elementName||(n.elementName=pe(i,"custom element"));else{"function"==typeof i&&(i=i.call(e)),"string"==typeof i&&(i={name:i});let r=(i=Object.assign({},i)).type||"element",s=i.name;switch(r){case"element":case"attribute":(n=t||new He).__au_resource__=!0,"element"===r?n.elementName||(n.elementName=s?pe(s,"custom element"):I(e.name)):n.attributeName||(n.attributeName=s?pe(s,"custom attribute"):I(e.name)),"templateController"in i&&(i.liftsContent=i.templateController,delete i.templateController),"defaultBindingMode"in i&&void 0!==n.attributeDefaultBindingMode&&(i.attributeDefaultBindingMode=i.defaultBindingMode,delete i.defaultBindingMode),delete i.name,Object.assign(n,i);break;case"valueConverter":n=new V.ValueConverterResource(Object(V.camelCase)(s||e.name));break;case"bindingBehavior":n=new V.BindingBehaviorResource(Object(V.camelCase)(s||e.name));break;case"viewEngineHooks":n=new q}}if(n instanceof He){let t="string"==typeof i?void 0:i.bindables,r=n.properties;if(Array.isArray(t))for(let i=0,s=t.length;s>i;++i){let s=t[i];if(!s||"string"!=typeof s&&!s.name)throw new Error(`Invalid bindable property at "${i}" for class "${e.name}". Expected either a string or an object with "name" property.`);let o=new qe(s),a=!1;for(let e=0,t=r.length;t>e;++e)if(r[e].name===o.name){a=!0;break}a||o.registerWith(e,n)}}}return n}constructor(e,t){this.bindingLanguage=null,this.parent=e||null,this.hasParent=null!==this.parent,this.viewUrl=t||"",this.lookupFunctions={valueConverters:this.getValueConverter.bind(this),bindingBehaviors:this.getBindingBehavior.bind(this)},this.attributes=Object.create(null),this.elements=Object.create(null),this.valueConverters=Object.create(null),this.bindingBehaviors=Object.create(null),this.attributeMap=Object.create(null),this.values=Object.create(null),this.beforeCompile=this.afterCompile=this.beforeCreate=this.afterCreate=this.beforeBind=this.beforeUnbind=!1}_tryAddHook(e,t){if("function"==typeof e[t]){let n,i=e[t].bind(e),r=1;for(;void 0!==this[n=t+r.toString()];)r++;this[t]=!0,this[n]=i}}_invokeHook(e,t,n,i,r){if(this.hasParent&&this.parent._invokeHook(e,t,n,i,r),this[e]){this[e+"1"](t,n,i,r);let s=e+"2";if(this[s]&&(this[s](t,n,i,r),this[s=e+"3"])){this[s](t,n,i,r);let o=4;for(;void 0!==this[s=e+o.toString()];)this[s](t,n,i,r),o++}}}registerViewEngineHooks(e){this._tryAddHook(e,"beforeCompile"),this._tryAddHook(e,"afterCompile"),this._tryAddHook(e,"beforeCreate"),this._tryAddHook(e,"afterCreate"),this._tryAddHook(e,"beforeBind"),this._tryAddHook(e,"beforeUnbind")}getBindingLanguage(e){return this.bindingLanguage||(this.bindingLanguage=e)}patchInParent(e){let t=this.parent;this.parent=e||null,this.hasParent=null!==this.parent,null===e.parent&&(e.parent=t,e.hasParent=null!==t)}relativeToView(e){return o(e,this.viewUrl)}registerElement(e,t){de(this.elements,e,t,"an Element")}getElement(e){return this.elements[e]||(this.hasParent?this.parent.getElement(e):null)}mapAttribute(e){return this.attributeMap[e]||(this.hasParent?this.parent.mapAttribute(e):null)}registerAttribute(e,t,n){this.attributeMap[e]=n,de(this.attributes,e,t,"an Attribute")}getAttribute(e){return this.attributes[e]||(this.hasParent?this.parent.getAttribute(e):null)}registerValueConverter(e,t){de(this.valueConverters,e,t,"a ValueConverter")}getValueConverter(e){return this.valueConverters[e]||(this.hasParent?this.parent.getValueConverter(e):null)}registerBindingBehavior(e,t){de(this.bindingBehaviors,e,t,"a BindingBehavior")}getBindingBehavior(e){return this.bindingBehaviors[e]||(this.hasParent?this.parent.getBindingBehavior(e):null)}registerValue(e,t){de(this.values,e,t,"a value")}getValue(e){return this.values[e]||(this.hasParent?this.parent.getValue(e):null)}autoRegister(t,n){let i=r.b.getOwn(r.b.resource,n);return i?i instanceof He&&(e.convention(n,i),null===i.attributeName&&null===i.elementName&&He.convention(n.name,i),null===i.attributeName&&null===i.elementName&&(i.elementName=I(n.name))):((i=e.convention(n)||He.convention(n.name)||V.ValueConverterResource.convention(n.name)||V.BindingBehaviorResource.convention(n.name)||q.convention(n.name))||((i=new He).elementName=I(n.name)),r.b.define(r.b.resource,i,n)),i.initialize(t,n),i.register(this),i}},ge=class{constructor(e,t,n,i,r,s,o){this.container=e,this.viewFactory=t,this.resources=t.resources,this.fragment=n,this.firstChild=n.firstChild,this.lastChild=n.lastChild,this.controllers=i,this.bindings=r,this.children=s,this.slots=o,this.hasSlots=!1,this.fromCache=!1,this.isBound=!1,this.isAttached=!1,this.bindingContext=null,this.overrideContext=null,this.controller=null,this.viewModelScope=null,this.animatableElement=void 0,this._isUserControlled=!1,this.contentView=null;for(let e in o){this.hasSlots=!0;break}}returnToCache(){this.viewFactory.returnViewToCache(this)}created(){let e,t,n=this.controllers;for(e=0,t=n.length;e<t;++e)n[e].created(this)}bind(e,t,n){let i,r,s,o,a;if(!n||!this._isUserControlled){if(this.isBound){if(this.bindingContext===e)return;this.unbind()}for(this.isBound=!0,this.bindingContext=e,this.overrideContext=t||Object(V.createOverrideContext)(e),this.resources._invokeHook("beforeBind",this),o=0,a=(r=this.bindings).length;o<a;++o)r[o].bind(this);for(null!==this.viewModelScope&&(e.bind(this.viewModelScope.bindingContext,this.viewModelScope.overrideContext),this.viewModelScope=null),o=0,a=(i=this.controllers).length;o<a;++o)i[o].bind(this);for(o=0,a=(s=this.children).length;o<a;++o)s[o].bind(e,t,!0);this.hasSlots&&he.distributeView(this.contentView,this.slots)}}addBinding(e){this.bindings.push(e),this.isBound&&e.bind(this)}unbind(){let e,t,n,i,r;if(this.isBound){for(this.isBound=!1,this.resources._invokeHook("beforeUnbind",this),null!==this.controller&&this.controller.unbind(),i=0,r=(t=this.bindings).length;i<r;++i)t[i].unbind();for(i=0,r=(e=this.controllers).length;i<r;++i)e[i].unbind();for(i=0,r=(n=this.children).length;i<r;++i)n[i].unbind();this.bindingContext=null,this.overrideContext=null}}insertNodesBefore(e){e.parentNode.insertBefore(this.fragment,e)}appendNodesTo(e){e.appendChild(this.fragment)}removeNodes(){let e,t=this.fragment,n=this.firstChild,i=this.lastChild;for(;n&&(e=n.nextSibling,t.appendChild(n),n!==i);)n=e}attached(){let e,t,n,i;if(!this.isAttached){for(this.isAttached=!0,null!==this.controller&&this.controller.attached(),n=0,i=(e=this.controllers).length;n<i;++n)e[n].attached();for(n=0,i=(t=this.children).length;n<i;++n)t[n].attached()}}detached(){let e,t,n,i;if(this.isAttached){for(this.isAttached=!1,null!==this.controller&&this.controller.detached(),n=0,i=(e=this.controllers).length;n<i;++n)e[n].detached();for(n=0,i=(t=this.children).length;n<i;++n)t[n].detached()}}};let ve=class{constructor(e,t,n=T.instance){this.anchor=e,this.anchorIsContainer=t,this.bindingContext=null,this.overrideContext=null,this.animator=n,this.children=[],this.isBound=!1,this.isAttached=!1,this.contentSelectors=null,e.viewSlot=this,e.isContentProjectionSource=!1}animateView(e,t="enter"){let n=function(e){if(void 0!==e.animatableElement)return e.animatableElement;let t=e.firstChild;for(;t&&1!==t.nodeType;)t=t.nextSibling;return t&&1===t.nodeType?e.animatableElement=t.classList.contains("au-animate")?t:null:e.animatableElement=null}(e);if(null!==n)switch(t){case"enter":return this.animator.enter(n);case"leave":return this.animator.leave(n);default:throw new Error("Invalid animation direction: "+t)}}transformChildNodesIntoView(){let e=this.anchor;this.children.push({fragment:e,firstChild:e.firstChild,lastChild:e.lastChild,returnToCache(){},removeNodes(){let t;for(;t=e.lastChild;)e.removeChild(t)},created(){},bind(){},unbind(){},attached(){},detached(){}})}bind(e,t){let n,i,r;if(this.isBound){if(this.bindingContext===e)return;this.unbind()}for(this.isBound=!0,this.bindingContext=e=e||this.bindingContext,this.overrideContext=t=t||this.overrideContext,n=0,i=(r=this.children).length;n<i;++n)r[n].bind(e,t,!0)}unbind(){if(this.isBound){let e,t,n=this.children;for(this.isBound=!1,this.bindingContext=null,this.overrideContext=null,e=0,t=n.length;e<t;++e)n[e].unbind()}}add(e){if(this.anchorIsContainer?e.appendNodesTo(this.anchor):e.insertNodesBefore(this.anchor),this.children.push(e),this.isAttached)return e.attached(),this.animateView(e,"enter")}insert(e,t){let n=this.children,i=n.length;return 0===e&&0===i||e>=i?this.add(t):(t.insertNodesBefore(n[e].firstChild),n.splice(e,0,t),this.isAttached?(t.attached(),this.animateView(t,"enter")):void 0)}move(e,t){if(e===t)return;const n=this.children,i=n[e];i.removeNodes(),i.insertNodesBefore(n[t].firstChild),n.splice(e,1),n.splice(t,0,i)}remove(e,t,n){return this.removeAt(this.children.indexOf(e),t,n)}removeMany(e,t,n){const i=this.children;let r,s=e.length,o=[];e.forEach(e=>{if(n)return void e.removeNodes();let t=this.animateView(e,"leave");t?o.push(t.then(()=>e.removeNodes())):e.removeNodes()});let a=()=>{if(this.isAttached)for(r=0;r<s;++r)e[r].detached();if(t)for(r=0;r<s;++r)e[r].returnToCache();for(r=0;r<s;++r){const t=i.indexOf(e[r]);t>=0&&i.splice(t,1)}};return o.length>0?Promise.all(o).then(()=>a()):a()}removeAt(e,t,n){let i=this.children[e],r=()=>(e=this.children.indexOf(i),i.removeNodes(),this.children.splice(e,1),this.isAttached&&i.detached(),t&&i.returnToCache(),i);if(!n){let e=this.animateView(i,"leave");if(e)return e.then(()=>r())}return r()}removeAll(e,t){let n,i=this.children,r=i.length,s=[];i.forEach(e=>{if(t)return void e.removeNodes();let n=this.animateView(e,"leave");n?s.push(n.then(()=>e.removeNodes())):e.removeNodes()});let o=()=>{if(this.isAttached)for(n=0;n<r;++n)i[n].detached();if(e)for(n=0;n<r;++n){const e=i[n];e&&e.returnToCache()}this.children=[]};return s.length>0?Promise.all(s).then(()=>o()):o()}attached(){let e,t,n,i;if(!this.isAttached)for(this.isAttached=!0,e=0,t=(n=this.children).length;e<t;++e)(i=n[e]).attached(),this.animateView(i,"enter")}detached(){let e,t,n;if(this.isAttached)for(this.isAttached=!1,e=0,t=(n=this.children).length;e<t;++e)n[e].detached()}projectTo(e){this.projectToSlots=e,this.add=this._projectionAdd,this.insert=this._projectionInsert,this.move=this._projectionMove,this.remove=this._projectionRemove,this.removeAt=this._projectionRemoveAt,this.removeMany=this._projectionRemoveMany,this.removeAll=this._projectionRemoveAll,this.children.forEach(t=>he.distributeView(t,e,this))}_projectionAdd(e){he.distributeView(e,this.projectToSlots,this),this.children.push(e),this.isAttached&&e.attached()}_projectionInsert(e,t){0===e&&!this.children.length||e>=this.children.length?this.add(t):(he.distributeView(t,this.projectToSlots,this,e),this.children.splice(e,0,t),this.isAttached&&t.attached())}_projectionMove(e,t){if(e===t)return;const n=this.children,i=n[e];he.undistributeView(i,this.projectToSlots,this),he.distributeView(i,this.projectToSlots,this,t),n.splice(e,1),n.splice(t,0,i)}_projectionRemove(e,t){he.undistributeView(e,this.projectToSlots,this),this.children.splice(this.children.indexOf(e),1),this.isAttached&&e.detached(),t&&e.returnToCache()}_projectionRemoveAt(e,t){let n=this.children[e];he.undistributeView(n,this.projectToSlots,this),this.children.splice(e,1),this.isAttached&&n.detached(),t&&n.returnToCache()}_projectionRemoveMany(e,t){e.forEach(e=>this.remove(e,t))}_projectionRemoveAll(e){he.undistributeAll(this.projectToSlots,this);let t=this.children,n=t.length;for(let i=0;i<n;++i)e?t[i].returnToCache():this.isAttached&&t[i].detached();this.children=[]}},me=new(Object(M.resolver)(x=class{get(e,t){let n=t.__providerId__;return n in e?e[n]:e[n]=e.invoke(t)}})||x);function be(e){if(e===s.DOM.Element)return this.element;if(e===Oe){if(this.boundViewFactory)return this.boundViewFactory;let e=this.instruction.viewFactory,t=this.partReplacements;return t&&(e=t[e.part]||e),this.boundViewFactory=new Oe(this,e,t),this.boundViewFactory}return e===ve?(void 0===this.viewSlot&&(this.viewSlot=new ve(this.element,this.instruction.anchorIsContainer),this.element.isContentProjectionSource=this.instruction.lifting,this.children.push(this.viewSlot)),this.viewSlot):e===z?this.elementEvents||(this.elementEvents=new z(this.element)):e===L?this.compositionTransaction||(this.compositionTransaction=this.parent.get(e)):e===fe?this.viewResources:e===G?this.instruction:this.superGet(e)}function ye(e){return this._element.hasAttribute(e)}function we(e){return this._element.getAttribute(e)}function xe(e,t){this._element.setAttribute(e,t)}function ke(e,t,n,i,r,o,a,l,u){let c,h,d,p,f,g=n.behaviorInstructions,v=n.expressions;if(n.contentExpression)return r.push(n.contentExpression.createBinding(t.nextSibling)),t.nextSibling.auInterpolationTarget=!0,void t.parentNode.removeChild(t);if(n.shadowSlot){let e,r=s.DOM.createComment("slot");return e=n.slotDestination?new ue(r,n.slotName,n.slotDestination,n.slotFallbackFactory):new ce(r,n.slotName,n.slotFallbackFactory),s.DOM.replaceNode(r,t),a[n.slotName]=e,void i.push(e)}if(n.letElement){for(h=0,d=v.length;h<d;++h)r.push(v[h].createBinding());t.parentNode.removeChild(t)}else{if(g.length)for(n.anchorIsContainer||(t=function(e,t){let n=s.DOM.createComment("anchor");if(t){let t=e.firstChild;t&&"AU-CONTENT"===t.tagName&&(n.contentElement=t),n._element=e,n.hasAttribute=ye,n.getAttribute=we,n.setAttribute=xe}return s.DOM.replaceNode(n,e),n}(t,n.elementInstruction)),e[n.injectorId]=c=function(e,t,n,i,r,s){let o,a,l=e.createChild();for(l.element=t,l.instruction=n,l.children=i,l.viewResources=s,l.partReplacements=r,a=(o=n.providers).length;a--;)l._resolvers.set(o[a],me);return l.superGet=l.get,l.get=be,l}(e[n.parentInjectorId],t,n,o,l,u),h=0,d=g.length;h<d;++h)f=(p=g[h]).type.create(c,p,t,r),i.push(f);for(h=0,d=v.length;h<d;++h)r.push(v[h].createBinding(t))}}function Ce(e,t){let n,i,r,s,o,a=e.split(";");for(t=t||{},i=0;i<a.length;i++)n=(r=a[i]).indexOf(":"),s=r.substring(0,n).trim(),o=r.substring(n+1).trim(),t[s]=o;return t}function _e(e){let t="";for(let n in e)t+=n+":"+e[n]+";";return t}let Oe=class{constructor(e,t,n){this.parentContainer=e,this.viewFactory=t,this.factoryCreateInstruction={partReplacements:n}}create(){let e=this.viewFactory.create(this.parentContainer.createChild(),this.factoryCreateInstruction);return e._isUserControlled=!0,e}get isCaching(){return this.viewFactory.isCaching}setCacheSize(e,t){this.viewFactory.setCacheSize(e,t)}getCachedView(){return this.viewFactory.getCachedView()}returnViewToCache(e){this.viewFactory.returnViewToCache(e)}},Ae=class{constructor(e,t,n){this.isCaching=!1,this.template=e,this.instructions=t,this.resources=n,this.cacheSize=-1,this.cache=null}setCacheSize(e,t){e&&("*"===e?e=Number.MAX_VALUE:"string"==typeof e&&(e=parseInt(e,10))),-1!==this.cacheSize&&t||(this.cacheSize=e),this.cacheSize>0?this.cache=[]:this.cache=null,this.isCaching=this.cacheSize>0}getCachedView(){return null!==this.cache&&this.cache.pop()||null}returnViewToCache(e){e.isAttached&&e.detached(),e.isBound&&e.unbind(),null!==this.cache&&this.cache.length<this.cacheSize&&(e.fromCache=!0,this.cache.push(e))}create(e,t,n){t=t||W.normal;let i=this.getCachedView();if(null!==i)return i;let r,s,o,a,l,u=t.enhance?this.template:this.template.cloneNode(!0),c=u.querySelectorAll(".au-target"),h=this.instructions,d=this.resources,p=[],f=[],g=[],v=Object.create(null),m={root:e},b=t.partReplacements;for(this.resources._invokeHook("beforeCreate",this,e,u,t),n&&null!==this.surrogateInstruction&&function(e,t,n,i,r,s){let o,a,l,u,c,h=n.behaviorInstructions,d=n.expressions,p=n.providers,f=n.values;for(o=p.length;o--;)e._resolvers.set(p[o],me);for(let e in f)if(c=t.getAttribute(e)){if("class"===e)t.setAttribute("class",c+" "+f[e]);else if("style"===e){let n=Ce(f[e]);Ce(c,n),t.setAttribute("style",_e(n))}}else t.setAttribute(e,f[e]);if(h.length)for(o=0,a=h.length;o<a;++o)(u=(l=h[o]).type.create(e,l,t,r)).contentView&&s.push(u.contentView),i.push(u);for(o=0,a=d.length;o<a;++o)r.push(d[o].createBinding(t))}(e,n,this.surrogateInstruction,p,f,g),t.enhance&&u.hasAttribute("au-target-id")&&(l=h[(a=u).getAttribute("au-target-id")],ke(m,a,l,p,f,g,v,b,d)),r=0,s=c.length;r<s;++r)l=h[(a=c[r]).getAttribute("au-target-id")],ke(m,a,l,p,f,g,v,b,d);return o=new ge(e,this,u,p,f,g,v),t.initiatedByBehavior||o.created(),this.resources._invokeHook("afterCreate",o),o}},Ee=0;let Se=0;function Ve(e){let t=e.getAttribute("class"),n=(++Se).toString();return e.setAttribute("class",t?t+" au-target":"au-target"),e.setAttribute("au-target-id",n),n}const Me=oe.prototype.createLetExpressions;let Ne=Object(M.inject)(oe,fe)(k=class{constructor(e,t){this.bindingLanguage=e,this.resources=t}compile(e,t,n){let i,r,o;t=t||this.resources,n=n||Q.normal,(e="string"==typeof e?s.DOM.createTemplateFromMarkup(e):e).content?(r=e.getAttribute("part"),o=e.getAttribute("view-cache"),i=s.DOM.adoptNode(e.content)):i=e,n.targetShadowDOM=n.targetShadowDOM&&s.FEATURE.shadowDOM,t._invokeHook("beforeCompile",i,t,n);let a={};this._compileNode(i,t,a,e,"root",!n.targetShadowDOM);let l=i.firstChild;if(l&&1===l.nodeType){let e=l.getAttribute("au-target-id");if(e){let t=a[e];(t.shadowSlot||t.lifting||t.elementInstruction&&!t.elementInstruction.anchorIsContainer)&&i.insertBefore(s.DOM.createComment("view"),l)}}let u=new Ae(i,a,t);return u.surrogateInstruction=n.compileSurrogate?this._compileSurrogate(e,t):null,u.part=r,o&&u.setCacheSize(o),t._invokeHook("afterCompile",u),u}_compileNode(e,t,n,i,r,o){switch(e.nodeType){case 1:return this._compileElement(e,t,n,i,r,o);case 3:let a=t.getBindingLanguage(this.bindingLanguage).inspectTextContent(t,e.wholeText);if(a){let t=s.DOM.createElement("au-marker"),r=Ve(t);for((e.parentNode||i).insertBefore(t,e),e.textContent=" ",n[r]=G.contentExpression(a);e.nextSibling&&3===e.nextSibling.nodeType;)(e.parentNode||i).removeChild(e.nextSibling)}else for(;e.nextSibling&&3===e.nextSibling.nodeType;)e=e.nextSibling;return e.nextSibling;case 11:let l=e.firstChild;for(;l;)l=this._compileNode(l,t,n,e,r,o)}return e.nextSibling}_compileSurrogate(e,t){let n,i,r,s,o,a,l,u,c,h,d,p=e.tagName.toLowerCase(),f=e.attributes,g=t.getBindingLanguage(this.bindingLanguage),v=[],m=[],b={},y=!1,w=[];for(s=0,o=f.length;s<o;++s){if(l=(a=f[s]).name,u=a.value,c=g.inspectAttribute(t,p,l,u),(h=t.getAttribute(c.attrName))&&(n=t.mapAttribute(c.attrName))&&(i=h.attributes[n])&&(c.defaultBindingMode=i.defaultBindingMode,c.command||c.expression||(c.command=i.hasOptions?"options":null),c.command&&"options"!==c.command&&h.primaryProperty)){const e=h.primaryProperty;l=c.attrName=e.attribute,c.defaultBindingMode=e.defaultBindingMode}if(r=g.createAttributeInstruction(t,e,c,void 0,h))if(r.alteredAttr&&(h=t.getAttribute(r.attrName)),r.discrete)v.push(r);else if(h){if(r.type=h,this._configureProperties(r,t),h.liftsContent)throw new Error("You cannot place a template controller on a surrogate element.");m.push(r)}else v.push(r.attributes[r.attrName]);else if(h){if((r=W.attribute(l,h)).attributes[t.mapAttribute(l)]=u,h.liftsContent)throw new Error("You cannot place a template controller on a surrogate element.");m.push(r)}else"id"!==l&&"part"!==l&&"replace-part"!==l&&(y=!0,b[l]=u)}if(v.length||m.length||y){for(s=0,o=m.length;s<o;++s)(r=m[s]).type.compile(this,t,e,r),w.push(r.type.target);for(s=0,o=v.length;s<o;++s)void 0!==(d=v[s]).attrToRemove&&e.removeAttribute(d.attrToRemove);return G.surrogate(w,m,v,b)}return null}_compileElement(e,t,n,i,r,o){let a,l,u,c,h,d,p,f,g,v,m,b,y,w,x,k,C,_,O=e.tagName.toLowerCase(),A=e.attributes,E=[],S=[],V=[],M=t.getBindingLanguage(this.bindingLanguage);if("slot"===O)return o&&(e=function(e,t,n,i,r){let o=s.DOM.createElement("au-shadow-slot");s.DOM.replaceNode(o,n);let a=Ve(o),l=G.shadowSlot(r);if(l.slotName=n.getAttribute("name")||he.defaultSlotKey,l.slotDestination=n.getAttribute("slot"),n.innerHTML.trim()){let i,r=s.DOM.createDocumentFragment();for(;i=n.firstChild;)r.appendChild(i);l.slotFallbackFactory=e.compile(r,t)}return i[a]=l,o}(this,t,e,n,r)),e.nextSibling;if("template"===O){if(!("content"in e))throw new Error("You cannot place a template element within "+e.namespaceURI+" namespace");(u=this.compile(e,t)).part=e.getAttribute("part")}else{if(c=t.getElement(e.getAttribute("as-element")||O),"let"===O&&!c&&M.createLetExpressions!==Me)return E=M.createLetExpressions(t,e),n[C=Ve(e)]=G.letElement(E),e.nextSibling;c&&(h=W.element(e,c),c.processAttributes(this,t,e,A,h),S.push(h))}for(p=0,f=A.length;p<f;++p){if(b=v=(g=A[p]).name,m=g.value,w=M.inspectAttribute(t,O,v,m),o&&"slot"===w.attrName&&(w.attrName=v="au-slot"),d=null,c=t.getAttribute(w.attrName)){if((k=t.mapAttribute(w.attrName))&&(x=c.attributes[k])&&(w.defaultBindingMode=x.defaultBindingMode,w.command||w.expression||(w.command=x.hasOptions?"options":null),w.command&&"options"!==w.command&&c.primaryProperty)){const e=c.primaryProperty;v=w.attrName=e.attribute,w.defaultBindingMode=e.defaultBindingMode}}else h&&(d=h.type.attributes[w.attrName])&&(w.defaultBindingMode=d.defaultBindingMode);if(y=d?M.createAttributeInstruction(t,e,w,h):M.createAttributeInstruction(t,e,w,void 0,c))if(y.alteredAttr&&(c=t.getAttribute(y.attrName)),y.discrete)E.push(y);else if(c){if(y.type=c,this._configureProperties(y,t),c.liftsContent){y.originalAttrName=b,l=y;break}S.push(y)}else d?h.attributes[w.attrName].targetProperty=d.name:E.push(y.attributes[y.attrName]);else if(c){if((y=W.attribute(v,c)).attributes[t.mapAttribute(v)]=m,c.liftsContent){y.originalAttrName=b,l=y;break}S.push(y)}else d&&(h.attributes[v]=m)}if(l)l.viewFactory=u,n[C=Ve(e=l.type.compile(this,t,e,l,i))]=G.lifting(r,l);else{let s=!1;if(E.length||S.length){for(_=!!S.length&&++Ee,p=0,f=S.length;p<f;++p)(y=S[p]).type.compile(this,t,e,y,i),V.push(y.type.target),s=s||y.skipContentProcessing;for(p=0,f=E.length;p<f;++p)void 0!==(a=E[p]).attrToRemove&&e.removeAttribute(a.attrToRemove);n[C=Ve(e)]=G.normal(_,r,V,S,E,h)}if(s)return e.nextSibling;let l=e.firstChild;for(;l;)l=this._compileNode(l,t,n,e,_||r,o)}return e.nextSibling}_configureProperties(e,t){let n,i,r,s=e.type,o=e.attrName,a=e.attributes,l=t.mapAttribute(o);for(i in l&&o in a&&l!==o&&(a[l]=a[o],delete a[o]),a)null!==(r=a[i])&&"object"==typeof r&&(n=s.attributes[i],r.targetProperty=void 0!==n?n.name:i)}})||k,Re=class{constructor(e){this.id=e,this.moduleInstance=null,this.mainResource=null,this.resources=null,this.viewStrategy=null,this.isInitialized=!1,this.onLoaded=null,this.loadContext=null}initialize(e){let t=this.mainResource,n=this.resources,i=this.viewStrategy;if(!this.isInitialized){this.isInitialized=!0,void 0!==t&&(t.metadata.viewStrategy=i,t.initialize(e));for(let r=0,s=n.length;r<s;++r)(t=n[r]).metadata.viewStrategy=i,t.initialize(e)}}register(e,t){let n=this.mainResource,i=this.resources;void 0!==n&&(n.register(e,t),t=null);for(let n=0,r=i.length;n<r;++n)i[n].register(e,t),t=null}load(e,t){if(null!==this.onLoaded)return this.loadContext===t?Promise.resolve():this.onLoaded;let n,i=this.mainResource,r=this.resources;if(void 0!==i){(n=new Array(r.length+1))[0]=i.load(e,t);for(let i=0,s=r.length;i<s;++i)n[i+1]=r[i].load(e,t)}else{n=new Array(r.length);for(let i=0,s=r.length;i<s;++i)n[i]=r[i].load(e,t)}return this.loadContext=t,this.onLoaded=Promise.all(n),this.onLoaded}},Te=class{constructor(e,t,n){n||(n=r.b.get(r.b.resource,t))||((n=new He).elementName=I(e),r.b.define(r.b.resource,n,t)),n instanceof He?void 0===n.elementName?n.elementName=I(e):void 0===n.attributeName?n.attributeName=I(e):null===n.attributeName&&null===n.elementName&&He.convention(e,n):n.name||(n.name=I(e)),this.metadata=n,this.value=t}initialize(e){this.metadata.initialize(e,this.value)}register(e,t){this.metadata.register(e,t)}load(e,t){return this.metadata.load(e,this.value,t)}},je=class{constructor(){this.cache=Object.create(null)}getAnalysis(e){return this.cache[e]}analyze(e,t,n){let i,s,o,a,u,c,h,d,p,f=[];if(p=this.cache[e])return p;for(u in p=new Re(e),this.cache[e]=p,"function"==typeof t&&(t={default:t}),n&&(i=new Te(n,t[n])),t)c=t[u],u!==n&&"function"==typeof c&&((a=r.b.get(r.b.resource,c))?(a instanceof He&&(fe.convention(c,a),null===a.attributeName&&null===a.elementName&&He.convention(u,a),null===a.attributeName&&null===a.elementName&&(a.elementName=I(u))),!i&&a instanceof He&&null!==a.elementName?i=new Te(u,c,a):f.push(new Te(u,c,a))):X.decorates(c)?d=c:c instanceof l?d=new te(e,c):(h=fe.convention(c))?(null===h.elementName||i?f.push(new Te(u,c,h)):i=new Te(u,c,h),r.b.define(r.b.resource,h,c)):(h=He.convention(u))?(null===h.elementName||i?f.push(new Te(u,c,h)):i=new Te(u,c,h),r.b.define(r.b.resource,h,c)):(h=V.ValueConverterResource.convention(u)||V.BindingBehaviorResource.convention(u)||q.convention(u))?(f.push(new Te(u,c,h)),r.b.define(r.b.resource,h,c)):s||(s=c,o=u));return!i&&s&&(i=new Te(o,s)),p.moduleInstance=t,p.mainResource=i,p.resources=f,p.viewStrategy=d,p}},Be=i.getLogger("templating");let Le=null,Pe=Object(M.inject)(class{constructor(){this.templateRegistry={}}map(e,t){throw new Error("Loaders must implement map(id, source).")}normalizeSync(e,t){throw new Error("Loaders must implement normalizeSync(moduleId, relativeTo).")}normalize(e,t){throw new Error("Loaders must implement normalize(moduleId: string, relativeTo: string): Promise<string>.")}loadModule(e){throw new Error("Loaders must implement loadModule(id).")}loadAllModules(e){throw new Error("Loader must implement loadAllModules(ids).")}loadTemplate(e){throw new Error("Loader must implement loadTemplate(url).")}loadText(e){throw new Error("Loader must implement loadText(url).")}applyPluginToUrl(e,t){throw new Error("Loader must implement applyPluginToUrl(url, pluginName).")}addPlugin(e,t){throw new Error("Loader must implement addPlugin(pluginName, implementation).")}getOrCreateTemplateRegistryEntry(e){return this.templateRegistry[e]||(this.templateRegistry[e]=new l(e))}},M.Container,Ne,je,fe)((O=_=class e{constructor(e,t,n,i,s){this.loader=e,this.container=t,this.viewCompiler=n,this.moduleAnalyzer=i,this.appResources=s,this._pluginMap={},null===Le&&((Le=new He).attributeName="au-slot",r.b.define(r.b.resource,Le,le)),Le.initialize(t,le),Le.register(s)}addResourcePlugin(e,t){let n=e.replace(".","")+"-resource-plugin";this._pluginMap[e]=n,this.loader.addPlugin(n,t)}loadViewFactory(e,t,n,i){return n=n||new H,function(e,t){return t instanceof l?Promise.resolve(t):e.loadTemplate(t)}(this.loader,e).then(e=>{const r=e.address;return e.onReady?n.hasDependency(r)?null===e.template?e.onReady:Promise.resolve(new class{constructor(e){e.then(e=>this.viewFactory=e)}create(e,t,n,i){return this.viewFactory.create(e,t,n,i)}get isCaching(){return this.viewFactory.isCaching}setCacheSize(e,t){this.viewFactory.setCacheSize(e,t)}getCachedView(){return this.viewFactory.getCachedView()}returnViewToCache(e){this.viewFactory.returnViewToCache(e)}}(e.onReady)):(n.addDependency(r),e.onReady):(n.addDependency(r),e.onReady=this.loadTemplateResources(e,t,n,i).then(n=>{if(e.resources=n,null===e.template)return e.factory=null;let i=this.viewCompiler.compile(e.template,n,t);return e.factory=i}),e.onReady)})}loadTemplateResources(t,n,i,s){let a,l,u=new fe(this.appResources,t.address),c=t.dependencies;if(n=n||Q.normal,0===c.length&&!n.associatedModuleId)return Promise.resolve(u);if(a=c.map(e=>e.src),l=c.map(e=>e.name),Be.debug(`importing resources for ${t.address}`,a),s){let i=r.b.get(e.viewModelRequireMetadataKey,s);if(i){let e=a.length;for(let e=0,n=i.length;e<n;++e){let n=i[e],s="function"==typeof n?r.a.get(n).moduleId:o(n.src||n,t.address);-1===a.indexOf(s)&&(a.push(s),l.push(n.as))}Be.debug(`importing ViewModel resources for ${n.associatedModuleId}`,a.slice(e))}}return this.importViewResources(a,l,u,n,i)}importViewModelResource(e,t){return this.loader.loadModule(e).then(n=>{let i=r.a.get(n).moduleId,s=this.moduleAnalyzer.analyze(i,n,t);if(!s.mainResource)throw new Error(`No view model found in module "${e}".`);return s.initialize(this.container),s.mainResource})}importViewResources(e,t,n,i,s){return s=s||new H,i=i||Q.normal,e=e.map(e=>this._applyLoaderPlugin(e)),this.loader.loadAllModules(e).then(e=>{let o,a,l,u,c,h,d=this.container,p=this.moduleAnalyzer,f=new Array(e.length);for(o=0,a=e.length;o<a;++o)c=e[o],u=r.a.get(c).moduleId,(l=p.analyze(u,c)).initialize(d),l.register(n,t[o]),f[o]=l;for(i.associatedModuleId&&(h=p.getAnalysis(i.associatedModuleId))&&h.register(n),o=0,a=f.length;o<a;++o)f[o]=f[o].load(d,s);return Promise.all(f).then(()=>n)})}_applyLoaderPlugin(e){let t=e.lastIndexOf(".");if(-1!==t){let n=e.substring(t),i=this._pluginMap[n];return void 0===i?e:this.loader.applyPluginToUrl(e,i)}return e}},_.viewModelRequireMetadataKey="aurelia:view-model-require",C=O))||C,Fe=class{constructor(e,t,n,i){this.behavior=e,this.instruction=t,this.viewModel=n,this.isAttached=!1,this.view=null,this.isBound=!1,this.scope=null,this.container=i,this.elementEvents=i.elementEvents||null;let r,s,o=e.observerLocator.getOrCreateObserversLookup(n),a=e.handlesBind,l=t.attributes,u=this.boundProperties=[],c=e.properties;for(e._ensurePropertiesDefined(n,o),r=0,s=c.length;r<s;++r)c[r]._initialize(n,o,l,a,u)}created(e){this.behavior.handlesCreated&&this.viewModel.created(e,this.view)}automate(e,t){this.view.bindingContext=this.viewModel,this.view.overrideContext=e||Object(V.createOverrideContext)(this.viewModel),this.view._isUserControlled=!0,this.behavior.handlesCreated&&this.viewModel.created(t||null,this.view),this.bind(this.view)}bind(e){let t,n,i,r,s,o,a=this.behavior.handlesBind,l=this.boundProperties;if(this.isBound){if(this.scope===e)return;this.unbind()}for(this.isBound=!0,this.scope=e,t=0,n=l.length;t<n;++t)s=(r=(i=l[t]).observer).selfSubscriber,r.publishing=!1,a&&(r.selfSubscriber=null),i.binding.bind(e),r.call(),r.publishing=!0,r.selfSubscriber=s;null!==this.view?(a&&(this.view.viewModelScope=e),this.viewModel===e.overrideContext.bindingContext?o=e.overrideContext:this.instruction.inheritBindingContext?o=Object(V.createOverrideContext)(this.viewModel,e.overrideContext):(o=Object(V.createOverrideContext)(this.viewModel)).__parentOverrideContext=e.overrideContext,this.view.bind(this.viewModel,o)):a&&(o=e.overrideContext,void 0!==e.overrideContext.__parentOverrideContext&&this.viewModel.viewFactory&&this.viewModel.viewFactory.factoryCreateInstruction.partReplacements&&((o=Object.assign({},e.overrideContext)).parentOverrideContext=e.overrideContext.__parentOverrideContext),this.viewModel.bind(e.bindingContext,o))}unbind(){if(this.isBound){let e,t,n=this.boundProperties;for(this.isBound=!1,this.scope=null,null!==this.view&&this.view.unbind(),this.behavior.handlesUnbind&&this.viewModel.unbind(),null!==this.elementEvents&&this.elementEvents.disposeAll(),e=0,t=n.length;e<t;++e)n[e].binding.unbind()}}attached(){this.isAttached||(this.isAttached=!0,this.behavior.handlesAttached&&this.viewModel.attached(),null!==this.view&&this.view.attached())}detached(){this.isAttached&&(this.isAttached=!1,null!==this.view&&this.view.detached(),this.behavior.handlesDetached&&this.viewModel.detached())}},Ie=Object(V.subscriberCollection)()(A=class{constructor(e,t,n,i,r){this.taskQueue=e,this.obj=t,this.propertyName=n,this.notqueued=!0,this.publishing=!1,this.selfSubscriber=i,this.currentValue=this.oldValue=r}getValue(){return this.currentValue}setValue(e){let t=this.currentValue;Object.is(e,t)||(this.oldValue=t,this.currentValue=e,this.publishing&&this.notqueued&&(this.taskQueue.flushing?this.call():(this.notqueued=!1,this.taskQueue.queueMicroTask(this))))}call(){let e=this.oldValue,t=this.currentValue;this.notqueued=!0,Object.is(t,e)||(this.selfSubscriber&&this.selfSubscriber(t,e),this.callSubscribers(t,e),this.oldValue=t)}subscribe(e,t){this.addSubscriber(e,t)}unsubscribe(e,t){this.removeSubscriber(e,t)}})||A;function De(e,t){let n=e.__observers__;if(void 0===n){let t=Object.getPrototypeOf(e).constructor,i=r.b.get(r.b.resource,t);i.isInitialized||i.initialize(M.Container.instance||new M.Container,e.constructor),n=i.observerLocator.getOrCreateObserversLookup(e),i._ensurePropertiesDefined(e,n)}return n[t]}let qe=class{constructor(e){"string"==typeof e?this.name=e:Object.assign(this,e),this.attribute=this.attribute||I(this.name);let t=this.defaultBindingMode;null==t?this.defaultBindingMode=V.bindingMode.oneWay:"string"==typeof t&&(this.defaultBindingMode=V.bindingMode[t]||V.bindingMode.oneWay),this.changeHandler=this.changeHandler||null,this.owner=null,this.descriptor=null}registerWith(e,t,n){if(t.properties.push(this),t.attributes[this.attribute]=this,this.owner=t,n)return this.descriptor=n,this._configureDescriptor(n)}_configureDescriptor(e){let t=this.name;return e.configurable=!0,e.enumerable=!0,"initializer"in e&&(this.defaultValue=e.initializer,delete e.initializer,delete e.writable),"value"in e&&(this.defaultValue=e.value,delete e.value,delete e.writable),e.get=function(){return De(this,t).getValue()},e.set=function(e){De(this,t).setValue(e)},e.get.getObserver=function(e){return De(e,t)},e}defineOn(e,t){let n,i=this.name;null===this.changeHandler&&(n=i+"Changed")in e.prototype&&(this.changeHandler=n),null===this.descriptor&&Object.defineProperty(e.prototype,i,this._configureDescriptor(t,{}))}createObserver(e){let t,n=null,i=this.defaultValue,r=this.changeHandler,s=this.name;if(!this.hasOptions){if(r in e)n="propertyChanged"in e?(t,n)=>{e[r](t,n),e.propertyChanged(s,t,n)}:(t,n)=>e[r](t,n);else if("propertyChanged"in e)n=((t,n)=>e.propertyChanged(s,t,n));else if(null!==r)throw new Error(`Change handler ${r} was specified but not declared on the class.`);return void 0!==i&&(t="function"==typeof i?i.call(e):i),new Ie(this.owner.taskQueue,e,this.name,n,t)}}_initialize(e,t,n,i,r){let s,o,a,l=this.defaultValue;if(this.isDynamic)for(let s in n)this._createDynamicProperty(e,t,i,s,n[s],r);else this.hasOptions||(o=t[this.name],null!==n&&(s=o.selfSubscriber,a=n[this.attribute],i&&(o.selfSubscriber=null),"string"==typeof a?(e[this.name]=a,o.call()):a?r.push({observer:o,binding:a.createBinding(e)}):void 0!==l&&o.call(),o.selfSubscriber=s),o.publishing=!0)}_createDynamicProperty(e,t,n,i,r,s){let o,a,l=i+"Changed",u=null;l in e?u="propertyChanged"in e?(t,n)=>{e[l](t,n),e.propertyChanged(i,t,n)}:(t,n)=>e[l](t,n):"propertyChanged"in e&&(u=((t,n)=>e.propertyChanged(i,t,n))),o=t[i]=new Ie(this.owner.taskQueue,e,i,u),Object.defineProperty(e,i,{configurable:!0,enumerable:!0,get:o.getValue.bind(o),set:o.setValue.bind(o)}),n&&(o.selfSubscriber=null),"string"==typeof r?(e[i]=r,o.call()):r&&(a={observer:o,binding:r.createBinding(e)},s.push(a)),o.publishing=!0,o.selfSubscriber=u}},$e=0;function ze(){return!0}function Ue(){}let He=class e{constructor(){this.elementName=null,this.attributeName=null,this.attributeDefaultBindingMode=void 0,this.liftsContent=!1,this.targetShadowDOM=!1,this.shadowDOMOptions=null,this.processAttributes=Ue,this.processContent=ze,this.usesShadowDOM=!1,this.childBindings=null,this.hasDynamicOptions=!1,this.containerless=!1,this.properties=[],this.attributes={},this.isInitialized=!1,this.primaryProperty=null}static convention(t,n){let i;return t.endsWith("CustomAttribute")&&((i=n||new e).attributeName=I(t.substring(0,t.length-15))),t.endsWith("CustomElement")&&((i=n||new e).elementName=I(t.substring(0,t.length-13))),i}addChildBinding(e){null===this.childBindings&&(this.childBindings=[]),this.childBindings.push(e)}initialize(e,t){let n,i,r,o=t.prototype,a=this.properties,l=this.attributeName,u=this.attributeDefaultBindingMode;if(!this.isInitialized)if(this.isInitialized=!0,t.__providerId__=++$e,this.observerLocator=e.get(V.ObserverLocator),this.taskQueue=e.get(N.TaskQueue),this.target=t,this.usesShadowDOM=this.targetShadowDOM&&s.FEATURE.shadowDOM,this.handlesCreated="created"in o,this.handlesBind="bind"in o,this.handlesUnbind="unbind"in o,this.handlesAttached="attached"in o,this.handlesDetached="detached"in o,this.htmlName=this.elementName||this.attributeName,null!==l)if(0===a.length&&new qe({name:"value",changeHandler:"valueChanged"in o?"valueChanged":null,attribute:l,defaultBindingMode:u}).registerWith(t,this),r=a[0],1===a.length&&"value"===r.name)r.isDynamic=r.hasOptions=this.hasDynamicOptions,r.defineOn(t,this);else{for(n=0,i=a.length;n<i;++n)if(a[n].defineOn(t,this),a[n].primaryProperty){if(this.primaryProperty)throw new Error("Only one bindable property on a custom element can be defined as the default");this.primaryProperty=a[n]}(r=new qe({name:"value",changeHandler:"valueChanged"in o?"valueChanged":null,attribute:l,defaultBindingMode:u})).hasOptions=!0,r.registerWith(t,this)}else{for(n=0,i=a.length;n<i;++n)a[n].defineOn(t,this);this._copyInheritedProperties(e,t)}}register(e,t){null!==this.attributeName&&(e.registerAttribute(t||this.attributeName,this,this.attributeName),Array.isArray(this.aliases)&&this.aliases.forEach(t=>{e.registerAttribute(t,this,this.attributeName)})),null!==this.elementName&&e.registerElement(t||this.elementName,this)}load(e,t,n,i,s){let o;return null!==this.elementName?(i=e.get(re).getViewStrategy(i||this.viewStrategy||t),o=new Q(this.targetShadowDOM,!0),i.moduleId||(i.moduleId=r.a.get(t).moduleId),i.loadViewFactory(e.get(Pe),o,n,t).then(e=>(s&&this.viewFactory||(this.viewFactory=e),e))):Promise.resolve(this)}compile(e,t,n,i,r){if(this.liftsContent){if(!i.viewFactory){let o=s.DOM.createElement("template"),a=s.DOM.createDocumentFragment(),l=n.getAttribute("view-cache"),u=n.getAttribute("part");n.removeAttribute(i.originalAttrName),s.DOM.replaceNode(o,n,r),a.appendChild(n),i.viewFactory=e.compile(a,t),u&&(i.viewFactory.part=u,n.removeAttribute("part")),l&&(i.viewFactory.setCacheSize(l),n.removeAttribute("view-cache")),n=o}}else if(null!==this.elementName){let o={};if(this.processContent(e,t,n,i)&&n.hasChildNodes()){let a,l,u=n.firstChild,c=this.usesShadowDOM?null:s.DOM.createElement("au-content");for(;u;)a=u.nextSibling,"TEMPLATE"===u.tagName&&(l=u.getAttribute("replace-part"))?(o[l]=e.compile(u,t),s.DOM.removeNode(u,r),i.partReplacements=o):null!==c&&(3===u.nodeType&&D(u)?s.DOM.removeNode(u,r):c.appendChild(u)),u=a;null!==c&&c.hasChildNodes()&&n.appendChild(c),i.skipContentProcessing=!1}else i.skipContentProcessing=!0}else this.processContent(e,t,n,i)||(i.skipContentProcessing=!0);return n}create(e,t,n,i){let r,o=null;t=t||W.normal,n=n||null,i=i||null,null!==this.elementName&&n&&(this.usesShadowDOM?(r=n.attachShadow(this.shadowDOMOptions),e.registerInstance(s.DOM.boundary,r)):(r=n,this.targetShadowDOM&&e.registerInstance(s.DOM.boundary,r))),null!==n&&(n.au=o=n.au||{});let a,l=t.viewModel||e.get(this.target),u=new Fe(this,t,l,e),c=this.childBindings;if(this.liftsContent)o.controller=u;else if(null!==this.elementName){if(a=t.viewFactory||this.viewFactory,e.viewModel=l,a&&(u.view=a.create(e,t,n)),null!==n){if(o.controller=u,u.view){if(!this.usesShadowDOM&&(1===n.childNodes.length||n.contentElement)){let e=n.childNodes[0]||n.contentElement;u.view.contentView={fragment:e},e.parentNode&&s.DOM.removeNode(e)}if(t.anchorIsContainer){if(null!==c)for(let e=0,t=c.length;e<t;++e)u.view.addBinding(c[e].create(n,l,u));u.view.appendNodesTo(r)}else u.view.insertNodesBefore(r)}else if(null!==c)for(let e=0,t=c.length;e<t;++e)i.push(c[e].create(n,l,u))}else if(u.view){if(u.view.controller=u,null!==c)for(let e=0,n=c.length;e<n;++e)u.view.addBinding(c[e].create(t.host,l,u))}else if(null!==c)for(let e=0,n=c.length;e<n;++e)i.push(c[e].create(t.host,l,u))}else if(null!==c)for(let e=0,t=c.length;e<t;++e)i.push(c[e].create(n,l,u));return null!==o&&(o[this.htmlName]=u),t.initiatedByBehavior&&a&&u.view.created(),u}_ensurePropertiesDefined(e,t){let n,i,r,s;if(!("__propertiesDefined__"in t))for(t.__propertiesDefined__=!0,i=0,r=(n=this.properties).length;i<r;++i)void 0!==(s=n[i].createObserver(e))&&(t[s.propertyName]=s)}_copyInheritedProperties(e,t){let n,i=t;for(;;){let e=Object.getPrototypeOf(t.prototype);if(!(t=e&&e.constructor))return;if(n=r.b.getOwn(r.b.resource,t))break}n.initialize(e,t);for(let e=0,t=n.properties.length;e<t;++e){let t=n.properties[e];this.properties.some(e=>e.name===t.name)||new qe(t).registerWith(i,this)}}};function Qe(e,t){return function(n,i,s){let o="string"==typeof i?n.constructor:n,a=r.b.getOrCreateOwn(r.b.resource,He,o);"string"==typeof e&&(e={selector:e,name:i}),s&&(s.writable=!0,s.configurable=!0),e.all=t,a.addChildBinding(new Ge(e))}}function We(e){return Qe(e,!0)}function Ke(e){return Qe(e,!1)}let Ge=class{constructor(e){this.name=e.name,this.changeHandler=e.changeHandler||this.name+"Changed",this.selector=e.selector,this.all=e.all}create(e,t,n){return new Je(this.selector,e,this.name,t,n,this.changeHandler,this.all)}};const Ze=[];function Xe(e,t,n){let i=e.get(t);i||(i=[],e.set(t,i)),i.push(n)}function Ye(e,t){let n=t.binders,i=n.length,r=new Map;for(let t=0,s=e.length;t<s;++t){let s=e[t],o=s.addedNodes,a=s.removedNodes;for(let e=0,t=a.length;e<t;++e){let t=a[e];if(1===t.nodeType)for(let e=0;e<i;++e){let i=n[e];i.onRemove(t)&&Xe(r,i,s)}}for(let e=0,t=o.length;e<t;++e){let t=o[e];if(1===t.nodeType)for(let e=0;e<i;++e){let i=n[e];i.onAdd(t)&&Xe(r,i,s)}}}r.forEach((e,t)=>{null!==t.changeHandler&&t.viewModel[t.changeHandler](e)})}let Je=class{constructor(e,t,n,i,r,s,o){this.selector=e,this.viewHost=t,this.property=n,this.viewModel=i,this.controller=r,this.changeHandler=s in i?s:null,this.usesShadowDOM=r.behavior.usesShadowDOM,this.all=o,!this.usesShadowDOM&&r.view&&r.view.contentView?this.contentView=r.view.contentView:this.contentView=null}matches(e){if(e.matches(this.selector)){if(null===this.contentView)return!0;let t=this.contentView,n=e.auAssignedSlot;if(n&&n.projectFromAnchors){let e=n.projectFromAnchors;for(let n=0,i=e.length;n<i;++n)if(e[n].auOwnerView===t)return!0;return!1}return e.auOwnerView===t}return!1}bind(e){let t=this.viewHost,n=this.viewModel,i=t.__childObserver__;if(!i){i=t.__childObserver__=s.DOM.createMutationObserver(Ye);let e={childList:!0,subtree:!this.usesShadowDOM};i.observe(t,e),i.binders=[]}if(i.binders.push(this),this.usesShadowDOM){let e=t.firstElementChild;if(this.all){let t=n[this.property];for(t?t.splice(0):t=n[this.property]=[];e;)this.matches(e)&&t.push(e.au&&e.au.controller?e.au.controller.viewModel:e),e=e.nextElementSibling;null!==this.changeHandler&&this.viewModel[this.changeHandler](Ze)}else for(;e;){if(this.matches(e)){let t=e.au&&e.au.controller?e.au.controller.viewModel:e;this.viewModel[this.property]=t,null!==this.changeHandler&&this.viewModel[this.changeHandler](t);break}e=e.nextElementSibling}}}onRemove(e){if(this.matches(e)){let t=e.au&&e.au.controller?e.au.controller.viewModel:e;if(this.all){let e=this.viewModel[this.property]||(this.viewModel[this.property]=[]),n=e.indexOf(t);return-1!==n&&e.splice(n,1),!0}return!1}return!1}onAdd(e){if(this.matches(e)){let t=e.au&&e.au.controller?e.au.controller.viewModel:e;if(this.all){let n=this.viewModel[this.property]||(this.viewModel[this.property]=[]);if("*"===this.selector)return n.push(t),!0;let i=0,r=e.previousElementSibling;for(;r;)this.matches(r)&&i++,r=r.previousElementSibling;return n.splice(i,0,t),!0}this.viewModel[this.property]=t,null!==this.changeHandler&&this.viewModel[this.changeHandler](t)}return!1}unbind(){this.viewHost.__childObserver__&&(this.viewHost.__childObserver__.disconnect(),this.viewHost.__childObserver__=null,this.viewModel[this.property]=null)}};function et(e,t){return Array.isArray(t)?e.removeMany(t,!0):e.remove(t,!0)}const tt={before:(e,t,n)=>void 0===t?n():n().then(()=>et(e,t)),with:(e,t,n)=>void 0===t?n():Promise.all([et(e,t),n()]),after:(e,t,n)=>Promise.resolve(e.removeAll(!0)).then(n)};function nt(e){return e.skipActivation||"function"!=typeof e.viewModel.activate?Promise.resolve():e.viewModel.activate(e.model)||Promise.resolve()}let it=Object(M.inject)(Pe,re)(E=class{constructor(e,t){this.viewEngine=e,this.viewLocator=t}_swap(e,t){let n=tt[e.swapOrder]||tt.after,i=e.viewSlot.children.slice();return n(e.viewSlot,i,()=>Promise.resolve(e.viewSlot.add(t)).then(()=>{e.currentController&&e.currentController.unbind()})).then(()=>{e.compositionTransactionNotifier&&e.compositionTransactionNotifier.done()})}_createControllerAndSwap(e){return this.createController(e).then(t=>e.compositionTransactionOwnershipToken?e.compositionTransactionOwnershipToken.waitForCompositionComplete().then(()=>(t.automate(e.overrideContext,e.owningView),this._swap(e,t.view))).then(()=>t):(t.automate(e.overrideContext,e.owningView),this._swap(e,t.view).then(()=>t)))}createController(e){let t,n,i,r;return this.ensureViewModel(e).then(nt).then(()=>{t=e.childContainer,n=e.viewModel,i=e.viewModelResource,r=i.metadata;let s=this.viewLocator.getViewStrategy(e.view||n);return e.viewResources&&s.makeRelativeTo(e.viewResources.viewUrl),r.load(t,i.value,null,s,!0)}).then(i=>r.create(t,W.dynamic(e.host,n,i)))}ensureViewModel(e){let t=e.childContainer=e.childContainer||e.container.createChild();if("string"==typeof e.viewModel)return e.viewModel=e.viewResources?e.viewResources.relativeToView(e.viewModel):e.viewModel,this.viewEngine.importViewModelResource(e.viewModel).then(n=>(t.autoRegister(n.value),e.host&&t.registerInstance(s.DOM.Element,e.host),e.viewModel=t.viewModel=t.get(n.value),e.viewModelResource=n,e));let n=e.viewModel.constructor,i="function"==typeof e.viewModel;i&&(n=e.viewModel,t.autoRegister(n));let o=r.b.getOrCreateOwn(r.b.resource,He,n);return o.elementName=o.elementName||"dynamic-element",o.initialize(i?t:e.container||t,n),e.viewModelResource={metadata:o,value:n},e.host&&t.registerInstance(s.DOM.Element,e.host),t.viewModel=e.viewModel=i?t.get(n):e.viewModel,Promise.resolve(e)}compose(e){e.childContainer=e.childContainer||e.container.createChild(),e.view=this.viewLocator.getViewStrategy(e.view);let t=e.childContainer.get(L),n=t.tryCapture();return n?e.compositionTransactionOwnershipToken=n:e.compositionTransactionNotifier=t.enlist(),e.viewModel?this._createControllerAndSwap(e):e.view?(e.viewResources&&e.view.makeRelativeTo(e.viewResources.viewUrl),e.view.loadViewFactory(this.viewEngine,new Q).then(t=>{let n=t.create(e.childContainer);return n.bind(e.bindingContext,e.overrideContext),e.compositionTransactionOwnershipToken?e.compositionTransactionOwnershipToken.waitForCompositionComplete().then(()=>this._swap(e,n)).then(()=>n):this._swap(e,n).then(()=>n)})):e.viewSlot?(e.viewSlot.removeAll(),e.compositionTransactionNotifier&&e.compositionTransactionNotifier.done(),Promise.resolve(null)):Promise.resolve(null)}})||E,rt=class{initialize(e,t){}register(e,t){}load(e,t){let n=new t;e.get(V.EventManager).registerElementConfig(n)}};function st(e){return function(t){"string"==typeof e||Object.getPrototypeOf(e)===Object.prototype?t.$resource=e:r.b.define(r.b.resource,e,t)}}function ot(e){return function(t){if(e instanceof He)r.b.define(r.b.resource,e,t);else{let n=r.b.getOrCreateOwn(r.b.resource,He,t);Object.assign(n,e)}}}function at(e){return function(t){r.b.getOrCreateOwn(r.b.resource,He,t).elementName=pe(e,"custom element")}}function lt(e,t,n){return function(i){let s=r.b.getOrCreateOwn(r.b.resource,He,i);s.attributeName=pe(e,"custom attribute"),s.attributeDefaultBindingMode=t,s.aliases=n}}function ut(e){let t=function(e){r.b.getOrCreateOwn(r.b.resource,He,e).liftsContent=!0};return e?t(e):t}function ct(e,t,n){let i=function(t,n,i){let s,o=n?t.constructor:t,a=r.b.getOrCreateOwn(r.b.resource,He,o);return n&&((e=e||{}).name=n),(s=new qe(e)).registerWith(o,a,i)};if(!e)return i;if(t){let r=e;return e=null,i(r,t,n)}return i}function ht(e){let t=function(e){r.b.getOrCreateOwn(r.b.resource,He,e).hasDynamicOptions=!0};return e?t(e):t}const dt={mode:"open"};function pt(e){let t="function"!=typeof e&&e?e:dt,n=function(e){let n=r.b.getOrCreateOwn(r.b.resource,He,e);n.targetShadowDOM=!0,n.shadowDOMOptions=t};return"function"==typeof e?n(e):n}function ft(e){return function(t){r.b.getOrCreateOwn(r.b.resource,He,t).processAttributes=function(t,n,r,s,o){try{e(t,n,r,s,o)}catch(e){i.getLogger("templating").error(e)}}}}function gt(){return!1}function vt(e){return function(t){r.b.getOrCreateOwn(r.b.resource,He,t).processContent=e?function(t,n,r,s){try{return e(t,n,r,s)}catch(e){return i.getLogger("templating").error(e),!1}}:gt}}function mt(e){let t=function(e){r.b.getOrCreateOwn(r.b.resource,He,e).containerless=!0};return e?t(e):t}function bt(e){return function(t){r.b.define(re.viewStrategyMetadataKey,e,t)}}function yt(e){return bt(new Y(e))}function wt(e,t,n){return bt(new ne(e,t,n))}function xt(e,t){let n,i;"function"==typeof e?n=e:(i=e,n=void 0);let s=function(e){r.b.define(re.viewStrategyMetadataKey,new ee(i,t),e)};return n?s(n):s}function kt(e){return function(t){t.$view=e}}function Ct(e){let t=function(e){r.b.define(r.b.resource,new rt,e)};return e?t(e):t}function _t(...e){return function(t){r.b.define(Pe.viewModelRequireMetadataKey,e,t)}}let Ot=Object(M.inject)(M.Container,je,Ne,it)(S=class{constructor(e,t,n,i){this._container=e,this._moduleAnalyzer=t,this._viewCompiler=n,this._compositionEngine=i,e.registerInstance(T,T.instance=new T)}configureAnimator(e){this._container.unregister(T),this._container.registerInstance(T,T.instance=e)}compose(e){return this._compositionEngine.compose(e)}enhance(e){e instanceof s.DOM.Element&&(e={element:e});let t={letExpressions:[]},n=e.resources||this._container.get(fe);this._viewCompiler._compileNode(e.element,n,t,e.element.parentNode,"root",!0);let i=new Ae(e.element,t,n),r=e.container||this._container.createChild(),o=i.create(r,W.enhance());return o.bind(e.bindingContext||{},e.overrideContext),o.firstChild=o.lastChild=o.fragment,o.fragment=s.DOM.createDocumentFragment(),o.attached(),o}})||S},function(e,t,n){"use strict";n.r(t),n.d(t,"resolver",function(){return d}),n.d(t,"StrategyResolver",function(){return p}),n.d(t,"Lazy",function(){return f}),n.d(t,"All",function(){return g}),n.d(t,"Optional",function(){return v}),n.d(t,"Parent",function(){return m}),n.d(t,"Factory",function(){return b}),n.d(t,"NewInstance",function(){return y}),n.d(t,"getDecoratorDependencies",function(){return w}),n.d(t,"lazy",function(){return x}),n.d(t,"all",function(){return k}),n.d(t,"optional",function(){return C}),n.d(t,"parent",function(){return _}),n.d(t,"factory",function(){return O}),n.d(t,"newInstance",function(){return A}),n.d(t,"invoker",function(){return E}),n.d(t,"invokeAsFactory",function(){return S}),n.d(t,"FactoryInvoker",function(){return V}),n.d(t,"registration",function(){return M}),n.d(t,"transient",function(){return N}),n.d(t,"singleton",function(){return R}),n.d(t,"TransientRegistration",function(){return T}),n.d(t,"SingletonRegistration",function(){return j}),n.d(t,"_emptyParameters",function(){return L}),n.d(t,"InvocationHandler",function(){return F}),n.d(t,"Container",function(){return q}),n.d(t,"autoinject",function(){return $}),n.d(t,"inject",function(){return z});var i,r,s,o,a,l,u,c=n(0),h=n(2);const d=c.c.create("aurelia:resolver",function(e){return"function"==typeof e.get||"Resolvers must implement: get(container: Container, key: any): any"});let p=d()(i=class{constructor(e,t){this.strategy=e,this.state=t}get(e,t){switch(this.strategy){case 0:return this.state;case 1:let n=e.invoke(this.state);return this.state=n,this.strategy=0,n;case 2:return e.invoke(this.state);case 3:return this.state(e,t,this);case 4:return this.state[0].get(e,t);case 5:return e.get(this.state);default:throw new Error("Invalid strategy: "+this.strategy)}}})||i,f=d()(r=class e{constructor(e){this._key=e}get(e){return()=>e.get(this._key)}static of(t){return new e(t)}})||r,g=d()(s=class e{constructor(e){this._key=e}get(e){return e.getAll(this._key)}static of(t){return new e(t)}})||s,v=d()(o=class e{constructor(e,t=!0){this._key=e,this._checkParent=t}get(e){return e.hasResolver(this._key,this._checkParent)?e.get(this._key):null}static of(t,n=!0){return new e(t,n)}})||o,m=d()(a=class e{constructor(e){this._key=e}get(e){return e.parent?e.parent.get(this._key):null}static of(t){return new e(t)}})||a,b=d()(l=class e{constructor(e){this._key=e}get(e){let t=this._key,n=e.getResolver(t);return n&&3===n.strategy&&(t=n.state),(...n)=>e.invoke(t,n)}static of(t){return new e(t)}})||l,y=d()(u=class e{constructor(e,...t){this.key=e,this.asKey=e,this.dynamicDependencies=t}get(e){let t=this.dynamicDependencies.length>0?this.dynamicDependencies.map(t=>t["protocol:aurelia:resolver"]?t.get(e):e.get(t)):void 0,n=this.key,i=e.getResolver(n);i&&3===i.strategy&&(n=i.state);const r=e.invoke(n,t);return e.registerInstance(this.asKey,r),r}as(e){return this.asKey=e,this}static of(t,...n){return new e(t,...n)}})||u;function w(e){return $(e),e.inject}function x(e){return function(t,n,i){w(t)[i]=f.of(e)}}function k(e){return function(t,n,i){w(t)[i]=g.of(e)}}function C(e=!0){let t=function(e){return function(t,n,i){let r=w(t);r[i]=v.of(r[i],e)}};return t("boolean"!=typeof e||e)}function _(e,t,n){let i=w(e);i[n]=m.of(i[n])}function O(e){return function(t,n,i){w(t)[i]=b.of(e)}}function A(e,...t){let n=function(e){return function(n,i,r){let s=w(n);s[r]=y.of(s[r],...t),e&&s[r].as(e)}};return arguments.length>=1?n(e):n()}function E(e){return function(t){c.b.define(c.b.invoker,e,t)}}function S(e){let t=function(e){c.b.define(c.b.invoker,V.instance,e)};return e?t(e):t}let V=class{invoke(e,t,n){let i=n.length,r=new Array(i);for(;i--;)r[i]=e.get(n[i]);return t.apply(void 0,r)}invokeWithDynamicDependencies(e,t,n,i){let r=n.length,s=new Array(r);for(;r--;)s[r]=e.get(n[r]);return void 0!==i&&(s=s.concat(i)),t.apply(void 0,s)}};function M(e){return function(t){c.b.define(c.b.registration,e,t)}}function N(e){return M(new T(e))}function R(e,t=!1){return M(new j(e,t))}V.instance=new V;let T=class{constructor(e){this._key=e}registerResolver(e,t,n){let i=e.getResolver(this._key||t);return void 0===i?e.registerTransient(this._key||t,n):i}},j=class{constructor(e,t=!1){"boolean"==typeof e?this._registerInChild=e:(this._key=e,this._registerInChild=t)}registerResolver(e,t,n){let i=this._registerInChild?e:e.root,r=i.getResolver(this._key||t);return void 0===r?i.registerSingleton(this._key||t,n):r}};function B(e){if(null==e)throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?")}const L=Object.freeze([]);c.b.registration="aurelia:registration",c.b.invoker="aurelia:invoker";let P=d.decorates,F=class{constructor(e,t,n){this.fn=e,this.invoker=t,this.dependencies=n}invoke(e,t){return void 0!==t?this.invoker.invokeWithDynamicDependencies(e,this.fn,this.dependencies,t):this.invoker.invoke(e,this.fn,this.dependencies)}};function I(e,t,n,i){let r,s=n.length,o=new Array(s);for(;s--;){if(null==(r=n[s]))throw new Error("Constructor Parameter with index "+s+" cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?");o[s]=e.get(r)}return void 0!==i&&(o=o.concat(i)),Reflect.construct(t,o)}let D={0:{invoke:(e,t)=>new t,invokeWithDynamicDependencies:I},1:{invoke:(e,t,n)=>new t(e.get(n[0])),invokeWithDynamicDependencies:I},2:{invoke:(e,t,n)=>new t(e.get(n[0]),e.get(n[1])),invokeWithDynamicDependencies:I},3:{invoke:(e,t,n)=>new t(e.get(n[0]),e.get(n[1]),e.get(n[2])),invokeWithDynamicDependencies:I},4:{invoke:(e,t,n)=>new t(e.get(n[0]),e.get(n[1]),e.get(n[2]),e.get(n[3])),invokeWithDynamicDependencies:I},5:{invoke:(e,t,n)=>new t(e.get(n[0]),e.get(n[1]),e.get(n[2]),e.get(n[3]),e.get(n[4])),invokeWithDynamicDependencies:I},fallback:{invoke:I,invokeWithDynamicDependencies:I}};let q=class e{constructor(e){void 0===e&&(e={}),this._configuration=e,this._onHandlerCreated=e.onHandlerCreated,this._handlers=e.handlers||(e.handlers=new Map),this._resolvers=new Map,this.root=this,this.parent=null}makeGlobal(){return e.instance=this,this}setHandlerCreatedCallback(e){this._onHandlerCreated=e,this._configuration.onHandlerCreated=e}registerInstance(e,t){return this.registerResolver(e,new p(0,void 0===t?e:t))}registerSingleton(e,t){return this.registerResolver(e,new p(1,void 0===t?e:t))}registerTransient(e,t){return this.registerResolver(e,new p(2,void 0===t?e:t))}registerHandler(e,t){return this.registerResolver(e,new p(3,t))}registerAlias(e,t){return this.registerResolver(t,new p(5,e))}registerResolver(e,t){B(e);let n=this._resolvers,i=n.get(e);return void 0===i?n.set(e,t):4===i.strategy?i.state.push(t):n.set(e,new p(4,[i,t])),t}autoRegister(e,t){if("function"==typeof(t=void 0===t?e:t)){let n=c.b.get(c.b.registration,t);return void 0===n?this.registerResolver(e,new p(1,t)):n.registerResolver(this,e,t)}return this.registerResolver(e,new p(0,t))}autoRegisterAll(e){let t=e.length;for(;t--;)this.autoRegister(e[t])}unregister(e){this._resolvers.delete(e)}hasResolver(e,t=!1){return B(e),this._resolvers.has(e)||t&&null!==this.parent&&this.parent.hasResolver(e,t)}getResolver(e){return this._resolvers.get(e)}get(t){if(B(t),t===e)return this;if(P(t))return t.get(this,t);let n=this._resolvers.get(t);if(void 0===n){if(null===this.parent)return this.autoRegister(t).get(this,t);let e=c.b.get(c.b.registration,t);return void 0===e?this.parent._get(t):e.registerResolver(this,t,t).get(this,t)}return n.get(this,t)}_get(e){let t=this._resolvers.get(e);return void 0===t?null===this.parent?this.autoRegister(e).get(this,e):this.parent._get(e):t.get(this,e)}getAll(e){B(e);let t=this._resolvers.get(e);if(void 0===t)return null===this.parent?L:this.parent.getAll(e);if(4===t.strategy){let n=t.state,i=n.length,r=new Array(i);for(;i--;)r[i]=n[i].get(this,e);return r}return[t.get(this,e)]}createChild(){let t=new e(this._configuration);return t.root=this.root,t.parent=this,t}invoke(e,t){try{let n=this._handlers.get(e);return void 0===n&&(n=this._createInvocationHandler(e),this._handlers.set(e,n)),n.invoke(this,t)}catch(t){throw new h.AggregateError(`Error invoking ${e.name}. Check the inner error for details.`,t,!0)}}_createInvocationHandler(e){let t;if(void 0===e.inject)t=c.b.getOwn(c.b.paramTypes,e)||L;else{t=[];let i=e;for(;"function"==typeof i;)t.push(...(n=i,n.hasOwnProperty("inject")?"function"==typeof n.inject?n.inject():n.inject:[])),i=Object.getPrototypeOf(i)}var n;let i=c.b.getOwn(c.b.invoker,e)||D[t.length]||D.fallback,r=new F(e,i,t);return void 0!==this._onHandlerCreated?this._onHandlerCreated(r):r}};function $(e){let t=function(e){e.hasOwnProperty("inject")||(e.inject=(c.b.getOwn(c.b.paramTypes,e)||L).slice(),e.inject.length>0&&e.inject[e.inject.length-1]===Object&&e.inject.pop())};return e?t(e):t}function z(...e){return function(t,n,i){if("number"==typeof i)return $(t),void(1===e.length&&(t.inject[i]=e[0]));if(i){i.value.inject=e}else t.inject=e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"TaskQueue",function(){return s});var i=n(2);function r(e){return function(){let t=setTimeout(i,0),n=setInterval(i,50);function i(){clearTimeout(t),clearInterval(n),e()}}}let s=class{constructor(){this.flushing=!1,this.longStacks=!1,this.microTaskQueue=[],this.microTaskQueueCapacity=1024,this.taskQueue=[],i.FEATURE.mutationObserver?this.requestFlushMicroTaskQueue=function(e){let t=i.DOM.createMutationObserver(e),n="a",r=i.DOM.createTextNode("a"),s=Object.create(null);return s.a="b",s.b="a",t.observe(r,{characterData:!0}),function(){r.data=n=s[n]}}(()=>this.flushMicroTaskQueue()):this.requestFlushMicroTaskQueue=r(()=>this.flushMicroTaskQueue()),this.requestFlushTaskQueue=r(()=>this.flushTaskQueue())}_flushQueue(e,t){let n,i=0;try{for(this.flushing=!0;i<e.length;)if(n=e[i],this.longStacks&&(this.stack="string"==typeof n.stack?n.stack:void 0),n.call(),++i>t){for(let t=0,n=e.length-i;t<n;t++)e[t]=e[t+i];e.length-=i,i=0}}catch(e){!function(e,t,n){n&&t.stack&&"object"==typeof e&&null!==e&&(e.stack=o(e.stack)+t.stack),"onError"in t?t.onError(e):setTimeout(()=>{throw e},0)}(e,n,this.longStacks)}finally{this.flushing=!1}}queueMicroTask(e){this.microTaskQueue.length<1&&this.requestFlushMicroTaskQueue(),this.longStacks&&(e.stack=this.prepareQueueStack("\nEnqueued in MicroTaskQueue by:\n")),this.microTaskQueue.push(e)}queueTask(e){this.taskQueue.length<1&&this.requestFlushTaskQueue(),this.longStacks&&(e.stack=this.prepareQueueStack("\nEnqueued in TaskQueue by:\n")),this.taskQueue.push(e)}flushTaskQueue(){let e=this.taskQueue;this.taskQueue=[],this._flushQueue(e,Number.MAX_VALUE)}flushMicroTaskQueue(){let e=this.microTaskQueue;this._flushQueue(e,this.microTaskQueueCapacity),e.length=0}prepareQueueStack(e){let t=e+function(e){return e.replace(/^[\s\S]*?\bqueue(Micro)?Task\b[^\n]*\n/,"")}(function(){let e=new Error;if(e.stack)return e.stack;try{throw e}catch(e){return e.stack}}());return"string"==typeof this.stack&&(t=o(t)+this.stack),t}};function o(e){let t=e.lastIndexOf("flushMicroTaskQueue");return t<0&&(t=e.lastIndexOf("flushTaskQueue"))<0?e:(t=e.lastIndexOf("\n",t))<0?e:e.substr(0,t)}},function(e,t,n){!function(e,t,n,i,r,s,o){"use strict";function a(e,n){var i=e.target;if(i instanceof Element)return i;for(var r=0,s=n.controllers.length;r<s;r++){var o=n.controllers[r];if(o.viewModel===i){var a=o.container.get(t.DOM.Element);if(a)return a;throw new Error('Unable to locate target element for "'+e.sourceExpression+'".')}}throw new Error('Unable to locate target element for "'+e.sourceExpression+'".')}function l(e,t,n){var i=t.evaluate(n,null);if(null==i||i instanceof Object)return i;throw new Error("The '"+t+"' part of '"+e+"' evaluates to "+i+" instead of an object, null or undefined.")}function u(e,t){for(var i,r,s=e;e instanceof n.BindingBehavior||e instanceof n.ValueConverter;)e=e.expression;if(e instanceof n.AccessScope)i=n.getContextFor(e.name,t,e.ancestor),r=e.name;else if(e instanceof n.AccessMember)i=l(s,e.object,t),r=e.name;else{if(!(e instanceof n.AccessKeyed))throw new Error("Expression '"+s+"' is not compatible with the validate binding-behavior.");i=l(s,e.object,t),r=e.key.evaluate(t)}return null==i?null:{object:i,propertyName:r}}function c(e){return"[object String]"===Object.prototype.toString.call(e)}var h=function(){function e(e){this.parser=e}return e.prototype.parse=function(e){if(c(e)||(t=e,"[object Number]"===Object.prototype.toString.call(t)))return e;var t,i=d(e.toString()),r=this.parser.parse(i);if(r instanceof n.AccessScope||r instanceof n.AccessMember&&r.object instanceof n.AccessScope)return r.name;throw new Error('Invalid property expression: "'+r+'"')},e.inject=[n.Parser],e}();function d(e){var t=/^function\s*\([$_\w\d]+\)\s*\{(?:\s*"use strict";)?\s*(?:[$_\w\d.['"\]+;]+)?\s*return\s+[$_\w\d]+\.([$_\w\d]+)\s*;?\s*\}$/.exec(e)||/^\(?[$_\w\d]+\)?\s*=>\s*[$_\w\d]+\.([$_\w\d]+)$/.exec(e);if(null===t)throw new Error("Unable to parse accessor function:\n"+e);return t[1]}
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */var p,f=function(e,t){return(f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function g(e,t){function n(){this.constructor=e}f(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function v(e,t,n,i){var r,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,i);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(s<3?r(o):s>3?r(t,n,o):r(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o}(p=e.validateTrigger||(e.validateTrigger={}))[p.manual=0]="manual",p[p.blur=1]="blur",p[p.change=2]="change",p[p.changeOrBlur=3]="changeOrBlur";var m=function(){},b=function(){function e(t,n,i,r,s){void 0===s&&(s=null),this.rule=t,this.object=n,this.propertyName=i,this.valid=r,this.message=s,this.id=e.nextId++}return e.prototype.toString=function(){return this.valid?"Valid.":this.message},e.nextId=0,e}(),y=function(e,t,n,i,r){this.type=e,this.errors=t,this.results=n,this.instruction=i,this.controllerValidateResult=r},w=function(){function t(t,n){this.validator=t,this.propertyParser=n,this.bindings=new Map,this.renderers=[],this.results=[],this.errors=[],this.validating=!1,this.elements=new Map,this.objects=new Map,this.validateTrigger=e.validateTrigger.blur,this.finishValidating=Promise.resolve(),this.eventCallbacks=[]}return t.prototype.subscribe=function(e){var t=this;return this.eventCallbacks.push(e),{dispose:function(){var n=t.eventCallbacks.indexOf(e);-1!==n&&t.eventCallbacks.splice(n,1)}}},t.prototype.addObject=function(e,t){this.objects.set(e,t)},t.prototype.removeObject=function(e){this.objects.delete(e),this.processResultDelta("reset",this.results.filter(function(t){return t.object===e}),[])},t.prototype.addError=function(e,t,n){var i;void 0===n&&(n=null),i=null===n?n:this.propertyParser.parse(n);var r=new b({__manuallyAdded__:!0},t,i,!1,e);return this.processResultDelta("validate",[],[r]),r},t.prototype.removeError=function(e){-1!==this.results.indexOf(e)&&this.processResultDelta("reset",[e],[])},t.prototype.addRenderer=function(e){var t=this;this.renderers.push(e),e.render({kind:"validate",render:this.results.map(function(e){return{result:e,elements:t.elements.get(e)}}),unrender:[]})},t.prototype.removeRenderer=function(e){var t=this;this.renderers.splice(this.renderers.indexOf(e),1),e.render({kind:"reset",render:[],unrender:this.results.map(function(e){return{result:e,elements:t.elements.get(e)}})})},t.prototype.registerBinding=function(e,t,n){this.bindings.set(e,{target:t,rules:n,propertyInfo:null})},t.prototype.unregisterBinding=function(e){this.resetBinding(e),this.bindings.delete(e)},t.prototype.getInstructionPredicate=function(e){var t=this;if(e){var n,i=e.object,r=e.propertyName,s=e.rules;return n=e.propertyName?function(e){return e.object===i&&e.propertyName===r}:function(e){return e.object===i},s?function(e){return n(e)&&t.validator.ruleExists(s,e.rule)}:n}return function(){return!0}},t.prototype.validate=function(e){var t,n=this;if(e){var i=e.object,r=e.propertyName,s=e.rules;s=s||this.objects.get(i),t=void 0===e.propertyName?function(){return n.validator.validateObject(i,s)}:function(){return n.validator.validateProperty(i,r,s)}}else t=function(){for(var e=[],t=0,i=Array.from(n.objects);t<i.length;t++){var r=i[t],s=r[0],o=r[1];e.push(n.validator.validateObject(s,o))}for(var a=0,l=Array.from(n.bindings);a<l.length;a++){var c=l[a],h=c[0],o=c[1].rules,d=u(h.sourceExpression,h.source);d&&!n.objects.has(d.object)&&e.push(n.validator.validateProperty(d.object,d.propertyName,o))}return Promise.all(e).then(function(e){return e.reduce(function(e,t){return e.concat(t)},[])})};this.validating=!0;var o=this.finishValidating.then(t).then(function(t){var i=n.getInstructionPredicate(e),r=n.results.filter(i);n.processResultDelta("validate",r,t),o===n.finishValidating&&(n.validating=!1);var s={instruction:e,valid:void 0===t.find(function(e){return!e.valid}),results:t};return n.invokeCallbacks(e,s),s}).catch(function(e){return n.validating=!1,n.finishValidating=Promise.resolve(),Promise.reject(e)});return this.finishValidating=o,o},t.prototype.reset=function(e){var t=this.getInstructionPredicate(e),n=this.results.filter(t);this.processResultDelta("reset",n,[]),this.invokeCallbacks(e,null)},t.prototype.getAssociatedElements=function(e){for(var t=e.object,n=e.propertyName,i=[],r=0,s=Array.from(this.bindings);r<s.length;r++){var o=s[r],a=o[0],l=o[1].target,c=u(a.sourceExpression,a.source);c&&c.object===t&&c.propertyName===n&&i.push(l)}return i},t.prototype.processResultDelta=function(e,t,n){var i={kind:e,render:[],unrender:[]};n=n.slice(0);for(var r=function(e){var t=s.elements.get(e);s.elements.delete(e),i.unrender.push({result:e,elements:t});var r=n.findIndex(function(t){return t.rule===e.rule&&t.object===e.object&&t.propertyName===e.propertyName});if(-1===r)s.results.splice(s.results.indexOf(e),1),e.valid||s.errors.splice(s.errors.indexOf(e),1);else{var o=n.splice(r,1)[0],a=s.getAssociatedElements(o);s.elements.set(o,a),i.render.push({result:o,elements:a}),s.results.splice(s.results.indexOf(e),1,o),!e.valid&&o.valid?s.errors.splice(s.errors.indexOf(e),1):e.valid||o.valid?o.valid||s.errors.push(o):s.errors.splice(s.errors.indexOf(e),1,o)}},s=this,o=0,a=t;o<a.length;o++){var l=a[o];r(l)}for(var u=0,c=n;u<c.length;u++){var h=c[u],d=this.getAssociatedElements(h);i.render.push({result:h,elements:d}),this.elements.set(h,d),this.results.push(h),h.valid||this.errors.push(h)}for(var p=0,f=this.renderers;p<f.length;p++){var g=f[p];g.render(i)}},t.prototype.validateBinding=function(e){if(e.isBound){var t,n=u(e.sourceExpression,e.source),i=this.bindings.get(e);if(i&&(t=i.rules,i.propertyInfo=n),n){var r=n.object,s=n.propertyName;this.validate({object:r,propertyName:s,rules:t})}}},t.prototype.resetBinding=function(e){var t=this.bindings.get(e),n=u(e.sourceExpression,e.source);if(!n&&t&&(n=t.propertyInfo),t&&(t.propertyInfo=null),n){var i=n.object,r=n.propertyName;this.reset({object:i,propertyName:r})}},t.prototype.changeTrigger=function(e){this.validateTrigger=e;for(var t=Array.from(this.bindings.keys()),n=0,i=t;n<i.length;n++){var r=i[n],s=r.source;r.unbind(),r.bind(s)}},t.prototype.revalidateErrors=function(){for(var e=0,t=this.errors;e<t.length;e++){var n=t[e],i=n.object,r=n.propertyName,s=n.rule;if(!s.__manuallyAdded__){var o=[[s]];this.validate({object:i,propertyName:r,rules:o})}}},t.prototype.invokeCallbacks=function(e,t){if(0!==this.eventCallbacks.length)for(var n=new y(t?"validate":"reset",this.errors,this.results,e||null,t),i=0;i<this.eventCallbacks.length;i++)this.eventCallbacks[i](n)},t.inject=[m,h],t}(),x=function(){function t(e){this.taskQueue=e}return t.prototype.bind=function(t,n,r,s){var o,l=this,u=a(t,n);if(r instanceof w?o=r:(o=n.container.get(i.Optional.of(w)),s=r),null===o)throw new Error("A ValidationController has not been registered.");o.registerBinding(t,u,s),t.validationController=o;var c=this.getValidateTrigger(o);c&e.validateTrigger.change&&(t.vbbUpdateSource=t.updateSource,t.updateSource=function(e){this.vbbUpdateSource(e),this.validationController.validateBinding(this)}),c&e.validateTrigger.blur&&(t.validateBlurHandler=function(){l.taskQueue.queueMicroTask(function(){return o.validateBinding(t)})},t.validateTarget=u,u.addEventListener("blur",t.validateBlurHandler)),c!==e.validateTrigger.manual&&(t.standardUpdateTarget=t.updateTarget,t.updateTarget=function(e){this.standardUpdateTarget(e),this.validationController.resetBinding(this)})},t.prototype.unbind=function(e){e.vbbUpdateSource&&(e.updateSource=e.vbbUpdateSource,e.vbbUpdateSource=null),e.standardUpdateTarget&&(e.updateTarget=e.standardUpdateTarget,e.standardUpdateTarget=null),e.validateBlurHandler&&(e.validateTarget.removeEventListener("blur",e.validateBlurHandler),e.validateBlurHandler=null,e.validateTarget=null),e.validationController.unregisterBinding(e),e.validationController=null},t}(),k=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return g(t,e),t.prototype.getValidateTrigger=function(e){return e.validateTrigger},t.inject=[r.TaskQueue],t=v([n.bindingBehavior("validate")],t)}(x),C=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return g(i,t),i.prototype.getValidateTrigger=function(){return e.validateTrigger.manual},i.inject=[r.TaskQueue],i=v([n.bindingBehavior("validateManually")],i)}(x),_=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return g(i,t),i.prototype.getValidateTrigger=function(){return e.validateTrigger.blur},i.inject=[r.TaskQueue],i=v([n.bindingBehavior("validateOnBlur")],i)}(x),O=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return g(i,t),i.prototype.getValidateTrigger=function(){return e.validateTrigger.change},i.inject=[r.TaskQueue],i=v([n.bindingBehavior("validateOnChange")],i)}(x),A=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return g(i,t),i.prototype.getValidateTrigger=function(){return e.validateTrigger.changeOrBlur},i.inject=[r.TaskQueue],i=v([n.bindingBehavior("validateOnChangeOrBlur")],i)}(x),E=function(){function e(e){this.container=e}return e.get=function(t){return new e(t)},e.prototype.create=function(e){e||(e=this.container.get(m));var t=this.container.get(h);return new w(e,t)},e.prototype.createForCurrentScope=function(e){var t=this.create(e);return this.container.registerInstance(w,t),t},e}();E["protocol:aurelia:resolver"]=!0;var S=function(){function e(e,t){this.boundaryElement=e,this.controllerAccessor=t,this.controller=null,this.errors=[],this.errorsInternal=[]}return e.inject=function(){return[t.DOM.Element,i.Lazy.of(w)]},e.prototype.sort=function(){this.errorsInternal.sort(function(e,t){return e.targets[0]===t.targets[0]?0:2&e.targets[0].compareDocumentPosition(t.targets[0])?1:-1})},e.prototype.interestingElements=function(e){var t=this;return e.filter(function(e){return t.boundaryElement.contains(e)})},e.prototype.render=function(e){for(var t=function(e){var t=n.errorsInternal.findIndex(function(t){return t.error===e});-1!==t&&n.errorsInternal.splice(t,1)},n=this,i=0,r=e.unrender;i<r.length;i++){var s=r[i].result;t(s)}for(var o=0,a=e.render;o<a.length;o++){var l=a[o],s=l.result,u=l.elements;if(!s.valid){var c=this.interestingElements(u);c.length&&this.errorsInternal.push({error:s,targets:c})}}this.sort(),this.errors=this.errorsInternal},e.prototype.bind=function(){this.controller||(this.controller=this.controllerAccessor()),this.controller.addRenderer(this)},e.prototype.unbind=function(){this.controller&&this.controller.removeRenderer(this)},v([s.bindable({defaultBindingMode:n.bindingMode.oneWay})],e.prototype,"controller",void 0),v([s.bindable({primaryProperty:!0,defaultBindingMode:n.bindingMode.twoWay})],e.prototype,"errors",void 0),e=v([s.customAttribute("validation-errors")],e)}(),V=function(){function e(){}return e.prototype.created=function(e){this.container=e.container},e.prototype.bind=function(){this.controller=this.container.get(w),this.renderer=this.container.get(this.value),this.controller.addRenderer(this.renderer)},e.prototype.unbind=function(){this.controller.removeRenderer(this.renderer),this.controller=null,this.renderer=null},e=v([s.customAttribute("validation-renderer")],e)}(),M=function(){function e(){}return e.set=function(t,n){t instanceof Function&&(t=t.prototype),Object.defineProperty(t,e.key,{enumerable:!1,configurable:!1,writable:!0,value:n})},e.unset=function(t){t instanceof Function&&(t=t.prototype),t[e.key]=null},e.get=function(t){return t[e.key]||null},e.key="__rules__",e}(),N=function(){function e(){}return e.prototype.visitChain=function(e){this.visitArgs(e.expressions)},e.prototype.visitBindingBehavior=function(e){e.expression.accept(this),this.visitArgs(e.args)},e.prototype.visitValueConverter=function(e){e.expression.accept(this),this.visitArgs(e.args)},e.prototype.visitAssign=function(e){e.target.accept(this),e.value.accept(this)},e.prototype.visitConditional=function(e){e.condition.accept(this),e.yes.accept(this),e.no.accept(this)},e.prototype.visitAccessThis=function(e){e.ancestor=e.ancestor},e.prototype.visitAccessScope=function(e){e.name=e.name},e.prototype.visitAccessMember=function(e){e.object.accept(this)},e.prototype.visitAccessKeyed=function(e){e.object.accept(this),e.key.accept(this)},e.prototype.visitCallScope=function(e){this.visitArgs(e.args)},e.prototype.visitCallFunction=function(e){e.func.accept(this),this.visitArgs(e.args)},e.prototype.visitCallMember=function(e){e.object.accept(this),this.visitArgs(e.args)},e.prototype.visitPrefix=function(e){e.expression.accept(this)},e.prototype.visitBinary=function(e){e.left.accept(this),e.right.accept(this)},e.prototype.visitLiteralPrimitive=function(e){e.value=e.value},e.prototype.visitLiteralArray=function(e){this.visitArgs(e.elements)},e.prototype.visitLiteralObject=function(e){this.visitArgs(e.values)},e.prototype.visitLiteralString=function(e){e.value=e.value},e.prototype.visitArgs=function(e){for(var t=0;t<e.length;t++)e[t].accept(this)},e}(),R=function(){function e(e){this.bindinqLanguage=e,this.emptyStringExpression=new n.LiteralString(""),this.nullExpression=new n.LiteralPrimitive(null),this.undefinedExpression=new n.LiteralPrimitive(void 0),this.cache={}}return e.prototype.parse=function(e){if(void 0!==this.cache[e])return this.cache[e];var t=this.bindinqLanguage.parseInterpolation(null,e);if(null===t)return new n.LiteralString(e);for(var i=new n.LiteralString(t[0]),r=1;r<t.length;r+=2)i=new n.Binary("+",i,new n.Binary("+",this.coalesce(t[r]),new n.LiteralString(t[r+1])));return T.validate(i,e),this.cache[e]=i,i},e.prototype.coalesce=function(e){return new n.Conditional(new n.Binary("||",new n.Binary("===",e,this.nullExpression),new n.Binary("===",e,this.undefinedExpression)),this.emptyStringExpression,new n.CallMember(e,"toString",[]))},e.inject=[s.BindingLanguage],e}(),T=function(e){function t(t){var n=e.call(this)||this;return n.originalMessage=t,n}return g(t,e),t.validate=function(e,n){var i=new t(n);e.accept(i)},t.prototype.visitAccessScope=function(e){if(0!==e.ancestor)throw new Error("$parent is not permitted in validation message expressions.");-1!==["displayName","propertyName","value","object","config","getDisplayName"].indexOf(e.name)&&o.getLogger("aurelia-validation").warn('Did you mean to use "$'+e.name+'" instead of "'+e.name+'" in this validation message template: "'+this.originalMessage+'"?')},t}(N),j={default:"${$displayName} is invalid.",required:"${$displayName} is required.",matches:"${$displayName} is not correctly formatted.",email:"${$displayName} is not a valid email.",minLength:"${$displayName} must be at least ${$config.length} character${$config.length === 1 ? '' : 's'}.",maxLength:"${$displayName} cannot be longer than ${$config.length} character${$config.length === 1 ? '' : 's'}.",minItems:"${$displayName} must contain at least ${$config.count} item${$config.count === 1 ? '' : 's'}.",maxItems:"${$displayName} cannot contain more than ${$config.count} item${$config.count === 1 ? '' : 's'}.",min:"${$displayName} must be at least ${$config.constraint}.",max:"${$displayName} must be at most ${$config.constraint}.",range:"${$displayName} must be between or equal to ${$config.min} and ${$config.max}.",between:"${$displayName} must be between but not equal to ${$config.min} and ${$config.max}.",equals:"${$displayName} must be ${$config.expectedValue}."},B=function(){function e(e){this.parser=e}return e.prototype.getMessage=function(e){var t;return t=e in j?j[e]:j.default,this.parser.parse(t)},e.prototype.getDisplayName=function(e,t){if(null!=t)return t instanceof Function?t():t;var n=e.toString().split(/(?=[A-Z])/).join(" ");return n.charAt(0).toUpperCase()+n.slice(1)},e.inject=[R],e}(),L=function(e){function t(t,n){var i=e.call(this)||this;return i.messageProvider=t,i.lookupFunctions=n.lookupFunctions,i.getDisplayName=t.getDisplayName.bind(t),i}return g(t,e),t.prototype.validateProperty=function(e,t,n){return this.validate(e,t,n||null)},t.prototype.validateObject=function(e,t){return this.validate(e,null,t||null)},t.prototype.ruleExists=function(e,t){for(var n=e.length;n--;)if(-1!==e[n].indexOf(t))return!0;return!1},t.prototype.getMessage=function(e,t,n){var i=e.message||this.messageProvider.getMessage(e.messageKey),r=e.property,s=r.name,o=r.displayName;null!==s&&(o=this.messageProvider.getDisplayName(s,o));var a={$displayName:o,$propertyName:s,$value:n,$object:t,$config:e.config,$getDisplayName:this.getDisplayName};return i.evaluate({bindingContext:t,overrideContext:a},this.lookupFunctions)},t.prototype.validateRuleSequence=function(e,t,n,i,r){for(var s=this,o=null==t,a=n[i],l=!0,u=[],c=function(n){var i=a[n];if(!o&&i.property.name!=t)return"continue";if(i.when&&!i.when(e))return"continue";var c=null===i.property.name?e:e[i.property.name],h=i.condition(c,e);h instanceof Promise||(h=Promise.resolve(h)),u.push(h.then(function(t){var n=t?null:s.getMessage(i,e,c);return r.push(new b(i,e,i.property.name,t,n)),l=l&&t,t}))},h=0;h<a.length;h++)c(h);return Promise.all(u).then(function(){return i++,l&&i<n.length?s.validateRuleSequence(e,t,n,i,r):r})},t.prototype.validate=function(e,t,n){return n||(n=M.get(e)),n&&0!==n.length?this.validateRuleSequence(e,t,n,0,[]):Promise.resolve([])},t.inject=[B,s.ViewResources],t}(m),P=function(){function e(e,t,n,i,r,s){void 0===n&&(n={}),this.fluentEnsure=i,this.fluentRules=r,this.parsers=s,this.rule={property:e,condition:t,config:n,when:null,messageKey:"default",message:null,sequence:r.sequence},this.fluentEnsure._addRule(this.rule)}return e.prototype.then=function(){return this.fluentRules.sequence++,this},e.prototype.withMessageKey=function(e){return this.rule.messageKey=e,this.rule.message=null,this},e.prototype.withMessage=function(e){return this.rule.messageKey="custom",this.rule.message=this.parsers.message.parse(e),this},e.prototype.when=function(e){return this.rule.when=e,this},e.prototype.tag=function(e){return this.rule.tag=e,this},e.prototype.ensure=function(e){return this.fluentEnsure.ensure(e)},e.prototype.ensureObject=function(){return this.fluentEnsure.ensureObject()},Object.defineProperty(e.prototype,"rules",{get:function(){return this.fluentEnsure.rules},enumerable:!0,configurable:!0}),e.prototype.on=function(e){return this.fluentEnsure.on(e)},e.prototype.satisfies=function(e,t){return this.fluentRules.satisfies(e,t)},e.prototype.satisfiesRule=function(e){for(var t,n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];return(t=this.fluentRules).satisfiesRule.apply(t,[e].concat(n))},e.prototype.required=function(){return this.fluentRules.required()},e.prototype.matches=function(e){return this.fluentRules.matches(e)},e.prototype.email=function(){return this.fluentRules.email()},e.prototype.minLength=function(e){return this.fluentRules.minLength(e)},e.prototype.maxLength=function(e){return this.fluentRules.maxLength(e)},e.prototype.minItems=function(e){return this.fluentRules.minItems(e)},e.prototype.maxItems=function(e){return this.fluentRules.maxItems(e)},e.prototype.min=function(e){return this.fluentRules.min(e)},e.prototype.max=function(e){return this.fluentRules.max(e)},e.prototype.range=function(e,t){return this.fluentRules.range(e,t)},e.prototype.between=function(e,t){return this.fluentRules.between(e,t)},e.prototype.equals=function(e){return this.fluentRules.equals(e)},e}(),F=function(){function e(e,t,n){this.fluentEnsure=e,this.parsers=t,this.property=n,this.sequence=0}return e.prototype.displayName=function(e){return this.property.displayName=e,this},e.prototype.satisfies=function(e,t){return new P(this.property,e,t,this.fluentEnsure,this,this.parsers)},e.prototype.satisfiesRule=function(t){for(var n=this,i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];var s=e.customRules[t];if(!s){if((s=this[t])instanceof Function)return s.call.apply(s,[this].concat(i));throw new Error('Rule with name "'+t+'" does not exist.')}var o=s.argsToConfig?s.argsToConfig.apply(s,i):void 0;return this.satisfies(function(e,t){var r;return(r=s.condition).call.apply(r,[n,e,t].concat(i))},o).withMessageKey(t)},e.prototype.required=function(){return this.satisfies(function(e){return null!=e&&!(c(e)&&!/\S/.test(e))}).withMessageKey("required")},e.prototype.matches=function(e){return this.satisfies(function(t){return null==t||0===t.length||e.test(t)}).withMessageKey("matches")},e.prototype.email=function(){return this.matches(/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/).withMessageKey("email")},e.prototype.minLength=function(e){return this.satisfies(function(t){return null==t||0===t.length||t.length>=e},{length:e}).withMessageKey("minLength")},e.prototype.maxLength=function(e){return this.satisfies(function(t){return null==t||0===t.length||t.length<=e},{length:e}).withMessageKey("maxLength")},e.prototype.minItems=function(e){return this.satisfies(function(t){return null==t||t.length>=e},{count:e}).withMessageKey("minItems")},e.prototype.maxItems=function(e){return this.satisfies(function(t){return null==t||t.length<=e},{count:e}).withMessageKey("maxItems")},e.prototype.min=function(e){return this.satisfies(function(t){return null==t||t>=e},{constraint:e}).withMessageKey("min")},e.prototype.max=function(e){return this.satisfies(function(t){return null==t||t<=e},{constraint:e}).withMessageKey("max")},e.prototype.range=function(e,t){return this.satisfies(function(n){return null==n||n>=e&&n<=t},{min:e,max:t}).withMessageKey("range")},e.prototype.between=function(e,t){return this.satisfies(function(n){return null==n||n>e&&n<t},{min:e,max:t}).withMessageKey("between")},e.prototype.equals=function(e){return this.satisfies(function(t){return null==t||""===t||t===e},{expectedValue:e}).withMessageKey("equals")},e.customRules={},e}(),I=function(){function e(e){this.parsers=e,this.rules=[]}return e.prototype.ensure=function(e){this.assertInitialized();var t=this.parsers.property.parse(e),n=new F(this,this.parsers,{name:t,displayName:null});return this.mergeRules(n,t)},e.prototype.ensureObject=function(){this.assertInitialized();var e=new F(this,this.parsers,{name:null,displayName:null});return this.mergeRules(e,null)},e.prototype.on=function(e){return M.set(e,this.rules),this},e.prototype._addRule=function(e){for(;this.rules.length<e.sequence+1;)this.rules.push([]);this.rules[e.sequence].push(e)},e.prototype.assertInitialized=function(){if(!this.parsers)throw new Error("Did you forget to add \".plugin('aurelia-validation')\" to your main.js?")},e.prototype.mergeRules=function(e,t){var n=this.rules.find(function(e){return e.length>0&&e[0].property.name==t});if(n){var i=n[n.length-1];e.sequence=i.sequence,null!==i.property.displayName&&(e=e.displayName(i.property.displayName))}return e},e}(),D=function(){function e(){}return e.initialize=function(e,t){this.parsers={message:e,property:t}},e.ensure=function(t){return new I(e.parsers).ensure(t)},e.ensureObject=function(){return new I(e.parsers).ensureObject()},e.customRule=function(e,t,n,i){j[e]=n,F.customRules[e]={condition:t,argsToConfig:i}},e.taggedRules=function(e,t){return e.map(function(e){return e.filter(function(e){return e.tag===t})})},e.untaggedRules=function(e){return e.map(function(e){return e.filter(function(e){return void 0===e.tag})})},e.off=function(e){M.unset(e)},e}(),q=function(){function e(){this.validatorType=L}return e.prototype.customValidator=function(e){this.validatorType=e},e.prototype.apply=function(e){var t=e.get(this.validatorType);e.registerInstance(m,t)},e}();e.AureliaValidationConfiguration=q,e.configure=function(e,t){var n=e.container.get(R),i=e.container.get(h);D.initialize(n,i);var r=new q;t instanceof Function&&t(r),r.apply(e.container),e.globalResources&&e.globalResources(k,C,_,O,A,S,V)},e.getTargetDOMElement=a,e.getPropertyInfo=u,e.PropertyAccessorParser=h,e.getAccessorExpression=d,e.ValidateBindingBehavior=k,e.ValidateManuallyBindingBehavior=C,e.ValidateOnBlurBindingBehavior=_,e.ValidateOnChangeBindingBehavior=O,e.ValidateOnChangeOrBlurBindingBehavior=A,e.ValidateEvent=y,e.ValidateResult=b,e.ValidationController=w,e.ValidationControllerFactory=E,e.ValidationErrorsCustomAttribute=S,e.ValidationRendererCustomAttribute=V,e.Validator=m,e.Rules=M,e.StandardValidator=L,e.validationMessages=j,e.ValidationMessageProvider=B,e.ValidationMessageParser=R,e.MessageExpressionValidator=T,e.FluentRuleCustomizer=P,e.FluentRules=F,e.FluentEnsure=I,e.ValidationRules=D,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(2),n(1),n(5),n(6),n(4),n(3))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);var i,r,s,o,a,l,u,c,h=n(3),d=n(1),p=n(4);let f=(r=i=class{constructor(e){this.elements=Object.create(null),this.allElements=Object.create(null),this.svg=e,this.registerUniversal("accesskey","accessKey"),this.registerUniversal("contenteditable","contentEditable"),this.registerUniversal("tabindex","tabIndex"),this.registerUniversal("textcontent","textContent"),this.registerUniversal("innerhtml","innerHTML"),this.registerUniversal("scrolltop","scrollTop"),this.registerUniversal("scrollleft","scrollLeft"),this.registerUniversal("readonly","readOnly"),this.register("label","for","htmlFor"),this.register("img","usemap","useMap"),this.register("input","maxlength","maxLength"),this.register("input","minlength","minLength"),this.register("input","formaction","formAction"),this.register("input","formenctype","formEncType"),this.register("input","formmethod","formMethod"),this.register("input","formnovalidate","formNoValidate"),this.register("input","formtarget","formTarget"),this.register("textarea","maxlength","maxLength"),this.register("td","rowspan","rowSpan"),this.register("td","colspan","colSpan"),this.register("th","rowspan","rowSpan"),this.register("th","colspan","colSpan")}register(e,t,n){e=e.toLowerCase(),t=t.toLowerCase(),(this.elements[e]=this.elements[e]||Object.create(null))[t]=n}registerUniversal(e,t){e=e.toLowerCase(),this.allElements[e]=t}map(e,t){if(this.svg.isStandardSvgAttribute(e,t))return t;e=e.toLowerCase(),t=t.toLowerCase();const n=this.elements[e];return void 0!==n&&t in n?n[t]:t in this.allElements?this.allElements[t]:/(?:^data-)|(?:^aria-)|:/.test(t)?t:Object(d.camelCase)(t)}},i.inject=[d.SVGAnalyzer],r),g=class{constructor(e,t,n,i,r,s){this.observerLocator=e,this.targetProperty=t,this.parts=n,this.mode=i,this.lookupFunctions=r,this.attribute=this.attrToRemove=s,this.discrete=!1}createBinding(e){return 3===this.parts.length?new b(e,this.observerLocator,this.parts[1],this.mode,this.lookupFunctions,this.targetProperty,this.parts[0],this.parts[2]):new m(this.observerLocator,this.parts,e,this.targetProperty,this.mode,this.lookupFunctions)}};function v(e,t){if("style"===t)h.getLogger("templating-binding").info('Internet Explorer does not support interpolation in "style" attributes.  Use the style attribute\'s alias, "css" instead.');else if(e.parentElement&&"TEXTAREA"===e.parentElement.nodeName&&"textContent"===t)throw new Error('Interpolation binding cannot be used in the content of a textarea element.  Use <textarea value.bind="expression"></textarea> instead.')}let m=class{constructor(e,t,n,i,r,s){v(n,i),this.observerLocator=e,this.parts=t,this.target=n,this.targetProperty=i,this.targetAccessor=e.getAccessor(n,i),this.mode=r,this.lookupFunctions=s}interpolate(){if(this.isBound){let e="",t=this.parts;for(let n=0,i=t.length;n<i;n++)e+=n%2==0?t[n]:this[`childBinding${n}`].value;this.targetAccessor.setValue(e,this.target,this.targetProperty)}}updateOneTimeBindings(){for(let e=1,t=this.parts.length;e<t;e+=2){let t=this[`childBinding${e}`];t.mode===d.bindingMode.oneTime&&t.call()}}bind(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.source=e;let t=this.parts;for(let n=1,i=t.length;n<i;n+=2){let i=new b(this,this.observerLocator,t[n],this.mode,this.lookupFunctions);i.bind(e),this[`childBinding${n}`]=i}this.isBound=!0,this.interpolate()}unbind(){if(!this.isBound)return;this.isBound=!1,this.source=null;for(let e=1,t=this.parts.length;e<t;e+=2){this[`childBinding${e}`].unbind()}}},b=Object(d.connectable)()(s=class{constructor(e,t,n,i,r,s,o,a){e instanceof m?this.parent=e:(v(e,s),this.target=e,this.targetProperty=s,this.targetAccessor=t.getAccessor(e,s)),this.observerLocator=t,this.sourceExpression=n,this.mode=i,this.lookupFunctions=r,this.left=o,this.right=a}updateTarget(e){(e=null==e?"":e.toString())!==this.value&&(this.value=e,this.parent?this.parent.interpolate():this.targetAccessor.setValue(this.left+e+this.right,this.target,this.targetProperty))}call(){this.isBound&&(this.rawValue=this.sourceExpression.evaluate(this.source,this.lookupFunctions),this.updateTarget(this.rawValue),this.mode!==d.bindingMode.oneTime&&(this._version++,this.sourceExpression.connect(this,this.source),this.rawValue instanceof Array&&this.observeArray(this.rawValue),this.unobserve(!1)))}bind(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e;let t=this.sourceExpression;t.bind&&t.bind(this,e,this.lookupFunctions),this.rawValue=t.evaluate(e,this.lookupFunctions),this.updateTarget(this.rawValue),this.mode===d.bindingMode.oneWay&&Object(d.enqueueBindingConnect)(this)}unbind(){if(!this.isBound)return;this.isBound=!1;let e=this.sourceExpression;e.unbind&&e.unbind(this,this.source),this.source=null,this.value=null,this.rawValue=null,this.unobserve(!0)}connect(e){this.isBound&&(e&&(this.rawValue=this.sourceExpression.evaluate(this.source,this.lookupFunctions),this.updateTarget(this.rawValue)),this.sourceExpression.connect(this,this.source),this.rawValue instanceof Array&&this.observeArray(this.rawValue))}})||s,y=class{constructor(e,t,n,i,r){this.observerLocator=e,this.sourceExpression=n,this.targetProperty=t,this.lookupFunctions=i,this.toBindingContext=r}createBinding(){return new w(this.observerLocator,this.sourceExpression,this.targetProperty,this.lookupFunctions,this.toBindingContext)}},w=Object(d.connectable)()(o=class{constructor(e,t,n,i,r){this.observerLocator=e,this.sourceExpression=t,this.targetProperty=n,this.lookupFunctions=i,this.source=null,this.target=null,this.toBindingContext=r}updateTarget(){const e=this.sourceExpression.evaluate(this.source,this.lookupFunctions);this.target[this.targetProperty]=e}call(e){if(this.isBound){if(e!==d.sourceContext)throw new Error(`Unexpected call context ${e}`);this.updateTarget()}}bind(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.target=this.toBindingContext?e.bindingContext:e.overrideContext,this.sourceExpression.bind&&this.sourceExpression.bind(this,e,this.lookupFunctions),Object(d.enqueueBindingConnect)(this)}unbind(){this.isBound&&(this.isBound=!1,this.sourceExpression.unbind&&this.sourceExpression.unbind(this,this.source),this.source=null,this.target=null,this.unobserve(!0))}connect(){this.isBound&&(this.updateTarget(),this.sourceExpression.connect(this,this.source))}})||o,x=class{constructor(e,t,n,i,r){this.observerLocator=e,this.targetProperty=t,this.parts=n,this.lookupFunctions=i,this.toBindingContext=r}createBinding(){return new k(this.observerLocator,this.targetProperty,this.parts,this.lookupFunctions,this.toBindingContext)}},k=class{constructor(e,t,n,i,r){this.observerLocator=e,this.parts=n,this.targetProperty=t,this.lookupFunctions=i,this.toBindingContext=r,this.target=null}bind(e){if(this.isBound){if(this.source===e)return;this.unbind()}this.isBound=!0,this.source=e,this.target=this.toBindingContext?e.bindingContext:e.overrideContext,this.interpolationBinding=this.createInterpolationBinding(),this.interpolationBinding.bind(e)}unbind(){this.isBound&&(this.isBound=!1,this.source=null,this.target=null,this.interpolationBinding.unbind(),this.interpolationBinding=null)}createInterpolationBinding(){return 3===this.parts.length?new b(this.target,this.observerLocator,this.parts[1],d.bindingMode.oneWay,this.lookupFunctions,this.targetProperty,this.parts[0],this.parts[2]):new m(this.observerLocator,this.parts,this.target,this.targetProperty,d.bindingMode.oneWay,this.lookupFunctions)}},C=(l=a=class{constructor(e,t,n,i){this.parser=e,this.observerLocator=t,this.eventManager=n,this.attributeMap=i}interpret(e,t,n,i,r){return n.command in this?this[n.command](e,t,n,i,r):this.handleUnknownCommand(e,t,n,i,r)}handleUnknownCommand(e,t,n,i,r){return h.getLogger("templating-binding").warn("Unknown binding command.",n),i}determineDefaultBindingMode(e,t,n){let i=e.tagName.toLowerCase();return"input"===i&&("value"===t||"files"===t)&&"checkbox"!==e.type&&"radio"!==e.type||"input"===i&&"checked"===t&&("checkbox"===e.type||"radio"===e.type)||("textarea"===i||"select"===i)&&"value"===t||("textcontent"===t||"innerhtml"===t)&&"true"===e.contentEditable||"scrolltop"===t||"scrollleft"===t?d.bindingMode.twoWay:n&&t in n.attributes&&n.attributes[t]&&n.attributes[t].defaultBindingMode>=d.bindingMode.oneTime?n.attributes[t].defaultBindingMode:d.bindingMode.oneWay}bind(e,t,n,i,r){let s=i||p.BehaviorInstruction.attribute(n.attrName);return s.attributes[n.attrName]=new d.BindingExpression(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),void 0===n.defaultBindingMode||null===n.defaultBindingMode?this.determineDefaultBindingMode(t,n.attrName,r):n.defaultBindingMode,e.lookupFunctions),s}trigger(e,t,n){return new d.ListenerExpression(this.eventManager,n.attrName,this.parser.parse(n.attrValue),d.delegationStrategy.none,!0,e.lookupFunctions)}capture(e,t,n){return new d.ListenerExpression(this.eventManager,n.attrName,this.parser.parse(n.attrValue),d.delegationStrategy.capturing,!0,e.lookupFunctions)}delegate(e,t,n){return new d.ListenerExpression(this.eventManager,n.attrName,this.parser.parse(n.attrValue),d.delegationStrategy.bubbling,!0,e.lookupFunctions)}call(e,t,n,i){let r=i||p.BehaviorInstruction.attribute(n.attrName);return r.attributes[n.attrName]=new d.CallExpression(this.observerLocator,n.attrName,this.parser.parse(n.attrValue),e.lookupFunctions),r}options(e,t,n,i,r){let s,o,a,l=i||p.BehaviorInstruction.attribute(n.attrName),u=n.attrValue,c=this.language,h=null,d="",f=!1,g=!1,v=!1;for(o=0,a=u.length;o<a;++o){if(";"!==(s=u[o])||f)if(":"===s&&null===h)v=!0,h=d.trim(),d="";else{if("\\"===s){d+=s,g=!0;continue}d+=s,null!==h&&!1===g&&"'"===s&&(f=!f)}else v||(h=this._getPrimaryPropertyName(e,r)),n=c.inspectAttribute(e,"?",h,d.trim()),c.createAttributeInstruction(e,t,n,l,r),l.attributes[n.attrName]||(l.attributes[n.attrName]=n.attrValue),d="",h=null;g=!1}return v||(h=this._getPrimaryPropertyName(e,r)),null!==h&&(n=c.inspectAttribute(e,"?",h,d.trim()),c.createAttributeInstruction(e,t,n,l,r),l.attributes[n.attrName]||(l.attributes[n.attrName]=n.attrValue)),l}_getPrimaryPropertyName(e,t){let n=e.getAttribute(t.attributeName);return n&&n.primaryProperty?n.primaryProperty.attribute:null}for(e,t,n,i){let r,s,o,a,l;if(2!==(r=(l=(a=n.attrValue).match(/^ *[[].+[\]]/))?a.split("of "):a.split(" of ")).length)throw new Error('Incorrect syntax for "for". The form is: "$local of $items" or "[$key, $value] of $items".');return o=i||p.BehaviorInstruction.attribute(n.attrName),l?(s=r[0].replace(/[[\]]/g,"").replace(/,/g," ").replace(/\s+/g," ").trim().split(" "),o.attributes.key=s[0],o.attributes.value=s[1]):o.attributes.local=r[0],o.attributes.items=new d.BindingExpression(this.observerLocator,"items",this.parser.parse(r[1]),d.bindingMode.oneWay,e.lookupFunctions),o}"two-way"(e,t,n,i){let r=i||p.BehaviorInstruction.attribute(n.attrName);return r.attributes[n.attrName]=new d.BindingExpression(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),d.bindingMode.twoWay,e.lookupFunctions),r}"to-view"(e,t,n,i){let r=i||p.BehaviorInstruction.attribute(n.attrName);return r.attributes[n.attrName]=new d.BindingExpression(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),d.bindingMode.toView,e.lookupFunctions),r}"from-view"(e,t,n,i){let r=i||p.BehaviorInstruction.attribute(n.attrName);return r.attributes[n.attrName]=new d.BindingExpression(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),d.bindingMode.fromView,e.lookupFunctions),r}"one-time"(e,t,n,i){let r=i||p.BehaviorInstruction.attribute(n.attrName);return r.attributes[n.attrName]=new d.BindingExpression(this.observerLocator,this.attributeMap.map(t.tagName,n.attrName),this.parser.parse(n.attrValue),d.bindingMode.oneTime,e.lookupFunctions),r}},a.inject=[d.Parser,d.ObserverLocator,d.EventManager,f],l);C.prototype["one-way"]=C.prototype["to-view"];let _={},O=(c=u=class extends p.BindingLanguage{constructor(e,t,n,i){super(),this.parser=e,this.observerLocator=t,this.syntaxInterpreter=n,this.emptyStringExpression=this.parser.parse("''"),n.language=this,this.attributeMap=i,this.toBindingContextAttr="to-binding-context"}inspectAttribute(e,t,n,i){let r=n.split(".");if(_.defaultBindingMode=null,2===r.length)_.attrName=r[0].trim(),_.attrValue=i,_.command=r[1].trim(),"ref"===_.command?(_.expression=new d.NameExpression(this.parser.parse(i),_.attrName,e.lookupFunctions),_.command=null,_.attrName="ref"):_.expression=null;else if("ref"===n)_.attrName=n,_.attrValue=i,_.command=null,_.expression=new d.NameExpression(this.parser.parse(i),"element",e.lookupFunctions);else{_.attrName=n,_.attrValue=i,_.command=null;const r=this.parseInterpolation(e,i);_.expression=null===r?null:new g(this.observerLocator,this.attributeMap.map(t,n),r,d.bindingMode.oneWay,e.lookupFunctions,n)}return _}createAttributeInstruction(e,t,n,i,r){let s;if(n.expression){if("ref"===n.attrName)return n.expression;(s=i||p.BehaviorInstruction.attribute(n.attrName)).attributes[n.attrName]=n.expression}else n.command&&(s=this.syntaxInterpreter.interpret(e,t,n,i,r));return s}createLetExpressions(e,t){let n,i,r,s,o,a=[],l=t.attributes,u=this.toBindingContextAttr,c=t.hasAttribute(u);for(let t=0,p=l.length;p>t;++t)if(r=(n=l[t]).name,s=n.nodeValue,i=r.split("."),r!==u)if(2===i.length){if("bind"!==(o=i[1])){h.getLogger("templating-binding-language").warn(`Detected invalid let command. Expected "${i[0]}.bind", given "${r}"`);continue}a.push(new y(this.observerLocator,Object(d.camelCase)(i[0]),this.parser.parse(s),e.lookupFunctions,c))}else r=Object(d.camelCase)(r),null===(i=this.parseInterpolation(e,s))&&h.getLogger("templating-binding-language").warn(`Detected string literal in let bindings. Did you mean "${r}.bind=${s}" or "${r}=\${${s}}" ?`),i?a.push(new x(this.observerLocator,r,i,e.lookupFunctions,c)):a.push(new y(this.observerLocator,r,new d.LiteralString(s),e.lookupFunctions,c));return a}inspectTextContent(e,t){const n=this.parseInterpolation(e,t);return null===n?null:new g(this.observerLocator,"textContent",n,d.bindingMode.oneWay,e.lookupFunctions,"textContent")}parseInterpolation(e,t){let n,i,r,s=t.indexOf("${",0),o=t.length,a=0,l=0,u=null,c=0;for(;s>=0&&s<o-2;){l=1,i=s,s+=2;do{n=t[s],s++,"'"!==n&&'"'!==n?"\\"!==n?null===u&&("{"===n?l++:"}"===n&&l--):s++:null===u?u=n:u===n&&(u=null)}while(l>0&&s<o);if(0!==l)break;r=r||[],"\\"===t[i-1]&&"\\"!==t[i-2]?(r[c]=t.substring(a,i-1)+t.substring(i,s),r[++c]=this.emptyStringExpression,c++):(r[c]=t.substring(a,i),r[++c]=this.parser.parse(t.substring(i+2,s-1)),c++),a=s,s=t.indexOf("${",s)}return 0===c?null:(r[c]=t.substr(a),r)}},u.inject=[d.Parser,d.ObserverLocator,C,f],c);var A=n(7);n.d(t,"Person",function(){return V});const E=new A.ValidationMessageParser(new O),S=new A.PropertyAccessorParser;A.ValidationRules.initialize(E,S),validator=new A.StandardValidator(new ValidationMessageProvider,new ViewResources);class V{constructor(){this.firstName="",this.lastName=""}}console.log(new V)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,